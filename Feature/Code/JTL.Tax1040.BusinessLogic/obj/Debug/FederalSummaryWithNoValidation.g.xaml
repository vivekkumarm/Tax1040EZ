<?xml version="1.0" encoding="utf-8"?>
<local:FederalSummaryWithNoValidation local:IsIncomeAndRefundAllZeros="False" local:IsRefundAvailableCheck="False" local:IsTaxableIncomeExceedCheck="False" local:IsSSBAndRRBCheck="False" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:jtb="clr-namespace:JTL.Tax1040.BusinessObject;assembly=JTL.Tax1040.BusinessObject" xmlns:jtco="clr-namespace:JTL.Tax1040.Core.Object;assembly=JTL.Tax1040.Core.Object" xmlns:local="clr-namespace:JTL.Tax1040.BusinessLogic.WorkFlow.Activities.CalculationWithNoValidation;assembly=JTL.Tax1040.BusinessLogic" xmlns:local1="clr-namespace:Tax1040WorkFlow.WorkFlow;assembly=JTL.Tax1040.BusinessLogic" xmlns:local2="clr-namespace:Tax1040WorkFlow.WorkFlow.Activities;assembly=JTL.Tax1040.BusinessLogic" xmlns:local3="clr-namespace:JTL.Tax1040.BusinessLogic.WorkFlow.Activities;assembly=JTL.Tax1040.BusinessLogic" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:mca="clr-namespace:Microsoft.CSharp.Activities;assembly=System.Activities" xmlns:sads="http://schemas.microsoft.com/netfx/2010/xaml/activities/debugger" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib" xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=mscorlib" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <TextExpression.NamespacesForImplementation>
    <sco:Collection x:TypeArguments="x:String">
      <x:String>System</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Text</x:String>
      <x:String>JTL.Tax1040.BusinessObject</x:String>
      <x:String>JTL.Tax1040.Core.Object</x:String>
      <x:String>System.Collections</x:String>
      <x:String>JTL.Tax1040.Core.Process</x:String>
    </sco:Collection>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <sco:Collection x:TypeArguments="AssemblyReference">
      <AssemblyReference>Microsoft.Activities.Extensions</AssemblyReference>
      <AssemblyReference>Microsoft.CSharp</AssemblyReference>
      <AssemblyReference>Newtonsoft.Json</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>System.Configuration</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>System.ServiceModel.Activities</AssemblyReference>
      <AssemblyReference>System.Web</AssemblyReference>
      <AssemblyReference>System.Workflow.Activities</AssemblyReference>
      <AssemblyReference>System.Workflow.ComponentModel</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>JTL.Tax1040.Core.Object</AssemblyReference>
      <AssemblyReference>JTL.Tax1040.Core.Process</AssemblyReference>
      <AssemblyReference>JTL.Tax1040.DataAccess</AssemblyReference>
      <AssemblyReference>JTL.Tax1040.BusinessObject</AssemblyReference>
      <AssemblyReference>JTL.TAX1040.PaymentLibrary</AssemblyReference>
      <AssemblyReference>JTL.Tax1040.PDFBinding</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>JTL.Tax1040.BusinessLogic</AssemblyReference>
    </sco:Collection>
  </TextExpression.ReferencesForImplementation>
  <local:FederalSummaryWithNoValidation.Implementation>
    <Sequence DisplayName="FederalSummaryWithNoValidation">
      <Sequence.Variables>
        <Variable x:TypeArguments="jtb:Form1099OID" Name="Form1099OID" />
        <Variable x:TypeArguments="x:Double" Name="NonQualifiedPlansAmount" />
        <Variable x:TypeArguments="jtco:ErrorMessage" Name="ErrorMessage" />
        <Variable x:TypeArguments="scg:List(jtco:ErrorMessage)" Name="ErrorMessageList">
          <Variable.Default>
            <mca:CSharpValue x:TypeArguments="scg:List(jtco:ErrorMessage)">Tax1040Object.ErrorMessages</mca:CSharpValue>
          </Variable.Default>
        </Variable>
      </Sequence.Variables>
      <If DisplayName="IfTax1040ObjectCheck">
        <If.Condition>
          <InArgument x:TypeArguments="x:Boolean">
            <mca:CSharpValue x:TypeArguments="x:Boolean">Tax1040Object !=null</mca:CSharpValue>
          </InArgument>
        </If.Condition>
        <If.Then>
          <Sequence>
            <Sequence DisplayName="Tax1040LineByLineCheck">
              <Sequence DisplayName="Initialization">
                <Assign>
                  <Assign.To>
                    <OutArgument x:TypeArguments="jtb:OutputForms">
                      <mca:CSharpReference x:TypeArguments="jtb:OutputForms">Tax1040Object.OutputForms</mca:CSharpReference>
                    </OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="jtb:OutputForms">
                      <mca:CSharpValue x:TypeArguments="jtb:OutputForms">new OutputForms()</mca:CSharpValue>
                    </InArgument>
                  </Assign.Value>
                </Assign>
                <Assign>
                  <Assign.To>
                    <OutArgument x:TypeArguments="jtb:Tax1040EZPage1">
                      <mca:CSharpReference x:TypeArguments="jtb:Tax1040EZPage1">Tax1040Object.OutputForms.Tax1040EZPage1</mca:CSharpReference>
                    </OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="jtb:Tax1040EZPage1">
                      <mca:CSharpValue x:TypeArguments="jtb:Tax1040EZPage1">new Tax1040EZPage1()</mca:CSharpValue>
                    </InArgument>
                  </Assign.Value>
                </Assign>
              </Sequence>
              <If DisplayName="IfTax1040IncomeCheck">
                <If.Condition>
                  <InArgument x:TypeArguments="x:Boolean">
                    <mca:CSharpValue x:TypeArguments="x:Boolean">Tax1040Object.Income !=null</mca:CSharpValue>
                  </InArgument>
                </If.Condition>
                <If.Then>
                  <Sequence DisplayName="Tax1040IncomeCheck">
                    <Sequence DisplayName="F1040EZLine1 - TotalWages">
                      <Sequence.Variables>
                        <Variable x:TypeArguments="jtb:W2" Name="W2" />
                      </Sequence.Variables>
                      <If DisplayName="TotalWages Calculation">
                        <If.Condition>
                          <InArgument x:TypeArguments="x:Boolean">
                            <mca:CSharpValue x:TypeArguments="x:Boolean">((Tax1040Object.Income.W2Wages != null) &amp;&amp; (Tax1040Object.Income.W2Wages.Count&gt;0))</mca:CSharpValue>
                          </InArgument>
                        </If.Condition>
                        <If.Then>
                          <Sequence DisplayName="W2 Calculation">
                            <Sequence.Variables>
                              <Variable x:TypeArguments="x:Double" Name="TotalWages" />
                              <Variable x:TypeArguments="x:String" Name="WagesPrefix" />
                            </Sequence.Variables>
                            <local:W2WithNoValidation TaxableScholarshipAmount="{x:Null}">
                              <local:W2WithNoValidation.NonQualifiedPlansAmount>
                                <OutArgument x:TypeArguments="x:Double">
                                  <mca:CSharpReference x:TypeArguments="x:Double">NonQualifiedPlansAmount</mca:CSharpReference>
                                </OutArgument>
                              </local:W2WithNoValidation.NonQualifiedPlansAmount>
                              <local:W2WithNoValidation.PrefixTotalWages>
                                <OutArgument x:TypeArguments="x:String">
                                  <mca:CSharpReference x:TypeArguments="x:String">WagesPrefix</mca:CSharpReference>
                                </OutArgument>
                              </local:W2WithNoValidation.PrefixTotalWages>
                              <local:W2WithNoValidation.Tax1040Object>
                                <InOutArgument x:TypeArguments="jtb:Tax1040">
                                  <mca:CSharpReference x:TypeArguments="jtb:Tax1040">Tax1040Object</mca:CSharpReference>
                                </InOutArgument>
                              </local:W2WithNoValidation.Tax1040Object>
                              <local:W2WithNoValidation.TotalWages>
                                <OutArgument x:TypeArguments="x:Double">
                                  <mca:CSharpReference x:TypeArguments="x:Double">TotalWages</mca:CSharpReference>
                                </OutArgument>
                              </local:W2WithNoValidation.TotalWages>
                            </local:W2WithNoValidation>
                            <Assign>
                              <Assign.To>
                                <OutArgument x:TypeArguments="x:Double">
                                  <mca:CSharpReference x:TypeArguments="x:Double">Tax1040Object.OutputForms.Tax1040EZPage1.TotalWages</mca:CSharpReference>
                                </OutArgument>
                              </Assign.To>
                              <Assign.Value>
                                <InArgument x:TypeArguments="x:Double">
                                  <mca:CSharpValue x:TypeArguments="x:Double">TotalWages</mca:CSharpValue>
                                </InArgument>
                              </Assign.Value>
                            </Assign>
                            <Assign>
                              <Assign.To>
                                <OutArgument x:TypeArguments="x:String">
                                  <mca:CSharpReference x:TypeArguments="x:String">Tax1040Object.OutputForms.Tax1040EZPage1.WagesPrefix</mca:CSharpReference>
                                </OutArgument>
                              </Assign.To>
                              <Assign.Value>
                                <InArgument x:TypeArguments="x:String">
                                  <mca:CSharpValue x:TypeArguments="x:String">WagesPrefix</mca:CSharpValue>
                                </InArgument>
                              </Assign.Value>
                            </Assign>
                          </Sequence>
                        </If.Then>
                      </If>
                    </Sequence>
                    <Sequence DisplayName="F1040EZLine2 - TaxableInterest">
                      <Sequence.Variables>
                        <Variable x:TypeArguments="jtb:Form1099INT" Name="Form1099INT" />
                        <Variable x:TypeArguments="x:Double" Name="Totol1099OIDAmount" />
                        <Variable x:TypeArguments="x:Double" Name="Form1099INTTotal" />
                        <Variable x:TypeArguments="x:Double" Name="Form1099OIDTotal" />
                        <Variable x:TypeArguments="x:Double" Name="F1099INTTaxExemptInterest" />
                        <Variable x:TypeArguments="x:Double" Name="F1099OIDTaxExemptInterest" />
                        <Variable x:TypeArguments="x:Double" Name="TotalWages" />
                        <Variable x:TypeArguments="x:String" Default="TEI -" Name="TEIPrefix" />
                      </Sequence.Variables>
                      <If DisplayName="1099 INT Calculation">
                        <If.Condition>
                          <InArgument x:TypeArguments="x:Boolean">
                            <mca:CSharpValue x:TypeArguments="x:Boolean">((Tax1040Object.Income.Form1099INT != null) &amp;&amp; (Tax1040Object.Income.Form1099INT.Count &gt; 0))</mca:CSharpValue>
                          </InArgument>
                        </If.Condition>
                        <If.Then>
                          <Sequence DisplayName="1099-INT">
                            <Sequence.Variables>
                              <Variable x:TypeArguments="x:Double" Name="Total1099INTAmount" />
                            </Sequence.Variables>
                            <local:F1099INTWithNoValidation>
                              <local:F1099INTWithNoValidation.Tax1040Object>
                                <InOutArgument x:TypeArguments="jtb:Tax1040">
                                  <mca:CSharpReference x:TypeArguments="jtb:Tax1040">Tax1040Object</mca:CSharpReference>
                                </InOutArgument>
                              </local:F1099INTWithNoValidation.Tax1040Object>
                              <local:F1099INTWithNoValidation.TotalTaxableInterest>
                                <OutArgument x:TypeArguments="x:Double">
                                  <mca:CSharpReference x:TypeArguments="x:Double">Form1099INTTotal</mca:CSharpReference>
                                </OutArgument>
                              </local:F1099INTWithNoValidation.TotalTaxableInterest>
                              <local:F1099INTWithNoValidation.TotaltaxExemptInterest1099INT>
                                <OutArgument x:TypeArguments="x:Double">
                                  <mca:CSharpReference x:TypeArguments="x:Double">F1099INTTaxExemptInterest</mca:CSharpReference>
                                </OutArgument>
                              </local:F1099INTWithNoValidation.TotaltaxExemptInterest1099INT>
                            </local:F1099INTWithNoValidation>
                          </Sequence>
                        </If.Then>
                      </If>
                      <If DisplayName="1099OID Calculation">
                        <If.Condition>
                          <InArgument x:TypeArguments="x:Boolean">
                            <mca:CSharpValue x:TypeArguments="x:Boolean">((Tax1040Object.Income.Form1099OID != null) &amp;&amp; (Tax1040Object.Income.Form1099OID.Count &gt; 0))</mca:CSharpValue>
                          </InArgument>
                        </If.Condition>
                        <If.Then>
                          <Sequence DisplayName="F1099-OID">
                            <local:F1099OIDWithNoValidation argument1="{x:Null}">
                              <local:F1099OIDWithNoValidation.Tax1040Object>
                                <InOutArgument x:TypeArguments="jtb:Tax1040">
                                  <mca:CSharpReference x:TypeArguments="jtb:Tax1040">Tax1040Object</mca:CSharpReference>
                                </InOutArgument>
                              </local:F1099OIDWithNoValidation.Tax1040Object>
                              <local:F1099OIDWithNoValidation.TotalTaxableInterest>
                                <OutArgument x:TypeArguments="x:Double">
                                  <mca:CSharpReference x:TypeArguments="x:Double">Form1099OIDTotal</mca:CSharpReference>
                                </OutArgument>
                              </local:F1099OIDWithNoValidation.TotalTaxableInterest>
                              <local:F1099OIDWithNoValidation.TotaltaxExemptInterest1099OID>
                                <OutArgument x:TypeArguments="x:Double">
                                  <mca:CSharpReference x:TypeArguments="x:Double">F1099OIDTaxExemptInterest</mca:CSharpReference>
                                </OutArgument>
                              </local:F1099OIDWithNoValidation.TotaltaxExemptInterest1099OID>
                            </local:F1099OIDWithNoValidation>
                          </Sequence>
                        </If.Then>
                      </If>
                      <Assign DisplayName="Total Interest Income">
                        <Assign.To>
                          <OutArgument x:TypeArguments="x:Double">
                            <mca:CSharpReference x:TypeArguments="x:Double">Tax1040Object.OutputForms.Tax1040EZPage1.TaxableInterest</mca:CSharpReference>
                          </OutArgument>
                        </Assign.To>
                        <Assign.Value>
                          <InArgument x:TypeArguments="x:Double">
                            <mca:CSharpValue x:TypeArguments="x:Double">Form1099INTTotal + Form1099OIDTotal</mca:CSharpValue>
                          </InArgument>
                        </Assign.Value>
                      </Assign>
                      <Assign DisplayName="Total Taxable Interest">
                        <Assign.To>
                          <OutArgument x:TypeArguments="x:Double">
                            <mca:CSharpReference x:TypeArguments="x:Double">Tax1040Object.OutputForms.Tax1040EZPage1.TEI</mca:CSharpReference>
                          </OutArgument>
                        </Assign.To>
                        <Assign.Value>
                          <InArgument x:TypeArguments="x:Double">
                            <mca:CSharpValue x:TypeArguments="x:Double">F1099INTTaxExemptInterest + F1099OIDTaxExemptInterest</mca:CSharpValue>
                          </InArgument>
                        </Assign.Value>
                      </Assign>
                      <If DisplayName="If TEI VAlue">
                        <If.Condition>
                          <InArgument x:TypeArguments="x:Boolean">
                            <mca:CSharpValue x:TypeArguments="x:Boolean">Tax1040Object.OutputForms.Tax1040EZPage1.TEI != null &amp;&amp; Tax1040Object.OutputForms.Tax1040EZPage1.TEI &gt; 0</mca:CSharpValue>
                          </InArgument>
                        </If.Condition>
                        <If.Then>
                          <Assign DisplayName=" Taxable Exempt Interest">
                            <Assign.To>
                              <OutArgument x:TypeArguments="x:String">
                                <mca:CSharpReference x:TypeArguments="x:String">Tax1040Object.OutputForms.Tax1040EZPage1.TaxableExemptInterestPrefix</mca:CSharpReference>
                              </OutArgument>
                            </Assign.To>
                            <Assign.Value>
                              <InArgument x:TypeArguments="x:String">
                                <mca:CSharpValue x:TypeArguments="x:String">TEIPrefix + Tax1040Object.OutputForms.Tax1040EZPage1.TEI.ToString()</mca:CSharpValue>
                              </InArgument>
                            </Assign.Value>
                          </Assign>
                        </If.Then>
                        <If.Else>
                          <Assign>
                            <Assign.To>
                              <OutArgument x:TypeArguments="x:String">
                                <mca:CSharpReference x:TypeArguments="x:String">Tax1040Object.OutputForms.Tax1040EZPage1.TaxableExemptInterestPrefix</mca:CSharpReference>
                              </OutArgument>
                            </Assign.To>
                            <Assign.Value>
                              <InArgument x:TypeArguments="x:String">
                                <mca:CSharpValue x:TypeArguments="x:String">string.Empty</mca:CSharpValue>
                              </InArgument>
                            </Assign.Value>
                          </Assign>
                        </If.Else>
                      </If>
                    </Sequence>
                    <Sequence DisplayName="F1040EZLine3 - UnemploymentCompensation">
                      <Sequence.Variables>
                        <Variable x:TypeArguments="jtb:Form1099G" Name="Form1099G" />
                        <Variable x:TypeArguments="x:Double" Name="AlaskaPermanantFundAmount" />
                        <Variable x:TypeArguments="x:Double" Name="UnemploymentAmount" />
                      </Sequence.Variables>
                      <If DisplayName="UnemploymentCompensation Calculation">
                        <If.Condition>
                          <InArgument x:TypeArguments="x:Boolean">
                            <mca:CSharpValue x:TypeArguments="x:Boolean">((Tax1040Object.Income.Form1099G != null) &amp;&amp; (Tax1040Object.Income.Form1099G.Count &gt; 0))</mca:CSharpValue>
                          </InArgument>
                        </If.Condition>
                        <If.Then>
                          <Sequence DisplayName="Unemployment">
                            <Sequence DisplayName="1099G">
                              <Sequence.Variables>
                                <Variable x:TypeArguments="x:Double" Name="TotalUnemploymentCompensationAmount" />
                                <Variable x:TypeArguments="x:Double" Name="TotalRepaid" />
                                <Variable x:TypeArguments="x:String" Default="Repaid $" Name="RepaidPrefix" />
                              </Sequence.Variables>
                              <local:F1099GWithNoValidation>
                                <local:F1099GWithNoValidation.Tax1040Object>
                                  <InOutArgument x:TypeArguments="jtb:Tax1040">
                                    <mca:CSharpReference x:TypeArguments="jtb:Tax1040">Tax1040Object</mca:CSharpReference>
                                  </InOutArgument>
                                </local:F1099GWithNoValidation.Tax1040Object>
                                <local:F1099GWithNoValidation.TotalRepaidForCurrentYear>
                                  <OutArgument x:TypeArguments="x:Double">
                                    <mca:CSharpReference x:TypeArguments="x:Double">TotalRepaid</mca:CSharpReference>
                                  </OutArgument>
                                </local:F1099GWithNoValidation.TotalRepaidForCurrentYear>
                                <local:F1099GWithNoValidation.UnEmployment>
                                  <OutArgument x:TypeArguments="x:Double">
                                    <mca:CSharpReference x:TypeArguments="x:Double">UnemploymentAmount</mca:CSharpReference>
                                  </OutArgument>
                                </local:F1099GWithNoValidation.UnEmployment>
                              </local:F1099GWithNoValidation>
                              <If>
                                <If.Condition>
                                  <InArgument x:TypeArguments="x:Boolean">
                                    <mca:CSharpValue x:TypeArguments="x:Boolean">TotalRepaid!=null&amp;&amp;TotalRepaid&gt;0</mca:CSharpValue>
                                  </InArgument>
                                </If.Condition>
                                <If.Then>
                                  <Assign DisplayName="TotalRepaidAmount">
                                    <Assign.To>
                                      <OutArgument x:TypeArguments="x:String">
                                        <mca:CSharpReference x:TypeArguments="x:String">Tax1040Object.OutputForms.Tax1040EZPage1.TotalRepaidForCurrentYear</mca:CSharpReference>
                                      </OutArgument>
                                    </Assign.To>
                                    <Assign.Value>
                                      <InArgument x:TypeArguments="x:String">
                                        <mca:CSharpValue x:TypeArguments="x:String">RepaidPrefix+TotalRepaid.ToString()</mca:CSharpValue>
                                      </InArgument>
                                    </Assign.Value>
                                  </Assign>
                                </If.Then>
                                <If.Else>
                                  <Assign DisplayName="TotalRepaidAmount">
                                    <Assign.To>
                                      <OutArgument x:TypeArguments="x:String">
                                        <mca:CSharpReference x:TypeArguments="x:String">Tax1040Object.OutputForms.Tax1040EZPage1.TotalRepaidForCurrentYear</mca:CSharpReference>
                                      </OutArgument>
                                    </Assign.To>
                                    <Assign.Value>
                                      <InArgument x:TypeArguments="x:String">
                                        <Literal x:TypeArguments="x:String" Value="" />
                                      </InArgument>
                                    </Assign.Value>
                                  </Assign>
                                </If.Else>
                              </If>
                            </Sequence>
                          </Sequence>
                        </If.Then>
                      </If>
                      <If DisplayName="Alaska Permanent Fund">
                        <If.Condition>
                          <InArgument x:TypeArguments="x:Boolean">
                            <mca:CSharpValue x:TypeArguments="x:Boolean">Tax1040Object.Income.OtherIncome !=null</mca:CSharpValue>
                          </InArgument>
                        </If.Condition>
                        <If.Then>
                          <If DisplayName="If Alaska Check">
                            <If.Condition>
                              <InArgument x:TypeArguments="x:Boolean">
                                <mca:CSharpValue x:TypeArguments="x:Boolean">Tax1040Object.Income.OtherIncome.HasAlaskaPermanantFund.HasValue &amp;&amp; Tax1040Object.Income.OtherIncome.HasAlaskaPermanantFund.Value</mca:CSharpValue>
                              </InArgument>
                            </If.Condition>
                            <If.Then>
                              <Sequence DisplayName="AlaskaPermanantFund">
                                <local:AlaskaWithNoValidation>
                                  <local:AlaskaWithNoValidation.AlaskaPermanentFund>
                                    <OutArgument x:TypeArguments="x:Double">
                                      <mca:CSharpReference x:TypeArguments="x:Double">AlaskaPermanantFundAmount</mca:CSharpReference>
                                    </OutArgument>
                                  </local:AlaskaWithNoValidation.AlaskaPermanentFund>
                                  <local:AlaskaWithNoValidation.Tax1040Object>
                                    <InOutArgument x:TypeArguments="jtb:Tax1040">
                                      <mca:CSharpReference x:TypeArguments="jtb:Tax1040">Tax1040Object</mca:CSharpReference>
                                    </InOutArgument>
                                  </local:AlaskaWithNoValidation.Tax1040Object>
                                </local:AlaskaWithNoValidation>
                              </Sequence>
                            </If.Then>
                          </If>
                        </If.Then>
                      </If>
                      <Assign>
                        <Assign.To>
                          <OutArgument x:TypeArguments="x:Double">
                            <mca:CSharpReference x:TypeArguments="x:Double">Tax1040Object.OutputForms.Tax1040EZPage1.UnemploymentCompensation</mca:CSharpReference>
                          </OutArgument>
                        </Assign.To>
                        <Assign.Value>
                          <InArgument x:TypeArguments="x:Double">
                            <mca:CSharpValue x:TypeArguments="x:Double">UnemploymentAmount + AlaskaPermanantFundAmount</mca:CSharpValue>
                          </InArgument>
                        </Assign.Value>
                      </Assign>
                    </Sequence>
                    <Sequence DisplayName="F1040EZLine4 - AdjustedGrossIncome">
                      <Sequence.Variables>
                        <Variable x:TypeArguments="x:Double" Name="TotalAdjustedGrossIncome" />
                      </Sequence.Variables>
                      <Sequence DisplayName="AdjustedGrossIncome Calculation">
                        <Assign>
                          <Assign.To>
                            <OutArgument x:TypeArguments="x:Double">
                              <mca:CSharpReference x:TypeArguments="x:Double">Tax1040Object.OutputForms.Tax1040EZPage1.AdjustedGrossIncome</mca:CSharpReference>
                            </OutArgument>
                          </Assign.To>
                          <Assign.Value>
                            <InArgument x:TypeArguments="x:Double">
                              <mca:CSharpValue x:TypeArguments="x:Double">Tax1040Object.OutputForms.Tax1040EZPage1.TotalWages + Tax1040Object.OutputForms.Tax1040EZPage1.TaxableInterest + Tax1040Object.OutputForms.Tax1040EZPage1.UnemploymentCompensation</mca:CSharpValue>
                            </InArgument>
                          </Assign.Value>
                        </Assign>
                      </Sequence>
                    </Sequence>
                    <Sequence DisplayName="F1040EZLine5 - Personal Exemptions &amp; Standard Deduction">
                      <Sequence DisplayName="StandardDeduction">
                        <Sequence.Variables>
                          <Variable x:TypeArguments="x:Double" Name="TotalStandardDeduction" />
                        </Sequence.Variables>
                        <local1:F1040EZStandardDeduction>
                          <local1:F1040EZStandardDeduction.Tax1040Object>
                            <InOutArgument x:TypeArguments="jtb:Tax1040">
                              <mca:CSharpReference x:TypeArguments="jtb:Tax1040">Tax1040Object</mca:CSharpReference>
                            </InOutArgument>
                          </local1:F1040EZStandardDeduction.Tax1040Object>
                          <local1:F1040EZStandardDeduction.TotalWorksheetStandardDeduction>
                            <OutArgument x:TypeArguments="x:Double">
                              <mca:CSharpReference x:TypeArguments="x:Double">TotalStandardDeduction</mca:CSharpReference>
                            </OutArgument>
                          </local1:F1040EZStandardDeduction.TotalWorksheetStandardDeduction>
                        </local1:F1040EZStandardDeduction>
                        <Assign>
                          <Assign.To>
                            <OutArgument x:TypeArguments="x:Double">
                              <mca:CSharpReference x:TypeArguments="x:Double">Tax1040Object.OutputForms.Tax1040EZPage1.StandardDeduction</mca:CSharpReference>
                            </OutArgument>
                          </Assign.To>
                          <Assign.Value>
                            <InArgument x:TypeArguments="x:Double">
                              <mca:CSharpValue x:TypeArguments="x:Double">TotalStandardDeduction</mca:CSharpValue>
                            </InArgument>
                          </Assign.Value>
                        </Assign>
                      </Sequence>
                    </Sequence>
                    <Sequence DisplayName="F1040EZLine6 - TaxableIncome">
                      <If DisplayName="TaxableIncome Calculation">
                        <If.Condition>
                          <InArgument x:TypeArguments="x:Boolean">
                            <mca:CSharpValue x:TypeArguments="x:Boolean">Tax1040Object.OutputForms.Tax1040EZPage1.AdjustedGrossIncome &gt; Tax1040Object.OutputForms.Tax1040EZPage1.StandardDeduction</mca:CSharpValue>
                          </InArgument>
                        </If.Condition>
                        <If.Then>
                          <Assign>
                            <Assign.To>
                              <OutArgument x:TypeArguments="x:Double">
                                <mca:CSharpReference x:TypeArguments="x:Double">Tax1040Object.OutputForms.Tax1040EZPage1.TaxableIncome</mca:CSharpReference>
                              </OutArgument>
                            </Assign.To>
                            <Assign.Value>
                              <InArgument x:TypeArguments="x:Double">
                                <mca:CSharpValue x:TypeArguments="x:Double">Tax1040Object.OutputForms.Tax1040EZPage1.AdjustedGrossIncome - Tax1040Object.OutputForms.Tax1040EZPage1.StandardDeduction</mca:CSharpValue>
                              </InArgument>
                            </Assign.Value>
                          </Assign>
                        </If.Then>
                        <If.Else>
                          <Assign>
                            <Assign.To>
                              <OutArgument x:TypeArguments="x:Double">
                                <mca:CSharpReference x:TypeArguments="x:Double">Tax1040Object.OutputForms.Tax1040EZPage1.TaxableIncome</mca:CSharpReference>
                              </OutArgument>
                            </Assign.To>
                            <Assign.Value>
                              <InArgument x:TypeArguments="x:Double">0</InArgument>
                            </Assign.Value>
                          </Assign>
                        </If.Else>
                      </If>
                    </Sequence>
                    <Sequence DisplayName="F1040EZLine7 - FederalTaxWithholdingAmount">
                      <Sequence.Variables>
                        <Variable x:TypeArguments="x:Double" Name="W2FederalTaxWithholdTotal" />
                        <Variable x:TypeArguments="x:Double" Name="Form1099INTFederalTaxWithholdTotal" />
                        <Variable x:TypeArguments="x:Double" Name="Form1099OIDFederalTaxWithholdTotal" />
                        <Variable x:TypeArguments="x:Double" Name="Form1099GFederalTaxWithholdTotal" />
                      </Sequence.Variables>
                      <Sequence DisplayName="FederalTaxWithholding">
                        <Sequence.Variables>
                          <Variable x:TypeArguments="x:Double" Name="FSSBFederalTaxWithHoldingTotal" />
                          <Variable x:TypeArguments="x:Double" Name="FRRBFederalTaxWithHoldingTotal" />
                        </Sequence.Variables>
                        <local2:FW2FederalTaxWithholding>
                          <local2:FW2FederalTaxWithholding.Tax1040Object>
                            <InOutArgument x:TypeArguments="jtb:Tax1040">
                              <mca:CSharpReference x:TypeArguments="jtb:Tax1040">Tax1040Object</mca:CSharpReference>
                            </InOutArgument>
                          </local2:FW2FederalTaxWithholding.Tax1040Object>
                          <local2:FW2FederalTaxWithholding.TotalW2FederalTaxWithhold>
                            <OutArgument x:TypeArguments="x:Double">
                              <mca:CSharpReference x:TypeArguments="x:Double">W2FederalTaxWithholdTotal</mca:CSharpReference>
                            </OutArgument>
                          </local2:FW2FederalTaxWithholding.TotalW2FederalTaxWithhold>
                        </local2:FW2FederalTaxWithholding>
                        <local2:F1099INTFederalTaxWithholding>
                          <local2:F1099INTFederalTaxWithholding.Tax1040Object>
                            <InOutArgument x:TypeArguments="jtb:Tax1040">
                              <mca:CSharpReference x:TypeArguments="jtb:Tax1040">Tax1040Object</mca:CSharpReference>
                            </InOutArgument>
                          </local2:F1099INTFederalTaxWithholding.Tax1040Object>
                          <local2:F1099INTFederalTaxWithholding.Total1099INTFederalTaxWithhold>
                            <OutArgument x:TypeArguments="x:Double">
                              <mca:CSharpReference x:TypeArguments="x:Double">Form1099INTFederalTaxWithholdTotal</mca:CSharpReference>
                            </OutArgument>
                          </local2:F1099INTFederalTaxWithholding.Total1099INTFederalTaxWithhold>
                        </local2:F1099INTFederalTaxWithholding>
                        <local2:F1099OIDFederalTaxWithholding>
                          <local2:F1099OIDFederalTaxWithholding.Tax1040Object>
                            <InOutArgument x:TypeArguments="jtb:Tax1040">
                              <mca:CSharpReference x:TypeArguments="jtb:Tax1040">Tax1040Object</mca:CSharpReference>
                            </InOutArgument>
                          </local2:F1099OIDFederalTaxWithholding.Tax1040Object>
                          <local2:F1099OIDFederalTaxWithholding.Total1099OIDFederalTaxWithhold>
                            <OutArgument x:TypeArguments="x:Double">
                              <mca:CSharpReference x:TypeArguments="x:Double">Form1099OIDFederalTaxWithholdTotal</mca:CSharpReference>
                            </OutArgument>
                          </local2:F1099OIDFederalTaxWithholding.Total1099OIDFederalTaxWithhold>
                        </local2:F1099OIDFederalTaxWithholding>
                        <local2:F1099GFederalWithholding>
                          <local2:F1099GFederalWithholding.Tax1040Object>
                            <InOutArgument x:TypeArguments="jtb:Tax1040">
                              <mca:CSharpReference x:TypeArguments="jtb:Tax1040">Tax1040Object</mca:CSharpReference>
                            </InOutArgument>
                          </local2:F1099GFederalWithholding.Tax1040Object>
                          <local2:F1099GFederalWithholding.Total1099GFederalTaxWithhold>
                            <OutArgument x:TypeArguments="x:Double">
                              <mca:CSharpReference x:TypeArguments="x:Double">Form1099GFederalTaxWithholdTotal</mca:CSharpReference>
                            </OutArgument>
                          </local2:F1099GFederalWithholding.Total1099GFederalTaxWithhold>
                        </local2:F1099GFederalWithholding>
                        <local2:FSSAFederalTaxWithHolding>
                          <local2:FSSAFederalTaxWithHolding.Tax1040Object>
                            <InOutArgument x:TypeArguments="jtb:Tax1040">
                              <mca:CSharpReference x:TypeArguments="jtb:Tax1040">Tax1040Object</mca:CSharpReference>
                            </InOutArgument>
                          </local2:FSSAFederalTaxWithHolding.Tax1040Object>
                          <local2:FSSAFederalTaxWithHolding.TotalSSBWithHolding>
                            <OutArgument x:TypeArguments="x:Double">
                              <mca:CSharpReference x:TypeArguments="x:Double">FSSBFederalTaxWithHoldingTotal</mca:CSharpReference>
                            </OutArgument>
                          </local2:FSSAFederalTaxWithHolding.TotalSSBWithHolding>
                        </local2:FSSAFederalTaxWithHolding>
                        <local2:FRRBFederalTaxWithHolding>
                          <local2:FRRBFederalTaxWithHolding.Tax1040Object>
                            <InOutArgument x:TypeArguments="jtb:Tax1040">
                              <mca:CSharpReference x:TypeArguments="jtb:Tax1040">Tax1040Object</mca:CSharpReference>
                            </InOutArgument>
                          </local2:FRRBFederalTaxWithHolding.Tax1040Object>
                          <local2:FRRBFederalTaxWithHolding.TotalRRBWithHolding>
                            <OutArgument x:TypeArguments="x:Double">
                              <mca:CSharpReference x:TypeArguments="x:Double">FRRBFederalTaxWithHoldingTotal</mca:CSharpReference>
                            </OutArgument>
                          </local2:FRRBFederalTaxWithHolding.TotalRRBWithHolding>
                        </local2:FRRBFederalTaxWithHolding>
                        <Assign>
                          <Assign.To>
                            <OutArgument x:TypeArguments="x:Double">
                              <mca:CSharpReference x:TypeArguments="x:Double">Tax1040Object.OutputForms.Tax1040EZPage1.FederalTaxWithholdingAmount</mca:CSharpReference>
                            </OutArgument>
                          </Assign.To>
                          <Assign.Value>
                            <InArgument x:TypeArguments="x:Double">
                              <mca:CSharpValue x:TypeArguments="x:Double">W2FederalTaxWithholdTotal + Form1099INTFederalTaxWithholdTotal + Form1099OIDFederalTaxWithholdTotal + Form1099GFederalTaxWithholdTotal + FSSBFederalTaxWithHoldingTotal + FRRBFederalTaxWithHoldingTotal</mca:CSharpValue>
                            </InArgument>
                          </Assign.Value>
                        </Assign>
                      </Sequence>
                    </Sequence>
                    <Sequence DisplayName="F1040EZLine8a-EIC">
                      <Sequence.Variables>
                        <Variable x:TypeArguments="x:Double" Name="TotalEarnedIncomeCredit" />
                        <Variable x:TypeArguments="scg:IEnumerable(jtco:ErrorMessage)" Name="listErrorMessage" />
                        <Variable x:TypeArguments="x:Boolean" Default="False" Name="HasEarnedIncomeCredit" />
                      </Sequence.Variables>
                      <local:F1040EZEICEligibilityRuleCheckWithAGI>
                        <local:F1040EZEICEligibilityRuleCheckWithAGI.AdjustedGrossIncome>
                          <InArgument x:TypeArguments="x:Double">
                            <mca:CSharpValue x:TypeArguments="x:Double">Tax1040Object.OutputForms.Tax1040EZPage1.AdjustedGrossIncome</mca:CSharpValue>
                          </InArgument>
                        </local:F1040EZEICEligibilityRuleCheckWithAGI.AdjustedGrossIncome>
                        <local:F1040EZEICEligibilityRuleCheckWithAGI.HasEarnedIncomeCredit>
                          <OutArgument x:TypeArguments="x:Boolean">
                            <mca:CSharpReference x:TypeArguments="x:Boolean">HasEarnedIncomeCredit</mca:CSharpReference>
                          </OutArgument>
                        </local:F1040EZEICEligibilityRuleCheckWithAGI.HasEarnedIncomeCredit>
                        <local:F1040EZEICEligibilityRuleCheckWithAGI.Tax1040Object>
                          <InOutArgument x:TypeArguments="jtb:Tax1040">
                            <mca:CSharpReference x:TypeArguments="jtb:Tax1040">Tax1040Object</mca:CSharpReference>
                          </InOutArgument>
                        </local:F1040EZEICEligibilityRuleCheckWithAGI.Tax1040Object>
                      </local:F1040EZEICEligibilityRuleCheckWithAGI>
                      <If DisplayName="Has Earned Income Credit">
                        <If.Condition>
                          <InArgument x:TypeArguments="x:Boolean">
                            <mca:CSharpValue x:TypeArguments="x:Boolean">HasEarnedIncomeCredit</mca:CSharpValue>
                          </InArgument>
                        </If.Condition>
                        <If.Then>
                          <Sequence DisplayName="EIC">
                            <Sequence.Variables>
                              <Variable x:TypeArguments="x:String" Name="Prefix1040EZLine1" />
                            </Sequence.Variables>
                            <local3:F1040EZEarnedIncomeCreditWithNoValidation EICOut="{x:Null}">
                              <local3:F1040EZEarnedIncomeCreditWithNoValidation.Tax1040Object>
                                <InOutArgument x:TypeArguments="jtb:Tax1040">
                                  <mca:CSharpReference x:TypeArguments="jtb:Tax1040">Tax1040Object</mca:CSharpReference>
                                </InOutArgument>
                              </local3:F1040EZEarnedIncomeCreditWithNoValidation.Tax1040Object>
                              <local3:F1040EZEarnedIncomeCreditWithNoValidation.TotalEIC>
                                <OutArgument x:TypeArguments="x:Double">
                                  <mca:CSharpReference x:TypeArguments="x:Double">TotalEarnedIncomeCredit</mca:CSharpReference>
                                </OutArgument>
                              </local3:F1040EZEarnedIncomeCreditWithNoValidation.TotalEIC>
                            </local3:F1040EZEarnedIncomeCreditWithNoValidation>
                            <Assign>
                              <Assign.To>
                                <OutArgument x:TypeArguments="x:Double">
                                  <mca:CSharpReference x:TypeArguments="x:Double">Tax1040Object.OutputForms.Tax1040EZPage1.EarnedIncomeCredit</mca:CSharpReference>
                                </OutArgument>
                              </Assign.To>
                              <Assign.Value>
                                <InArgument x:TypeArguments="x:Double">
                                  <mca:CSharpValue x:TypeArguments="x:Double">TotalEarnedIncomeCredit</mca:CSharpValue>
                                </InArgument>
                              </Assign.Value>
                            </Assign>
                            <Assign>
                              <Assign.To>
                                <OutArgument x:TypeArguments="x:String">
                                  <mca:CSharpReference x:TypeArguments="x:String">Prefix1040EZLine1</mca:CSharpReference>
                                </OutArgument>
                              </Assign.To>
                              <Assign.Value>
                                <InArgument x:TypeArguments="x:String">
                                  <mca:CSharpValue x:TypeArguments="x:String">Tax1040Object.OutputForms.Tax1040EZPage1.WagesPrefix</mca:CSharpValue>
                                </InArgument>
                              </Assign.Value>
                            </Assign>
                            <If DisplayName="If - NonQualifiedPlansAmount check">
                              <If.Condition>
                                <InArgument x:TypeArguments="x:Boolean">
                                  <mca:CSharpValue x:TypeArguments="x:Boolean">NonQualifiedPlansAmount &gt; 0</mca:CSharpValue>
                                </InArgument>
                              </If.Condition>
                              <If.Then>
                                <If DisplayName="If  Prefix 1040EZLine1 check">
                                  <If.Condition>
                                    <InArgument x:TypeArguments="x:Boolean">
                                      <mca:CSharpValue x:TypeArguments="x:Boolean">Utilities.IsStringEmpty(Prefix1040EZLine1)</mca:CSharpValue>
                                    </InArgument>
                                  </If.Condition>
                                  <If.Then>
                                    <Assign>
                                      <Assign.To>
                                        <OutArgument x:TypeArguments="x:String">
                                          <mca:CSharpReference x:TypeArguments="x:String">Prefix1040EZLine1</mca:CSharpReference>
                                        </OutArgument>
                                      </Assign.To>
                                      <Assign.Value>
                                        <InArgument x:TypeArguments="x:String">
                                          <mca:CSharpValue x:TypeArguments="x:String">"DFC $" + NonQualifiedPlansAmount.ToString()</mca:CSharpValue>
                                        </InArgument>
                                      </Assign.Value>
                                    </Assign>
                                  </If.Then>
                                  <If.Else>
                                    <Assign>
                                      <Assign.To>
                                        <OutArgument x:TypeArguments="x:String">
                                          <mca:CSharpReference x:TypeArguments="x:String">Prefix1040EZLine1</mca:CSharpReference>
                                        </OutArgument>
                                      </Assign.To>
                                      <Assign.Value>
                                        <InArgument x:TypeArguments="x:String">
                                          <mca:CSharpValue x:TypeArguments="x:String">Prefix1040EZLine1 + ",DFC $" + NonQualifiedPlansAmount.ToString()</mca:CSharpValue>
                                        </InArgument>
                                      </Assign.Value>
                                    </Assign>
                                  </If.Else>
                                </If>
                              </If.Then>
                            </If>
                            <If DisplayName="If - PenalInstitutionInmateWages check">
                              <If.Condition>
                                <InArgument x:TypeArguments="x:Boolean">
                                  <mca:CSharpValue x:TypeArguments="x:Boolean">(Tax1040Object.Credits!=null) &amp;&amp; (Tax1040Object.Credits.EIC!=null) &amp;&amp; (Tax1040Object.Credits.EIC.PenalInstitutionInmateWages.HasValue) &amp;&amp;(Tax1040Object.Credits.EIC.PenalInstitutionInmateWages &gt; 0)</mca:CSharpValue>
                                </InArgument>
                              </If.Condition>
                              <If.Then>
                                <If DisplayName="If  Prefix 1040EZLine1 check">
                                  <If.Condition>
                                    <InArgument x:TypeArguments="x:Boolean">
                                      <mca:CSharpValue x:TypeArguments="x:Boolean">Utilities.IsStringEmpty(Prefix1040EZLine1)</mca:CSharpValue>
                                    </InArgument>
                                  </If.Condition>
                                  <If.Then>
                                    <Assign>
                                      <Assign.To>
                                        <OutArgument x:TypeArguments="x:String">
                                          <mca:CSharpReference x:TypeArguments="x:String">Prefix1040EZLine1</mca:CSharpReference>
                                        </OutArgument>
                                      </Assign.To>
                                      <Assign.Value>
                                        <InArgument x:TypeArguments="x:String">
                                          <mca:CSharpValue x:TypeArguments="x:String">"PRI $" + Tax1040Object.Credits.EIC.PenalInstitutionInmateWages.ToString()</mca:CSharpValue>
                                        </InArgument>
                                      </Assign.Value>
                                    </Assign>
                                  </If.Then>
                                  <If.Else>
                                    <Assign>
                                      <Assign.To>
                                        <OutArgument x:TypeArguments="x:String">
                                          <mca:CSharpReference x:TypeArguments="x:String">Prefix1040EZLine1</mca:CSharpReference>
                                        </OutArgument>
                                      </Assign.To>
                                      <Assign.Value>
                                        <InArgument x:TypeArguments="x:String">
                                          <mca:CSharpValue x:TypeArguments="x:String">Prefix1040EZLine1 + ",PRI $" + Tax1040Object.Credits.EIC.PenalInstitutionInmateWages.ToString()</mca:CSharpValue>
                                        </InArgument>
                                      </Assign.Value>
                                    </Assign>
                                  </If.Else>
                                </If>
                              </If.Then>
                            </If>
                            <Assign>
                              <Assign.To>
                                <OutArgument x:TypeArguments="x:String">
                                  <mca:CSharpReference x:TypeArguments="x:String">Tax1040Object.OutputForms.Tax1040EZPage1.WagesPrefix</mca:CSharpReference>
                                </OutArgument>
                              </Assign.To>
                              <Assign.Value>
                                <InArgument x:TypeArguments="x:String">
                                  <mca:CSharpValue x:TypeArguments="x:String">Prefix1040EZLine1</mca:CSharpValue>
                                </InArgument>
                              </Assign.Value>
                            </Assign>
                          </Sequence>
                        </If.Then>
                      </If>
                    </Sequence>
                    <Sequence DisplayName="F1040EZLine8b - NonTaxableCombatPay">
                      <Sequence.Variables>
                        <Variable x:TypeArguments="x:Double" Name="NonTaxableCombatPayElectionTotal" />
                      </Sequence.Variables>
                      <local2:F1040EZNonTaxableCombatPay>
                        <local2:F1040EZNonTaxableCombatPay.Tax1040Object>
                          <InOutArgument x:TypeArguments="jtb:Tax1040">
                            <mca:CSharpReference x:TypeArguments="jtb:Tax1040">Tax1040Object</mca:CSharpReference>
                          </InOutArgument>
                        </local2:F1040EZNonTaxableCombatPay.Tax1040Object>
                        <local2:F1040EZNonTaxableCombatPay.TotalNonTaxableCombatPayElection>
                          <OutArgument x:TypeArguments="x:Double">
                            <mca:CSharpReference x:TypeArguments="x:Double">NonTaxableCombatPayElectionTotal</mca:CSharpReference>
                          </OutArgument>
                        </local2:F1040EZNonTaxableCombatPay.TotalNonTaxableCombatPayElection>
                      </local2:F1040EZNonTaxableCombatPay>
                      <Assign>
                        <Assign.To>
                          <OutArgument x:TypeArguments="x:Double">
                            <mca:CSharpReference x:TypeArguments="x:Double">Tax1040Object.OutputForms.Tax1040EZPage1.NonTaxableCombatPayElection</mca:CSharpReference>
                          </OutArgument>
                        </Assign.To>
                        <Assign.Value>
                          <InArgument x:TypeArguments="x:Double">
                            <mca:CSharpValue x:TypeArguments="x:Double">NonTaxableCombatPayElectionTotal</mca:CSharpValue>
                          </InArgument>
                        </Assign.Value>
                      </Assign>
                    </Sequence>
                    <Sequence DisplayName="F1040EZLine9- TotalPaymentsAndCredits">
                      <If DisplayName="If TaxesAndPenaltiesCheck">
                        <If.Condition>
                          <InArgument x:TypeArguments="x:Boolean">
                            <mca:CSharpValue x:TypeArguments="x:Boolean">Tax1040Object.TaxesAndPenalties != null &amp;&amp; Tax1040Object.TaxesAndPenalties.FederalExtensionAmount != null</mca:CSharpValue>
                          </InArgument>
                        </If.Condition>
                        <If.Then>
                          <Assign>
                            <Assign.To>
                              <OutArgument x:TypeArguments="x:Double">
                                <mca:CSharpReference x:TypeArguments="x:Double">Tax1040Object.OutputForms.Tax1040EZPage1.FederalExtensionAmount</mca:CSharpReference>
                              </OutArgument>
                            </Assign.To>
                            <Assign.Value>
                              <InArgument x:TypeArguments="x:Double">
                                <mca:CSharpValue x:TypeArguments="x:Double">(Tax1040Object.TaxesAndPenalties.FederalExtensionAmount.HasValue ? Tax1040Object.TaxesAndPenalties.FederalExtensionAmount.Value : 0)</mca:CSharpValue>
                              </InArgument>
                            </Assign.Value>
                          </Assign>
                        </If.Then>
                      </If>
                      <Assign>
                        <Assign.To>
                          <OutArgument x:TypeArguments="x:Double">
                            <mca:CSharpReference x:TypeArguments="x:Double">Tax1040Object.OutputForms.Tax1040EZPage1.TotalPaymentsAndCredits</mca:CSharpReference>
                          </OutArgument>
                        </Assign.To>
                        <Assign.Value>
                          <InArgument x:TypeArguments="x:Double">
                            <mca:CSharpValue x:TypeArguments="x:Double">Tax1040Object.OutputForms.Tax1040EZPage1.FederalTaxWithholdingAmount + Tax1040Object.OutputForms.Tax1040EZPage1.EarnedIncomeCredit+ Tax1040Object.OutputForms.Tax1040EZPage1.FederalExtensionAmount</mca:CSharpValue>
                          </InArgument>
                        </Assign.Value>
                      </Assign>
                    </Sequence>
                    <Sequence DisplayName="F1040EZLine10- TaxAmount">
                      <Sequence.Variables>
                        <Variable x:TypeArguments="x:Double" Name="TaxAmountTotal" />
                      </Sequence.Variables>
                      <If DisplayName="If PersonalDetailsCheck">
                        <If.Condition>
                          <InArgument x:TypeArguments="x:Boolean">
                            <mca:CSharpValue x:TypeArguments="x:Boolean">Tax1040Object.PersonalDetails != null &amp;&amp; Tax1040Object.PersonalDetails.PrimaryTaxPayer != null &amp;&amp; Tax1040Object.PersonalDetails.PrimaryTaxPayer.FilingStatus !=null</mca:CSharpValue>
                          </InArgument>
                        </If.Condition>
                        <If.Then>
                          <If DisplayName="If Taxable Check">
                            <If.Condition>
                              <InArgument x:TypeArguments="x:Boolean">
                                <mca:CSharpValue x:TypeArguments="x:Boolean">Tax1040Object.OutputForms != null &amp;&amp; Tax1040Object.OutputForms.Tax1040EZPage1 != null &amp;&amp; Tax1040Object.OutputForms.Tax1040EZPage1.TaxableIncome !=null</mca:CSharpValue>
                              </InArgument>
                            </If.Condition>
                            <If.Then>
                              <Assign>
                                <Assign.To>
                                  <OutArgument x:TypeArguments="x:Double">
                                    <mca:CSharpReference x:TypeArguments="x:Double">Tax1040Object.OutputForms.Tax1040EZPage1.TaxAmount</mca:CSharpReference>
                                  </OutArgument>
                                </Assign.To>
                                <Assign.Value>
                                  <InArgument x:TypeArguments="x:Double">
                                    <mca:CSharpValue x:TypeArguments="x:Double">JTL.Tax1040.Core.Process.TaxRateCalculation.TaxCalculation(Tax1040Object.PersonalDetails.PrimaryTaxPayer.FilingStatus, Tax1040Object.OutputForms.Tax1040EZPage1.TaxableIncome)</mca:CSharpValue>
                                  </InArgument>
                                </Assign.Value>
                              </Assign>
                            </If.Then>
                          </If>
                        </If.Then>
                      </If>
                    </Sequence>
                    <If>
                      <If.Condition>
                        <InArgument x:TypeArguments="x:Boolean">
                          <mca:CSharpValue x:TypeArguments="x:Boolean">Tax1040Object.TaxesAndPenalties != null</mca:CSharpValue>
                        </InArgument>
                      </If.Condition>
                      <If.Then>
                        <Sequence DisplayName="Tax and Penalties">
                          <local3:F1040EZTaxesAndPenalties>
                            <local3:F1040EZTaxesAndPenalties.Tax1040Object>
                              <InOutArgument x:TypeArguments="jtb:Tax1040">
                                <mca:CSharpReference x:TypeArguments="jtb:Tax1040">Tax1040Object</mca:CSharpReference>
                              </InOutArgument>
                            </local3:F1040EZTaxesAndPenalties.Tax1040Object>
                          </local3:F1040EZTaxesAndPenalties>
                          <Assign>
                            <Assign.To>
                              <OutArgument x:TypeArguments="x:Double">
                                <mca:CSharpReference x:TypeArguments="x:Double">Tax1040Object.OutputForms.Tax1040EZPage1.PenaltiesAndInterest</mca:CSharpReference>
                              </OutArgument>
                            </Assign.To>
                            <Assign.Value>
                              <InArgument x:TypeArguments="x:Double">
                                <mca:CSharpValue x:TypeArguments="x:Double">Tax1040Object.TaxesAndPenalties.PenaltiesAndInterest.HasValue ? Tax1040Object.TaxesAndPenalties.PenaltiesAndInterest.Value : 0</mca:CSharpValue>
                              </InArgument>
                            </Assign.Value>
                          </Assign>
                        </Sequence>
                      </If.Then>
                    </If>
                    <Sequence DisplayName="F1040EZLine11- RefundAmount &amp;&amp; F1040EZLine12- TaxOweAmount">
                      <If DisplayName="Refund Calculations">
                        <If.Condition>
                          <InArgument x:TypeArguments="x:Boolean">
                            <mca:CSharpValue x:TypeArguments="x:Boolean">Tax1040Object.OutputForms.Tax1040EZPage1.TotalPaymentsAndCredits &gt; Tax1040Object.OutputForms.Tax1040EZPage1.TaxAmount</mca:CSharpValue>
                          </InArgument>
                        </If.Condition>
                        <If.Then>
                          <Sequence DisplayName="Total Payment">
                            <Assign>
                              <Assign.To>
                                <OutArgument x:TypeArguments="x:Double">
                                  <mca:CSharpReference x:TypeArguments="x:Double">Tax1040Object.OutputForms.Tax1040EZPage1.RefundAmount</mca:CSharpReference>
                                </OutArgument>
                              </Assign.To>
                              <Assign.Value>
                                <InArgument x:TypeArguments="x:Double">
                                  <mca:CSharpValue x:TypeArguments="x:Double">Tax1040Object.OutputForms.Tax1040EZPage1.TotalPaymentsAndCredits - Tax1040Object.OutputForms.Tax1040EZPage1.TaxAmount</mca:CSharpValue>
                                </InArgument>
                              </Assign.Value>
                            </Assign>
                            <Assign DisplayName="">
                              <Assign.To>
                                <OutArgument x:TypeArguments="x:String">
                                  <mca:CSharpReference x:TypeArguments="x:String">Tax1040Object.OutputForms.TaxOweAmountPDF</mca:CSharpReference>
                                </OutArgument>
                              </Assign.To>
                              <Assign.Value>
                                <InArgument x:TypeArguments="x:String">
                                  <mca:CSharpValue x:TypeArguments="x:String">string.Empty</mca:CSharpValue>
                                </InArgument>
                              </Assign.Value>
                            </Assign>
                            <Assign>
                              <Assign.To>
                                <OutArgument x:TypeArguments="x:Double">
                                  <mca:CSharpReference x:TypeArguments="x:Double">Tax1040Object.OutputForms.Tax1040EZPage1.TaxOweAmount</mca:CSharpReference>
                                </OutArgument>
                              </Assign.To>
                              <Assign.Value>
                                <InArgument x:TypeArguments="x:Double">0</InArgument>
                              </Assign.Value>
                            </Assign>
                          </Sequence>
                        </If.Then>
                        <If.Else>
                          <Sequence DisplayName="TotalPaymentsAndCredits">
                            <Assign>
                              <Assign.To>
                                <OutArgument x:TypeArguments="x:Double">
                                  <mca:CSharpReference x:TypeArguments="x:Double">Tax1040Object.OutputForms.Tax1040EZPage1.TaxOweAmount</mca:CSharpReference>
                                </OutArgument>
                              </Assign.To>
                              <Assign.Value>
                                <InArgument x:TypeArguments="x:Double">
                                  <mca:CSharpValue x:TypeArguments="x:Double">Tax1040Object.OutputForms.Tax1040EZPage1.TaxAmount - Tax1040Object.OutputForms.Tax1040EZPage1.TotalPaymentsAndCredits</mca:CSharpValue>
                                </InArgument>
                              </Assign.Value>
                            </Assign>
                            <If>
                              <If.Condition>
                                <InArgument x:TypeArguments="x:Boolean">
                                  <mca:CSharpValue x:TypeArguments="x:Boolean">Tax1040Object.OutputForms.Tax1040EZPage1.TaxOweAmount &gt;0</mca:CSharpValue>
                                </InArgument>
                              </If.Condition>
                              <If.Then>
                                <Assign DisplayName="">
                                  <Assign.To>
                                    <OutArgument x:TypeArguments="x:String">
                                      <mca:CSharpReference x:TypeArguments="x:String">Tax1040Object.OutputForms.TaxOweAmountPDF</mca:CSharpReference>
                                    </OutArgument>
                                  </Assign.To>
                                  <Assign.Value>
                                    <InArgument x:TypeArguments="x:String">
                                      <mca:CSharpValue x:TypeArguments="x:String">"Total Line 12 $" + Math.Round(Tax1040Object.OutputForms.Tax1040EZPage1.TaxOweAmount, MidpointRounding.AwayFromZero).ToString()</mca:CSharpValue>
                                    </InArgument>
                                  </Assign.Value>
                                </Assign>
                              </If.Then>
                              <If.Else>
                                <Assign DisplayName="">
                                  <Assign.To>
                                    <OutArgument x:TypeArguments="x:String">
                                      <mca:CSharpReference x:TypeArguments="x:String">Tax1040Object.OutputForms.TaxOweAmountPDF</mca:CSharpReference>
                                    </OutArgument>
                                  </Assign.To>
                                  <Assign.Value>
                                    <InArgument x:TypeArguments="x:String">
                                      <mca:CSharpValue x:TypeArguments="x:String">string.Empty</mca:CSharpValue>
                                    </InArgument>
                                  </Assign.Value>
                                </Assign>
                              </If.Else>
                            </If>
                            <Assign>
                              <Assign.To>
                                <OutArgument x:TypeArguments="x:Double">
                                  <mca:CSharpReference x:TypeArguments="x:Double">Tax1040Object.OutputForms.Tax1040EZPage1.RefundAmount</mca:CSharpReference>
                                </OutArgument>
                              </Assign.To>
                              <Assign.Value>
                                <InArgument x:TypeArguments="x:Double">0</InArgument>
                              </Assign.Value>
                            </Assign>
                          </Sequence>
                        </If.Else>
                      </If>
                    </Sequence>
                  </Sequence>
                </If.Then>
                <If.Else>
                  <Sequence DisplayName="F1040EZLine5 - Personal Exemptions &amp; Standard Deduction">
                    <Sequence DisplayName="StandardDeduction">
                      <Sequence.Variables>
                        <Variable x:TypeArguments="x:Double" Name="TotalStandardDeduction" />
                      </Sequence.Variables>
                      <local1:F1040EZStandardDeduction>
                        <local1:F1040EZStandardDeduction.Tax1040Object>
                          <InOutArgument x:TypeArguments="jtb:Tax1040">
                            <mca:CSharpReference x:TypeArguments="jtb:Tax1040">Tax1040Object</mca:CSharpReference>
                          </InOutArgument>
                        </local1:F1040EZStandardDeduction.Tax1040Object>
                        <local1:F1040EZStandardDeduction.TotalWorksheetStandardDeduction>
                          <OutArgument x:TypeArguments="x:Double">
                            <mca:CSharpReference x:TypeArguments="x:Double">TotalStandardDeduction</mca:CSharpReference>
                          </OutArgument>
                        </local1:F1040EZStandardDeduction.TotalWorksheetStandardDeduction>
                      </local1:F1040EZStandardDeduction>
                      <Assign>
                        <Assign.To>
                          <OutArgument x:TypeArguments="x:Double">
                            <mca:CSharpReference x:TypeArguments="x:Double">Tax1040Object.OutputForms.Tax1040EZPage1.StandardDeduction</mca:CSharpReference>
                          </OutArgument>
                        </Assign.To>
                        <Assign.Value>
                          <InArgument x:TypeArguments="x:Double">
                            <mca:CSharpValue x:TypeArguments="x:Double">TotalStandardDeduction</mca:CSharpValue>
                          </InArgument>
                        </Assign.Value>
                      </Assign>
                    </Sequence>
                  </Sequence>
                </If.Else>
              </If>
            </Sequence>
            <Sequence DisplayName="Validations">
              <Sequence DisplayName="CheckTaxableIncomeEligibility">
                <Sequence.Variables>
                  <Variable x:TypeArguments="x:Double" Name="TaxableIncomeEligibilityAmount">
                    <Variable.Default>
                      <mca:CSharpValue x:TypeArguments="x:Double">Constants.TAXABLE_INCOME_ELIGIBILITY_AMOUNT</mca:CSharpValue>
                    </Variable.Default>
                  </Variable>
                </Sequence.Variables>
                <If>
                  <If.Condition>
                    <InArgument x:TypeArguments="x:Boolean">
                      <mca:CSharpValue x:TypeArguments="x:Boolean">IsTaxableIncomeExceedCheck == true</mca:CSharpValue>
                    </InArgument>
                  </If.Condition>
                  <If.Then>
                    <If DisplayName="CheckTaxableIncomeEligibility">
                      <If.Condition>
                        <InArgument x:TypeArguments="x:Boolean">
                          <mca:CSharpValue x:TypeArguments="x:Boolean">Tax1040Object.OutputForms.Tax1040EZPage1.TaxableIncome &gt; TaxableIncomeEligibilityAmount</mca:CSharpValue>
                        </InArgument>
                      </If.Condition>
                      <If.Then>
                        <Sequence DisplayName="AddEligibilityErrorMessage">
                          <Assign>
                            <Assign.To>
                              <OutArgument x:TypeArguments="jtco:ErrorMessage">
                                <mca:CSharpReference x:TypeArguments="jtco:ErrorMessage">ErrorMessage</mca:CSharpReference>
                              </OutArgument>
                            </Assign.To>
                            <Assign.Value>
                              <InArgument x:TypeArguments="jtco:ErrorMessage">
                                <mca:CSharpValue x:TypeArguments="jtco:ErrorMessage">ErrorMessages[Constants.TAX_AND_WRAP_UP_TAXABLE_INCOME]</mca:CSharpValue>
                              </InArgument>
                            </Assign.Value>
                          </Assign>
                          <AddToCollection x:TypeArguments="jtco:ErrorMessage" DisplayName="AddToCollection&lt;ErrorMessage&gt;">
                            <AddToCollection.Item>
                              <InArgument x:TypeArguments="jtco:ErrorMessage">
                                <mca:CSharpValue x:TypeArguments="jtco:ErrorMessage">ErrorMessage</mca:CSharpValue>
                              </InArgument>
                            </AddToCollection.Item>
                            <InArgument x:TypeArguments="scg:ICollection(jtco:ErrorMessage)">
                              <mca:CSharpValue x:TypeArguments="scg:ICollection(jtco:ErrorMessage)">ErrorMessageList</mca:CSharpValue>
                            </InArgument>
                          </AddToCollection>
                        </Sequence>
                      </If.Then>
                    </If>
                  </If.Then>
                </If>
              </Sequence>
              <If DisplayName="If IsRefundAvailableCheck">
                <If.Condition>
                  <InArgument x:TypeArguments="x:Boolean">
                    <mca:CSharpValue x:TypeArguments="x:Boolean">IsRefundAvailableCheck == true</mca:CSharpValue>
                  </InArgument>
                </If.Condition>
                <If.Then>
                  <If DisplayName="CheckRefundOption">
                    <If.Condition>
                      <InArgument x:TypeArguments="x:Boolean">
                        <mca:CSharpValue x:TypeArguments="x:Boolean">Tax1040Object.OutputForms.Tax1040EZPage1.RefundAmount &gt; Constants.intZero &amp;&amp; (Tax1040Object.TaxesAndPenalties == null || Tax1040Object.TaxesAndPenalties.HasToDepositTaxRefundsToBankAccount == null)</mca:CSharpValue>
                      </InArgument>
                    </If.Condition>
                    <If.Then>
                      <Sequence DisplayName="AddEligibilityErrorMessage">
                        <Assign>
                          <Assign.To>
                            <OutArgument x:TypeArguments="jtco:ErrorMessage">
                              <mca:CSharpReference x:TypeArguments="jtco:ErrorMessage">ErrorMessage</mca:CSharpReference>
                            </OutArgument>
                          </Assign.To>
                          <Assign.Value>
                            <InArgument x:TypeArguments="jtco:ErrorMessage">
                              <mca:CSharpValue x:TypeArguments="jtco:ErrorMessage">ErrorMessages[Constants.TAX_AND_WRAP_UP_REQUIRED_REFUND_DETAIL]</mca:CSharpValue>
                            </InArgument>
                          </Assign.Value>
                        </Assign>
                        <AddToCollection x:TypeArguments="jtco:ErrorMessage" DisplayName="AddToCollection&lt;ErrorMessage&gt;">
                          <AddToCollection.Item>
                            <InArgument x:TypeArguments="jtco:ErrorMessage">
                              <mca:CSharpValue x:TypeArguments="jtco:ErrorMessage">ErrorMessage</mca:CSharpValue>
                            </InArgument>
                          </AddToCollection.Item>
                          <InArgument x:TypeArguments="scg:ICollection(jtco:ErrorMessage)">
                            <mca:CSharpValue x:TypeArguments="scg:ICollection(jtco:ErrorMessage)">ErrorMessageList</mca:CSharpValue>
                          </InArgument>
                        </AddToCollection>
                      </Sequence>
                    </If.Then>
                  </If>
                </If.Then>
              </If>
              <If DisplayName="If IsIncomeAndRefundAllZeros">
                <If.Condition>
                  <InArgument x:TypeArguments="x:Boolean">
                    <mca:CSharpValue x:TypeArguments="x:Boolean">IsIncomeAndRefundAllZeros == true</mca:CSharpValue>
                  </InArgument>
                </If.Condition>
                <If.Then>
                  <If DisplayName="CheckIncomeAndRefundAllZeros">
                    <If.Condition>
                      <InArgument x:TypeArguments="x:Boolean">
                        <mca:CSharpValue x:TypeArguments="x:Boolean">Tax1040Object.OutputForms.Tax1040EZPage1.AdjustedGrossIncome &lt;= Constants.intZero &amp;&amp; Tax1040Object.OutputForms.Tax1040EZPage1.TotalPaymentsAndCredits &lt;= Constants.intZero &amp;&amp; Tax1040Object.OutputForms.Tax1040EZPage1.TaxAmount &lt;= Constants.intZero &amp;&amp; Tax1040Object.OutputForms.Tax1040EZPage1.RefundAmount &lt;= Constants.intZero</mca:CSharpValue>
                      </InArgument>
                    </If.Condition>
                    <If.Then>
                      <Sequence DisplayName="AddEligibilityErrorMessage">
                        <Assign>
                          <Assign.To>
                            <OutArgument x:TypeArguments="jtco:ErrorMessage">
                              <mca:CSharpReference x:TypeArguments="jtco:ErrorMessage">ErrorMessage</mca:CSharpReference>
                            </OutArgument>
                          </Assign.To>
                          <Assign.Value>
                            <InArgument x:TypeArguments="jtco:ErrorMessage">
                              <mca:CSharpValue x:TypeArguments="jtco:ErrorMessage">ErrorMessages[Constants.TAX_AND_WRAP_UP_MISSING_INCOME]</mca:CSharpValue>
                            </InArgument>
                          </Assign.Value>
                        </Assign>
                        <AddToCollection x:TypeArguments="jtco:ErrorMessage" DisplayName="AddToCollection&lt;ErrorMessage&gt;">
                          <AddToCollection.Item>
                            <InArgument x:TypeArguments="jtco:ErrorMessage">
                              <mca:CSharpValue x:TypeArguments="jtco:ErrorMessage">ErrorMessage</mca:CSharpValue>
                            </InArgument>
                          </AddToCollection.Item>
                          <InArgument x:TypeArguments="scg:ICollection(jtco:ErrorMessage)">
                            <mca:CSharpValue x:TypeArguments="scg:ICollection(jtco:ErrorMessage)">ErrorMessageList</mca:CSharpValue>
                          </InArgument>
                        </AddToCollection>
                      </Sequence>
                    </If.Then>
                  </If>
                </If.Then>
              </If>
              <If DisplayName="If IsSSBAndRRBCheck">
                <If.Condition>
                  <InArgument x:TypeArguments="x:Boolean">
                    <mca:CSharpValue x:TypeArguments="x:Boolean">IsSSBAndRRBCheck==true</mca:CSharpValue>
                  </InArgument>
                </If.Condition>
                <If.Then>
                  <local:Form1040EZSSBEligibilityWithNoValidation>
                    <local:Form1040EZSSBEligibilityWithNoValidation.ErrorMessages>
                      <InArgument x:TypeArguments="jtco:ErrorMessages">
                        <mca:CSharpValue x:TypeArguments="jtco:ErrorMessages">ErrorMessages</mca:CSharpValue>
                      </InArgument>
                    </local:Form1040EZSSBEligibilityWithNoValidation.ErrorMessages>
                    <local:Form1040EZSSBEligibilityWithNoValidation.Tax1040Object>
                      <InOutArgument x:TypeArguments="jtb:Tax1040">
                        <mca:CSharpReference x:TypeArguments="jtb:Tax1040">Tax1040Object</mca:CSharpReference>
                      </InOutArgument>
                    </local:Form1040EZSSBEligibilityWithNoValidation.Tax1040Object>
                  </local:Form1040EZSSBEligibilityWithNoValidation>
                </If.Then>
              </If>
            </Sequence>
          </Sequence>
        </If.Then>
      </If>
      <sads:DebugSymbol.Symbol>9xAiXkCPu7v+2gJpMn/YSkDioAFFOlxUYXgxMDQwRVpcVGF4MTA0MExhdGVzdFxKZWV2YW4xMDQwXEZlYXR1cmVcQ29kZVxKVEwuVGF4MTA0MC5CdXNpbmVzc0xvZ2ljXFdvcmtGbG93XEFjdGl2aXRpZXNcQ2FsY3VsYXRpb25XaXRoTm9WYWxpZGF0aW9uXEZlZGVyYWxTdW1tYXJ5V2l0aE5vVmFsaWRhdGlvbi54YW1soQIBpwMBrQMBBQGhAgGnAgEEAekCAe8CAQMB3QEB4wEBAkYD0gkOAgEBTQtNdwIBAlEF0AkKAgENVAtUXgIBDlgJzgkUAgEZWQuvCBYDAaYCsAgLzQkWAgEaWg1zGAMBixF0Da4IEgMBpwKxCA3jCBgDAcwB5AgNjQkSAwGFAY4JDbcJEgIBPrgJDcwJEgIBG1sPZhgDAaMRZw9yGAMBjBF3E3dtAwGoAnsRiwgcAwHnAo4IEawIHAMBswK1CBW1CH4DAc0BuQgP4ggUAwHZAecIE+cIcAMBhgHrCBGLCRYDAZEBkQkTkQlzAgE/lQkRtQkWAgFKuwkTuwloAgEcvwkRyglCAgEnYxVjawMBrxFeFV57AwGkEW8Vb3EDAZgRahVqjQEDAY0RfBO9AR4DAYkQvgETvwIeAwG2DcACE7gDHgMBzgu5AxPLAx4DAbMLzAMT6gMeAwH/CusDE40EHgMBzgqOBBPvBB4DAdcI8AQTnQYeAwHiBZ4GE7oGHgMBrwW7BhPdBh4DAfQE3gYTgAceAwHABIEHE54HGAMBkASfBxOKCB4DAegCjwgTqwgeAwG0ArwIFbwIdgMB2gHACBPgCBgDAeYB7ggX7gimAgMBkgHyCBWJCSADAZ0BmAkXmAm9AwIBS5wJFbMJIAIBVscJF8cJbQIBM8IJF8IJbAIBKIABFbwBGgMBihDHAUTHAUsDAbcNyQEV5wEaAwG3D+gBFYMCGgMB6A6EAhWPAh4DAcEOkAIVmwIeAwGaDpwCFb4CGgMBuA3GAhWLAxoDAagMjAMVqwMaAwHsC6wDFbcDHgMBzwu9AxXKAyADAbQLzQMV6QMgAwGAC+wDFYwEGgMBzwqVBBXuBCADAdgI9ARF9ARMAwHjBfYEFYYFQwMBrAiHBRWcBhoDAeQFogYVrQY5AwHJBa4GFbkGHgMBsAW8BhXQBhoDAYwF0QYV3AYeAwH1BOIGFf8GGgMBwQSEBxmEB38DAZEEiAcXnAciAwGcBKAHFYkIGgMB6QKTCBWeCDcDAc4CnwgVqggeAwG1AsMIGcMIsgEDAecBxwgX3ggiAwHzAfMIF/4IIAMBtQH/CBeICSkDAZ4BnQkXqAkgAgFuqQkXsgkpAgFXgwEbgwG3AQMBixCHARm6ASQDAZcQzAEbzAHBAQMBuA/QARnlASQDAcsP6wEb6wHBAQMB6Q7vARmBAiQDAfwOjAIbjAJ8AwHVDocCG4cCmQEDAcIOmAIbmAKOAQMBrg6TAhuTAo0BAwGbDp8CG58CzQEDAbkNowIZrgIiAwHzDbECGbwCIgMBzA3JAhvJAr0BAwGpDM0CGYkDJAMBtwyPAxuPA4EBAwHtC5MDGakDHgMB+wu0Axu0A4cBAwHeC68DG68DogEDAdALvgMXyQMgAwG1C9EDF9wDOQMBmgvdAxfoAyADAYEL7wMb7wPWAQMB0ArzAxn+AyIDAegKgQQZigQiAwHbCpoEF6UEOQMBqwqmBBexBD4DAYgKsgQXvQQ+AwHlCb4EF8kEOQMBwgnKBBfVBDoDAZ8J1gQX4QQ6AwH8COIEF+0EIAMB2QiDBRuDBXEDAckI/gQb/gR3AwG7CPkEG/kElQEDAa0IigUbigVvAwHlBY4FGZoGJAMB8wWlBhulBnEDAdYFqgYbqgaBAQMBygW2Bhu2BnkDAb0FsQYbsQalAQMBsQW/Bhu/BssBAwGNBcMGGc4GIgMBmAXZBhvZBpwCAwGBBdQGG9QGoQEDAfYE5QYb5QaNAgMBwgTpBhn9Bh4DAc4EiQcZjwc7AwG0BJAHGZsHIgMBnQSjBxujB9IBAwHqAqcHGcoHJAMB1APNBxmHCCQDAfUClggblghxAwHbApsIG5sIdwMBzwKnCBunCG8DAcICoggbogibAQMBtgLICBnTCCIDAY0C1AgZ3QgrAwH0AfsIHfsIowEDAcEB9ggd9gh4AwG2AYYJG4YJgwEDAaoBggkdgglwAwGfAaUJHaUJmwECAXqgCR2gCXgCAW+wCRuwCYMBAgFjrAkdrAlwAgFYjAEboQE2AwHSEKIBG60BJAMBtRCuARu5ASQDAZgQ1AEb5AE8AwHMD/ABG4ACPAMB/Q6rAh+rAqABAwGHDqYCH6YCqQEDAfQNuQIfuQJpAwHgDbQCH7QCqQEDAc0NzgIbiAMmAwG4DJYDH5YD5wEDAfwLmgMdpwMoAwGKDMYDHcYDjQIDAcILwQMdwQOfAQMBtgvUAx3UA3MDAacL2QMd2QN5AwGbC+UDHeUDcQMBjgvgAx3gA50BAwGCC/sDH/sD1gEDAfQK9gMf9gObAQMB6QqIBESIBEUDAecKhAQfhASbAQMB3AqdBB2dBHMDAb0KogQdogR8AwGsCqkEHakEcwMBmgquBB2uBIUBAwGJCrUEHbUEcwMB9wm6BB26BIUBAwHmCcYEHcYEgwEDAdQJwQQdwQRzAwHDCc0EHc0EcwMBsQnSBB3SBIEBAwGgCd4EHd4EgQEDAY4J2QQd2QRzAwH9COoEHeoEowIDAesI5QQd5QSnAQMB2giSBRudBU4DAY0IngUbqQUkAwHuB6oFG7UFJAMBzwe2BRvhBSADAfEG4gUbjQYgAwGTBo4GG5kGJAMB9AXLBh/LBuEBAwGkBcYGH8YGpAEDAZkF7AYf7AaEAgMBzwTwBh37BiYDAdsEjAcfjAd1AwG1BJgHH5gH2wEDAakEkwcfkweiAQMBngSoBxuzByQDAfkDtAcbvwckAwHiA8AHG8kHJAMB1QPOBxvZByQDAb0D2gcb/AcgAwGDA/0HG4YIJAMB9gLQCB/QCJ0BAwGaAssIH8sIegMBjgLbCB3bCIUBAwGBAtcIH9cIcgMB9QGZASGZAXcDAf0QngEhngFxAwHvEJQBIZQBcgMB4RCPASGPAX4DAdMQqgEhqgFpAwHEEKUBIaUBmgEDAbYQtgEhtgFqAwGnELEBIbEBmwEDAZkQ1wEh1wF3AwH1D+EBIeEBgAEDAeEP3AEh3AF3AwHND/0BIf0BgAEDAaQP8wEh8wF3AwGRD/gBIfgBdwMB/g7SAkzSAlYDAbkM1AId5AI8AwGCDeUCHYcDIgMBugybAx+mAz4DAYsMlQUhlQV3AwGdCJoFIZoFfgMBjgimBSGmBXYDAf4HoQUhoQWiAQMB7weyBSGyBZMBAwHfB60FIa0FeAMB0Ae5BSG5BX4DAfIGvQUf3wUkAwGBB+UFIeUFvwIDAZQG6QUfiwYkAwGjBpYGIZYGcAMBhAaRBiGRBpsBAwH1BfgGI/gGjwIDAegE8wYj8wabAQMB3ASwByGwB9QBAwGFBKsHIasHnAEDAfoDvAchvAdrAwHuA7cHIbcHkAEDAeMDxwdGxwdHAwHhA8MHIcMHnAEDAdYD1gch1gfUAQMByQPRByHRB5wBAwG+A90HId0HmwEDAYQD4Qcf7AcoAwGmA+8HH/oHKAMBjwOECEaECEcDAYIDgAghgAicAQMB9wLXAiPXAnkDAaUN4QIj4QJ7AwGUDdwCI9wCdAMBgw3oAiPoAo0BAwG7DOwCIfcCKgMB3wz6AiGFAyoDAcwMowMlowN7AwGaDJ4DJZ4DhAEDAYwMwAUlwAWOAQMBggfEBSPPBSwDAbAH0gUj3QUsAwGRB+wFJewFjgEDAaQG8AUj+wUsAwHSBv4FI4kGLAMBswbpByXpB+IBAwGyA+QHJeQHlAEDAacD9wcl9wdvAwGbA/IHJfIHlAEDAZAD9AIn9AKIAQMB8QzvAifvAq8BAwHgDIIDJ4IDVgMB3gz9Aif9Aq8BAwHNDMwFKcwFkwEDAcAHxwUpxwWAAQMBsQfaBSnaBagBAwGhB9UFKdUFgAEDAZIH+AUp+AWxAQMB4gbzBSnzBYABAwHTBoYGKYYGxgEDAcMGgQYpgQaAAQMBtAY=</sads:DebugSymbol.Symbol>
    </Sequence>
  </local:FederalSummaryWithNoValidation.Implementation>
</local:FederalSummaryWithNoValidation>