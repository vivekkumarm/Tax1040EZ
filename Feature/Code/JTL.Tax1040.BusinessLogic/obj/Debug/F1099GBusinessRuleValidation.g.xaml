<?xml version="1.0" encoding="utf-8"?>
<twa:F1099GBusinessValidationRule xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:jtb="clr-namespace:JTL.Tax1040.BusinessObject;assembly=JTL.Tax1040.BusinessObject" xmlns:jtco="clr-namespace:JTL.Tax1040.Core.Object;assembly=JTL.Tax1040.Core.Object" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:mca="clr-namespace:Microsoft.CSharp.Activities;assembly=System.Activities" xmlns:sads="http://schemas.microsoft.com/netfx/2010/xaml/activities/debugger" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib" xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=mscorlib" xmlns:twa="clr-namespace:Tax1040WorkFlow.WorkFlow.Activities;assembly=JTL.Tax1040.BusinessLogic" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <TextExpression.NamespacesForImplementation>
    <sco:Collection x:TypeArguments="x:String">
      <x:String>System</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Text</x:String>
      <x:String>JTL.Tax1040.BusinessObject</x:String>
      <x:String>JTL.Tax1040.Core.Object</x:String>
    </sco:Collection>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <sco:Collection x:TypeArguments="AssemblyReference">
      <AssemblyReference>Microsoft.Activities.Extensions</AssemblyReference>
      <AssemblyReference>Microsoft.CSharp</AssemblyReference>
      <AssemblyReference>Newtonsoft.Json</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>System.Configuration</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>System.ServiceModel.Activities</AssemblyReference>
      <AssemblyReference>System.Web</AssemblyReference>
      <AssemblyReference>System.Workflow.Activities</AssemblyReference>
      <AssemblyReference>System.Workflow.ComponentModel</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>JTL.Tax1040.Core.Object</AssemblyReference>
      <AssemblyReference>JTL.Tax1040.Core.Process</AssemblyReference>
      <AssemblyReference>JTL.Tax1040.DataAccess</AssemblyReference>
      <AssemblyReference>JTL.Tax1040.BusinessObject</AssemblyReference>
      <AssemblyReference>JTL.Tax1040.PDFBinding</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>JTL.Tax1040.BusinessLogic</AssemblyReference>
    </sco:Collection>
  </TextExpression.ReferencesForImplementation>
  <twa:F1099GBusinessValidationRule.Implementation>
    <Sequence DisplayName="1099GBusinessValidationRule">
      <Sequence.Variables>
        <Variable x:TypeArguments="jtco:ErrorMessage" Name="ErrorMessage" />
        <Variable x:TypeArguments="scg:List(jtco:ErrorMessage)" Name="ErrorMessageList">
          <Variable.Default>
            <mca:CSharpValue x:TypeArguments="scg:List(jtco:ErrorMessage)">Tax1040Object.ErrorMessages</mca:CSharpValue>
          </Variable.Default>
        </Variable>
        <Variable x:TypeArguments="jtb:Form1099G" Name="F1099G" />
      </Sequence.Variables>
      <Sequence DisplayName="1099GBusinessRuleCheck">
        <If DisplayName="If Tax1040ObjectCheck">
          <If.Condition>
            <InArgument x:TypeArguments="x:Boolean">
              <mca:CSharpValue x:TypeArguments="x:Boolean">((Tax1040Object != null) &amp;&amp; (Tax1040Object.Income != null))</mca:CSharpValue>
            </InArgument>
          </If.Condition>
          <If.Then>
            <If DisplayName="If F1099G">
              <If.Condition>
                <InArgument x:TypeArguments="x:Boolean">
                  <mca:CSharpValue x:TypeArguments="x:Boolean">((Tax1040Object.Income.Form1099G != null) &amp;&amp; (Tax1040Object.Income.Form1099G.Any()))</mca:CSharpValue>
                </InArgument>
              </If.Condition>
              <If.Then>
                <ForEach x:TypeArguments="jtb:Form1099G" DisplayName="ForEach&lt;F1099G&gt;">
                  <ForEach.Values>
                    <InArgument x:TypeArguments="scg:IEnumerable(jtb:Form1099G)">
                      <mca:CSharpValue x:TypeArguments="scg:IEnumerable(jtb:Form1099G)">Tax1040Object.Income.Form1099G</mca:CSharpValue>
                    </InArgument>
                  </ForEach.Values>
                  <ActivityAction x:TypeArguments="jtb:Form1099G">
                    <ActivityAction.Argument>
                      <DelegateInArgument x:TypeArguments="jtb:Form1099G" Name="F1099G" />
                    </ActivityAction.Argument>
                    <Sequence DisplayName="1099 G ">
                      <Sequence DisplayName="Box4-FederalTaxWithHoldingAmount">
                        <If DisplayName="If FederalTaxWithholdingAmount Check">
                          <If.Condition>
                            <InArgument x:TypeArguments="x:Boolean">
                              <mca:CSharpValue x:TypeArguments="x:Boolean" xml:space="preserve">(F1099G.UnEmploymentCompensation.HasValue &amp;&amp;
(F1099G.FederalTaxWithHoldingAmount.HasValue ? F1099G.FederalTaxWithHoldingAmount.Value : 0) &gt;
(F1099G.UnEmploymentCompensation.HasValue ? F1099G.UnEmploymentCompensation.Value : 0))</mca:CSharpValue>
                            </InArgument>
                          </If.Condition>
                          <If.Then>
                            <Sequence DisplayName="Error Message">
                              <Assign>
                                <Assign.To>
                                  <OutArgument x:TypeArguments="jtco:ErrorMessage">
                                    <mca:CSharpReference x:TypeArguments="jtco:ErrorMessage">ErrorMessage</mca:CSharpReference>
                                  </OutArgument>
                                </Assign.To>
                                <Assign.Value>
                                  <InArgument x:TypeArguments="jtco:ErrorMessage">
                                    <mca:CSharpValue x:TypeArguments="jtco:ErrorMessage">ErrorMessages[Constants.F1099G_FEDERAL_WITHHOLDING]</mca:CSharpValue>
                                  </InArgument>
                                </Assign.Value>
                              </Assign>
                              <Assign DisplayName="F1099GID">
                                <Assign.To>
                                  <OutArgument x:TypeArguments="x:Int64">
                                    <mca:CSharpReference x:TypeArguments="x:Int64">ErrorMessage.FormId</mca:CSharpReference>
                                  </OutArgument>
                                </Assign.To>
                                <Assign.Value>
                                  <InArgument x:TypeArguments="x:Int64">
                                    <mca:CSharpValue x:TypeArguments="x:Int64">F1099G.Form1099GId</mca:CSharpValue>
                                  </InArgument>
                                </Assign.Value>
                              </Assign>
                              <AddToCollection x:TypeArguments="jtco:ErrorMessage" DisplayName="AddToCollection&lt;ErrorMessage&gt;">
                                <AddToCollection.Item>
                                  <InArgument x:TypeArguments="jtco:ErrorMessage">
                                    <mca:CSharpValue x:TypeArguments="jtco:ErrorMessage">ErrorMessage</mca:CSharpValue>
                                  </InArgument>
                                </AddToCollection.Item>
                                <InArgument x:TypeArguments="scg:ICollection(jtco:ErrorMessage)">
                                  <mca:CSharpValue x:TypeArguments="scg:ICollection(jtco:ErrorMessage)">ErrorMessageList</mca:CSharpValue>
                                </InArgument>
                              </AddToCollection>
                            </Sequence>
                          </If.Then>
                        </If>
                      </Sequence>
                      <Sequence DisplayName="Box11-StateTaxWithholdingAmount">
                        <Sequence.Variables>
                          <Variable x:TypeArguments="jtb:Form1099StateInformation" Name="FormStateInfo" />
                          <Variable x:TypeArguments="x:Double" Name="TotalStateWithHeldAmount" />
                        </Sequence.Variables>
                        <If DisplayName="If StateWithholdingCheck">
                          <If.Condition>
                            <InArgument x:TypeArguments="x:Boolean">
                              <mca:CSharpValue x:TypeArguments="x:Boolean">((F1099G.Form1099StateInfo != null) &amp;&amp; (F1099G.Form1099StateInfo.Any()))</mca:CSharpValue>
                            </InArgument>
                          </If.Condition>
                          <If.Then>
                            <Sequence DisplayName="F1099G StateWithholding">
                              <ForEach x:TypeArguments="jtb:Form1099StateInformation" DisplayName="ForEach&lt;Form1099StateInformation&gt;">
                                <ForEach.Values>
                                  <InArgument x:TypeArguments="scg:IEnumerable(jtb:Form1099StateInformation)">
                                    <mca:CSharpValue x:TypeArguments="scg:IEnumerable(jtb:Form1099StateInformation)">F1099G.Form1099StateInfo</mca:CSharpValue>
                                  </InArgument>
                                </ForEach.Values>
                                <ActivityAction x:TypeArguments="jtb:Form1099StateInformation">
                                  <ActivityAction.Argument>
                                    <DelegateInArgument x:TypeArguments="jtb:Form1099StateInformation" Name="FormStateInfo" />
                                  </ActivityAction.Argument>
                                  <Assign>
                                    <Assign.To>
                                      <OutArgument x:TypeArguments="x:Double">
                                        <mca:CSharpReference x:TypeArguments="x:Double">TotalStateWithHeldAmount</mca:CSharpReference>
                                      </OutArgument>
                                    </Assign.To>
                                    <Assign.Value>
                                      <InArgument x:TypeArguments="x:Double">
                                        <mca:CSharpValue x:TypeArguments="x:Double">(FormStateInfo.StateTaxWithholdingAmount.HasValue?FormStateInfo.StateTaxWithholdingAmount.Value : 0) + TotalStateWithHeldAmount</mca:CSharpValue>
                                      </InArgument>
                                    </Assign.Value>
                                  </Assign>
                                </ActivityAction>
                              </ForEach>
                              <If DisplayName="If TotalStateWithholdAmount">
                                <If.Condition>
                                  <InArgument x:TypeArguments="x:Boolean">
                                    <mca:CSharpValue x:TypeArguments="x:Boolean" xml:space="preserve">(F1099G.UnEmploymentCompensation.HasValue &amp;&amp;
TotalStateWithHeldAmount &gt; (F1099G.UnEmploymentCompensation.HasValue ? F1099G.UnEmploymentCompensation.Value : 0))</mca:CSharpValue>
                                  </InArgument>
                                </If.Condition>
                                <If.Then>
                                  <Sequence DisplayName="Error Message">
                                    <Assign>
                                      <Assign.To>
                                        <OutArgument x:TypeArguments="jtco:ErrorMessage">
                                          <mca:CSharpReference x:TypeArguments="jtco:ErrorMessage">ErrorMessage</mca:CSharpReference>
                                        </OutArgument>
                                      </Assign.To>
                                      <Assign.Value>
                                        <InArgument x:TypeArguments="jtco:ErrorMessage">
                                          <mca:CSharpValue x:TypeArguments="jtco:ErrorMessage">ErrorMessages[Constants.F1099G_STATE_WITHHOLDING]</mca:CSharpValue>
                                        </InArgument>
                                      </Assign.Value>
                                    </Assign>
                                    <Assign DisplayName="F1099GID">
                                      <Assign.To>
                                        <OutArgument x:TypeArguments="x:Int64">
                                          <mca:CSharpReference x:TypeArguments="x:Int64">ErrorMessage.FormId</mca:CSharpReference>
                                        </OutArgument>
                                      </Assign.To>
                                      <Assign.Value>
                                        <InArgument x:TypeArguments="x:Int64">
                                          <mca:CSharpValue x:TypeArguments="x:Int64">F1099G.Form1099GId</mca:CSharpValue>
                                        </InArgument>
                                      </Assign.Value>
                                    </Assign>
                                    <AddToCollection x:TypeArguments="jtco:ErrorMessage" DisplayName="AddToCollection&lt;ErrorMessage&gt;">
                                      <AddToCollection.Item>
                                        <InArgument x:TypeArguments="jtco:ErrorMessage">
                                          <mca:CSharpValue x:TypeArguments="jtco:ErrorMessage">ErrorMessage</mca:CSharpValue>
                                        </InArgument>
                                      </AddToCollection.Item>
                                      <InArgument x:TypeArguments="scg:ICollection(jtco:ErrorMessage)">
                                        <mca:CSharpValue x:TypeArguments="scg:ICollection(jtco:ErrorMessage)">ErrorMessageList</mca:CSharpValue>
                                      </InArgument>
                                    </AddToCollection>
                                  </Sequence>
                                </If.Then>
                              </If>
                            </Sequence>
                          </If.Then>
                        </If>
                      </Sequence>
                      <Sequence DisplayName="Prior year compensation repaid - Eligibility Check">
                        <Sequence.Variables>
                          <Variable x:TypeArguments="jtb:Form1099StateInformation" Name="FormStateInfo" />
                          <Variable x:TypeArguments="x:Double" Name="TotalStateWithHeldAmount" />
                        </Sequence.Variables>
                        <If DisplayName="Prior year Unemployment compensation Eligibility check">
                          <If.Condition>
                            <InArgument x:TypeArguments="x:Boolean">
                              <mca:CSharpValue x:TypeArguments="x:Boolean">((F1099G.IsPriorYearUnEmploymentRepaid.HasValue ? F1099G.IsPriorYearUnEmploymentRepaid.Value : false) &amp;&amp; (F1099G.PriorYearUnEmploymentRepaid.HasValue ? F1099G.PriorYearUnEmploymentRepaid.Value : 0) &gt; 0)</mca:CSharpValue>
                            </InArgument>
                          </If.Condition>
                          <If.Then>
                            <Sequence DisplayName="F1099G Prior year unemployment repaid">
                              <Sequence DisplayName="Error Message">
                                <Assign>
                                  <Assign.To>
                                    <OutArgument x:TypeArguments="jtco:ErrorMessage">
                                      <mca:CSharpReference x:TypeArguments="jtco:ErrorMessage">ErrorMessage</mca:CSharpReference>
                                    </OutArgument>
                                  </Assign.To>
                                  <Assign.Value>
                                    <InArgument x:TypeArguments="jtco:ErrorMessage">
                                      <mca:CSharpValue x:TypeArguments="jtco:ErrorMessage">ErrorMessages[Constants.F1099G__REPAID_AMOUNT_FOR_EARLIER_YEAR]</mca:CSharpValue>
                                    </InArgument>
                                  </Assign.Value>
                                </Assign>
                                <Assign DisplayName="F1099GID">
                                  <Assign.To>
                                    <OutArgument x:TypeArguments="x:Int64">
                                      <mca:CSharpReference x:TypeArguments="x:Int64">ErrorMessage.FormId</mca:CSharpReference>
                                    </OutArgument>
                                  </Assign.To>
                                  <Assign.Value>
                                    <InArgument x:TypeArguments="x:Int64">
                                      <mca:CSharpValue x:TypeArguments="x:Int64">F1099G.Form1099GId</mca:CSharpValue>
                                    </InArgument>
                                  </Assign.Value>
                                </Assign>
                                <AddToCollection x:TypeArguments="jtco:ErrorMessage" DisplayName="AddToCollection&lt;ErrorMessage&gt;">
                                  <AddToCollection.Item>
                                    <InArgument x:TypeArguments="jtco:ErrorMessage">
                                      <mca:CSharpValue x:TypeArguments="jtco:ErrorMessage">ErrorMessage</mca:CSharpValue>
                                    </InArgument>
                                  </AddToCollection.Item>
                                  <InArgument x:TypeArguments="scg:ICollection(jtco:ErrorMessage)">
                                    <mca:CSharpValue x:TypeArguments="scg:ICollection(jtco:ErrorMessage)">ErrorMessageList</mca:CSharpValue>
                                  </InArgument>
                                </AddToCollection>
                              </Sequence>
                            </Sequence>
                          </If.Then>
                        </If>
                      </Sequence>
                      <Assign>
                        <Assign.To>
                          <OutArgument x:TypeArguments="scg:List(jtco:ErrorMessage)">
                            <mca:CSharpReference x:TypeArguments="scg:List(jtco:ErrorMessage)">Tax1040Object.ErrorMessages</mca:CSharpReference>
                          </OutArgument>
                        </Assign.To>
                        <Assign.Value>
                          <InArgument x:TypeArguments="scg:List(jtco:ErrorMessage)">
                            <mca:CSharpValue x:TypeArguments="scg:List(jtco:ErrorMessage)">ErrorMessageList</mca:CSharpValue>
                          </InArgument>
                        </Assign.Value>
                      </Assign>
                    </Sequence>
                  </ActivityAction>
                </ForEach>
              </If.Then>
            </If>
          </If.Then>
        </If>
      </Sequence>
      <sads:DebugSymbol.Symbol>9xA58lDcYiqsC+GpwpXQyfxIggFFOlxUYXgxMDQwRVpcVGF4MTA0MExhdGVzdFxKZWV2YW4xMDQwXEZlYXR1cmVcQ29kZVxKVEwuVGF4MTA0MC5CdXNpbmVzc0xvZ2ljXFdvcmtGbG93XEFjdGl2aXRpZXNcRjEwOTlHQnVzaW5lc3NSdWxlVmFsaWRhdGlvbi54YW1sPTsDsQIOAgEBQAtAdwIBAkUFrwIQAgEIRgeuAgwCAQlJDUmPAQIBCk0LrAIQAgEQUBFQrAECARFUD6oCGQIBF1cVV4cBAwGUAl4TqAIeAgEYXxWPASADAd0BkAEV5gEgAgFu5wEVmwIgAgEonAIVpwIeAgEZYBeOARwDAd4BlQEX5QEcAgFv7AEXmgIcAgEppAIbpAJ8AgEhnwIbnwKPAQIBGmMdZWoDAd8BaRuMASYDAeYBmAEdmAGsAQIBcJwBG+MBJgIBee8BHe8BsQICASrzARuYAiYCATNqHXUmAwGFAnYdgQEmAwH2AYIBHYsBLwMB5wGdAR20AScDAb4BtQEd4gEiAgF69AEdlwIoAgE0ciNynQEDAY0CbSNtfgMBhgJ+I35yAwH+AXkjeXsDAfcBiQEhiQGJAQMB7wGFASOFAXYDAegBoAEjoAGeAQMB1AGnASGyASoDAb8BuAEjuQGIAQIBe70BIeABLAMBhAH1AR+AAigCAVuBAh+MAigCAUiNAh+WAjECATWvASevAeQBAwHKAaoBJ6oBhQEDAcABvgEjyQEsAwGrAcoBI9UBLAMBmAHWASPfATUDAYUB/QEl/QGrAQIBZfgBJfgBgAECAVyJAiWJAnQCAVKEAiWEAn0CAUmUAiOUAosBAgE/kAIlkAJ4AgE2xgEpxgGhAQMBtQHBASnBAYQBAwGsAdIBKdIBeAMBogHNASnNAYEBAwGZAd0BJ90BjwEDAY8B2QEp2QF8AwGGAQ==</sads:DebugSymbol.Symbol>
    </Sequence>
  </twa:F1099GBusinessValidationRule.Implementation>
</twa:F1099GBusinessValidationRule>