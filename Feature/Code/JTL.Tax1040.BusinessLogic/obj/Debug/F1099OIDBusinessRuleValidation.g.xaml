<?xml version="1.0" encoding="utf-8"?>
<twa:F1099OIDBusinessValidation xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:jtb="clr-namespace:JTL.Tax1040.BusinessObject;assembly=JTL.Tax1040.BusinessObject" xmlns:jtco="clr-namespace:JTL.Tax1040.Core.Object;assembly=JTL.Tax1040.Core.Object" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:mca="clr-namespace:Microsoft.CSharp.Activities;assembly=System.Activities" xmlns:sads="http://schemas.microsoft.com/netfx/2010/xaml/activities/debugger" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib" xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=mscorlib" xmlns:twa="clr-namespace:Tax1040WorkFlow.WorkFlow.Activities;assembly=JTL.Tax1040.BusinessLogic" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <TextExpression.NamespacesForImplementation>
    <sco:Collection x:TypeArguments="x:String">
      <x:String>System</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Text</x:String>
      <x:String>JTL.Tax1040.BusinessObject</x:String>
      <x:String>JTL.Tax1040.Core.Object</x:String>
    </sco:Collection>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <sco:Collection x:TypeArguments="AssemblyReference">
      <AssemblyReference>Microsoft.Activities.Extensions</AssemblyReference>
      <AssemblyReference>Microsoft.CSharp</AssemblyReference>
      <AssemblyReference>Newtonsoft.Json</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>System.Configuration</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>System.ServiceModel.Activities</AssemblyReference>
      <AssemblyReference>System.Web</AssemblyReference>
      <AssemblyReference>System.Workflow.Activities</AssemblyReference>
      <AssemblyReference>System.Workflow.ComponentModel</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>JTL.Tax1040.Core.Object</AssemblyReference>
      <AssemblyReference>JTL.Tax1040.Core.Process</AssemblyReference>
      <AssemblyReference>JTL.Tax1040.DataAccess</AssemblyReference>
      <AssemblyReference>JTL.Tax1040.BusinessObject</AssemblyReference>
      <AssemblyReference>JTL.TAX1040.PaymentLibrary</AssemblyReference>
      <AssemblyReference>JTL.Tax1040.PDFBinding</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>JTL.Tax1040.BusinessLogic</AssemblyReference>
    </sco:Collection>
  </TextExpression.ReferencesForImplementation>
  <twa:F1099OIDBusinessValidation.Implementation>
    <Sequence DisplayName="F1099OIDBusinessValidation">
      <Sequence.Variables>
        <Variable x:TypeArguments="jtb:Form1099OID" Name="Form1099OID" />
        <Variable x:TypeArguments="jtco:ErrorMessage" Name="ErrorMessage" />
        <Variable x:TypeArguments="scg:List(jtco:ErrorMessage)" Name="ErrorMessageList">
          <Variable.Default>
            <mca:CSharpValue x:TypeArguments="scg:List(jtco:ErrorMessage)">Tax1040Object.ErrorMessages</mca:CSharpValue>
          </Variable.Default>
        </Variable>
        <Variable x:TypeArguments="x:Int32" Default="-1" Name="DynamicControlIDForBR3" />
      </Sequence.Variables>
      <If DisplayName="If Tax1040ObjectCheck">
        <If.Condition>
          <InArgument x:TypeArguments="x:Boolean">
            <mca:CSharpValue x:TypeArguments="x:Boolean">((Tax1040Object != null) &amp;&amp; (Tax1040Object.Income != null))</mca:CSharpValue>
          </InArgument>
        </If.Condition>
        <If.Then>
          <If DisplayName="If Form1099OID">
            <If.Condition>
              <InArgument x:TypeArguments="x:Boolean">
                <mca:CSharpValue x:TypeArguments="x:Boolean">((Tax1040Object.Income.Form1099OID != null) &amp;&amp; (Tax1040Object.Income.Form1099OID.Any()))</mca:CSharpValue>
              </InArgument>
            </If.Condition>
            <If.Then>
              <ForEach x:TypeArguments="jtb:Form1099OID" DisplayName="ForEach&lt;Form1099OID&gt;">
                <ForEach.Values>
                  <InArgument x:TypeArguments="scg:IEnumerable(jtb:Form1099OID)">
                    <mca:CSharpValue x:TypeArguments="scg:IEnumerable(jtb:Form1099OID)">Tax1040Object.Income.Form1099OID</mca:CSharpValue>
                  </InArgument>
                </ForEach.Values>
                <ActivityAction x:TypeArguments="jtb:Form1099OID">
                  <ActivityAction.Argument>
                    <DelegateInArgument x:TypeArguments="jtb:Form1099OID" Name="Form1099OID" />
                  </ActivityAction.Argument>
                  <Sequence DisplayName="From1099OID Iteration">
                    <Sequence DisplayName="Box 3 Early withdrawal Penalty">
                      <If DisplayName="If Early Withdrawal Penalty">
                        <If.Condition>
                          <InArgument x:TypeArguments="x:Boolean">
                            <mca:CSharpValue x:TypeArguments="x:Boolean">Form1099OID.EarlyWithdrawalPenalty.HasValue &amp;&amp; Form1099OID.EarlyWithdrawalPenalty.Value &gt; 0</mca:CSharpValue>
                          </InArgument>
                        </If.Condition>
                        <If.Then>
                          <Sequence DisplayName="Error Message">
                            <Assign DisplayName="Error Message">
                              <Assign.To>
                                <OutArgument x:TypeArguments="jtco:ErrorMessage">
                                  <mca:CSharpReference x:TypeArguments="jtco:ErrorMessage">ErrorMessage</mca:CSharpReference>
                                </OutArgument>
                              </Assign.To>
                              <Assign.Value>
                                <InArgument x:TypeArguments="jtco:ErrorMessage">
                                  <mca:CSharpValue x:TypeArguments="jtco:ErrorMessage">ErrorMessages[Constants.OID__EARLY_WITHDRAWAL_PENALTY_BR]</mca:CSharpValue>
                                </InArgument>
                              </Assign.Value>
                            </Assign>
                            <Assign DisplayName="F1099OIDId">
                              <Assign.To>
                                <OutArgument x:TypeArguments="x:Int64">
                                  <mca:CSharpReference x:TypeArguments="x:Int64">ErrorMessage.FormId</mca:CSharpReference>
                                </OutArgument>
                              </Assign.To>
                              <Assign.Value>
                                <InArgument x:TypeArguments="x:Int64">
                                  <mca:CSharpValue x:TypeArguments="x:Int64">Form1099OID.Form1099OIDId</mca:CSharpValue>
                                </InArgument>
                              </Assign.Value>
                            </Assign>
                            <AddToCollection x:TypeArguments="jtco:ErrorMessage" DisplayName="AddToCollection&lt;ErrorMessage&gt;">
                              <AddToCollection.Item>
                                <InArgument x:TypeArguments="jtco:ErrorMessage">
                                  <mca:CSharpValue x:TypeArguments="jtco:ErrorMessage">ErrorMessage</mca:CSharpValue>
                                </InArgument>
                              </AddToCollection.Item>
                              <InArgument x:TypeArguments="scg:ICollection(jtco:ErrorMessage)">
                                <mca:CSharpValue x:TypeArguments="scg:ICollection(jtco:ErrorMessage)">ErrorMessageList</mca:CSharpValue>
                              </InArgument>
                            </AddToCollection>
                          </Sequence>
                        </If.Then>
                      </If>
                    </Sequence>
                    <If DisplayName="Box 4 - Federal withholding">
                      <If.Condition>
                        <InArgument x:TypeArguments="x:Boolean">
                          <mca:CSharpValue x:TypeArguments="x:Boolean">Form1099OID.FederalTaxWithHoldingAmount.HasValue &amp;&amp; Form1099OID.FederalTaxWithHoldingAmount.Value &gt; ((Form1099OID.OriginalIssueDiscount.HasValue ? Form1099OID.OriginalIssueDiscount.Value:0) + (Form1099OID.OtherPeriodicInterest.HasValue ? Form1099OID.OtherPeriodicInterest.Value:0) + (Form1099OID.USTreasuryObligations.HasValue ? Form1099OID.USTreasuryObligations.Value:0))</mca:CSharpValue>
                        </InArgument>
                      </If.Condition>
                      <If.Then>
                        <Sequence DisplayName="Error Message">
                          <Assign DisplayName="Error Message">
                            <Assign.To>
                              <OutArgument x:TypeArguments="jtco:ErrorMessage">
                                <mca:CSharpReference x:TypeArguments="jtco:ErrorMessage">ErrorMessage</mca:CSharpReference>
                              </OutArgument>
                            </Assign.To>
                            <Assign.Value>
                              <InArgument x:TypeArguments="jtco:ErrorMessage">
                                <mca:CSharpValue x:TypeArguments="jtco:ErrorMessage">ErrorMessages[Constants.OID_FEDERAL_WITHHOLDING_BR]</mca:CSharpValue>
                              </InArgument>
                            </Assign.Value>
                          </Assign>
                          <Assign DisplayName="F1099OIDId">
                            <Assign.To>
                              <OutArgument x:TypeArguments="x:Int64">
                                <mca:CSharpReference x:TypeArguments="x:Int64">ErrorMessage.FormId</mca:CSharpReference>
                              </OutArgument>
                            </Assign.To>
                            <Assign.Value>
                              <InArgument x:TypeArguments="x:Int64">
                                <mca:CSharpValue x:TypeArguments="x:Int64">Form1099OID.Form1099OIDId</mca:CSharpValue>
                              </InArgument>
                            </Assign.Value>
                          </Assign>
                          <AddToCollection x:TypeArguments="jtco:ErrorMessage" DisplayName="AddToCollection&lt;ErrorMessage&gt;">
                            <AddToCollection.Item>
                              <InArgument x:TypeArguments="jtco:ErrorMessage">
                                <mca:CSharpValue x:TypeArguments="jtco:ErrorMessage">ErrorMessage</mca:CSharpValue>
                              </InArgument>
                            </AddToCollection.Item>
                            <InArgument x:TypeArguments="scg:ICollection(jtco:ErrorMessage)">
                              <mca:CSharpValue x:TypeArguments="scg:ICollection(jtco:ErrorMessage)">ErrorMessageList</mca:CSharpValue>
                            </InArgument>
                          </AddToCollection>
                        </Sequence>
                      </If.Then>
                    </If>
                    <If DisplayName="Box 5 - Foreign Tax Withheld">
                      <If.Condition>
                        <InArgument x:TypeArguments="x:Boolean">
                          <mca:CSharpValue x:TypeArguments="x:Boolean">Form1099OID.ForeignTaxPaid.HasValue &amp;&amp; Form1099OID.ForeignTaxPaid.Value &gt; 0</mca:CSharpValue>
                        </InArgument>
                      </If.Condition>
                      <If.Then>
                        <Sequence DisplayName="Error Message">
                          <Assign>
                            <Assign.To>
                              <OutArgument x:TypeArguments="jtco:ErrorMessage">
                                <mca:CSharpReference x:TypeArguments="jtco:ErrorMessage">ErrorMessage</mca:CSharpReference>
                              </OutArgument>
                            </Assign.To>
                            <Assign.Value>
                              <InArgument x:TypeArguments="jtco:ErrorMessage">
                                <mca:CSharpValue x:TypeArguments="jtco:ErrorMessage">ErrorMessages[Constants.OID_FOREIGN_TAX_WITHHELD_BR]</mca:CSharpValue>
                              </InArgument>
                            </Assign.Value>
                          </Assign>
                          <Assign DisplayName="F1099OIDId">
                            <Assign.To>
                              <OutArgument x:TypeArguments="x:Int64">
                                <mca:CSharpReference x:TypeArguments="x:Int64">ErrorMessage.FormId</mca:CSharpReference>
                              </OutArgument>
                            </Assign.To>
                            <Assign.Value>
                              <InArgument x:TypeArguments="x:Int64">
                                <mca:CSharpValue x:TypeArguments="x:Int64">Form1099OID.Form1099OIDId</mca:CSharpValue>
                              </InArgument>
                            </Assign.Value>
                          </Assign>
                          <AddToCollection x:TypeArguments="jtco:ErrorMessage" DisplayName="AddToCollection&lt;ErrorMessage&gt;">
                            <AddToCollection.Item>
                              <InArgument x:TypeArguments="jtco:ErrorMessage">
                                <mca:CSharpValue x:TypeArguments="jtco:ErrorMessage">ErrorMessage</mca:CSharpValue>
                              </InArgument>
                            </AddToCollection.Item>
                            <InArgument x:TypeArguments="scg:ICollection(jtco:ErrorMessage)">
                              <mca:CSharpValue x:TypeArguments="scg:ICollection(jtco:ErrorMessage)">ErrorMessageList</mca:CSharpValue>
                            </InArgument>
                          </AddToCollection>
                        </Sequence>
                      </If.Then>
                    </If>
                    <If DisplayName="Box 9 - Investment expenses">
                      <If.Condition>
                        <InArgument x:TypeArguments="x:Boolean">
                          <mca:CSharpValue x:TypeArguments="x:Boolean">Form1099OID.InvestmentExpenses.HasValue &amp;&amp; Form1099OID.InvestmentExpenses.Value &gt; 0</mca:CSharpValue>
                        </InArgument>
                      </If.Condition>
                      <If.Then>
                        <Sequence DisplayName="Error Message">
                          <Assign>
                            <Assign.To>
                              <OutArgument x:TypeArguments="jtco:ErrorMessage">
                                <mca:CSharpReference x:TypeArguments="jtco:ErrorMessage">ErrorMessage</mca:CSharpReference>
                              </OutArgument>
                            </Assign.To>
                            <Assign.Value>
                              <InArgument x:TypeArguments="jtco:ErrorMessage">
                                <mca:CSharpValue x:TypeArguments="jtco:ErrorMessage">ErrorMessages[Constants.OID_INVESTMENT_EXPENSES_BR]</mca:CSharpValue>
                              </InArgument>
                            </Assign.Value>
                          </Assign>
                          <Assign DisplayName="F1099OIDId">
                            <Assign.To>
                              <OutArgument x:TypeArguments="x:Int64">
                                <mca:CSharpReference x:TypeArguments="x:Int64">ErrorMessage.FormId</mca:CSharpReference>
                              </OutArgument>
                            </Assign.To>
                            <Assign.Value>
                              <InArgument x:TypeArguments="x:Int64">
                                <mca:CSharpValue x:TypeArguments="x:Int64">Form1099OID.Form1099OIDId</mca:CSharpValue>
                              </InArgument>
                            </Assign.Value>
                          </Assign>
                          <AddToCollection x:TypeArguments="jtco:ErrorMessage" DisplayName="AddToCollection&lt;ErrorMessage&gt;">
                            <AddToCollection.Item>
                              <InArgument x:TypeArguments="jtco:ErrorMessage">
                                <mca:CSharpValue x:TypeArguments="jtco:ErrorMessage">ErrorMessage</mca:CSharpValue>
                              </InArgument>
                            </AddToCollection.Item>
                            <InArgument x:TypeArguments="scg:ICollection(jtco:ErrorMessage)">
                              <mca:CSharpValue x:TypeArguments="scg:ICollection(jtco:ErrorMessage)">ErrorMessageList</mca:CSharpValue>
                            </InArgument>
                          </AddToCollection>
                        </Sequence>
                      </If.Then>
                    </If>
                    <Sequence DisplayName="Box 13 - Total State Tax withheld for all states">
                      <Sequence.Variables>
                        <Variable x:TypeArguments="x:Double" Default="0" Name="StateTaxWithholdingAmountTotal" />
                      </Sequence.Variables>
                      <If DisplayName="If F1099StateInfoCheck">
                        <If.Condition>
                          <InArgument x:TypeArguments="x:Boolean">
                            <mca:CSharpValue x:TypeArguments="x:Boolean">((Form1099OID.Form1099StateInfo != null) &amp;&amp; (Form1099OID.Form1099StateInfo.Any()))</mca:CSharpValue>
                          </InArgument>
                        </If.Condition>
                        <If.Then>
                          <Sequence DisplayName="Form1099OIDStateInfo">
                            <Sequence.Variables>
                              <Variable x:TypeArguments="x:Int32" Default="0" Name="StateTaxLoopIndex" />
                              <Variable x:TypeArguments="jtb:Form1099StateInformation" Name="Form1099StateInfo" />
                            </Sequence.Variables>
                            <ForEach x:TypeArguments="jtb:Form1099StateInformation" DisplayName="ForEach&lt;Form1099StateInformation&gt;">
                              <ForEach.Values>
                                <InArgument x:TypeArguments="scg:IEnumerable(jtb:Form1099StateInformation)">
                                  <mca:CSharpValue x:TypeArguments="scg:IEnumerable(jtb:Form1099StateInformation)">Form1099OID.Form1099StateInfo</mca:CSharpValue>
                                </InArgument>
                              </ForEach.Values>
                              <ActivityAction x:TypeArguments="jtb:Form1099StateInformation">
                                <ActivityAction.Argument>
                                  <DelegateInArgument x:TypeArguments="jtb:Form1099StateInformation" Name="Form1099StateInfo" />
                                </ActivityAction.Argument>
                                <Sequence>
                                  <Assign>
                                    <Assign.To>
                                      <OutArgument x:TypeArguments="x:Double">
                                        <mca:CSharpReference x:TypeArguments="x:Double">StateTaxWithholdingAmountTotal</mca:CSharpReference>
                                      </OutArgument>
                                    </Assign.To>
                                    <Assign.Value>
                                      <InArgument x:TypeArguments="x:Double">
                                        <mca:CSharpValue x:TypeArguments="x:Double">(Form1099StateInfo.StateTaxWithholdingAmount.HasValue ? Form1099StateInfo.StateTaxWithholdingAmount.Value:0) + StateTaxWithholdingAmountTotal</mca:CSharpValue>
                                      </InArgument>
                                    </Assign.Value>
                                  </Assign>
                                  <If>
                                    <If.Condition>
                                      <InArgument x:TypeArguments="x:Boolean">
                                        <mca:CSharpValue x:TypeArguments="x:Boolean">DynamicControlIDForBR3 == -1 &amp;&amp; Form1099StateInfo.StateTaxWithholdingAmount.HasValue</mca:CSharpValue>
                                      </InArgument>
                                    </If.Condition>
                                    <If.Then>
                                      <Assign>
                                        <Assign.To>
                                          <OutArgument x:TypeArguments="x:Int32">
                                            <mca:CSharpReference x:TypeArguments="x:Int32">DynamicControlIDForBR3</mca:CSharpReference>
                                          </OutArgument>
                                        </Assign.To>
                                        <Assign.Value>
                                          <InArgument x:TypeArguments="x:Int32">
                                            <mca:CSharpValue x:TypeArguments="x:Int32">StateTaxLoopIndex</mca:CSharpValue>
                                          </InArgument>
                                        </Assign.Value>
                                      </Assign>
                                    </If.Then>
                                  </If>
                                  <Assign>
                                    <Assign.To>
                                      <OutArgument x:TypeArguments="x:Int32">
                                        <mca:CSharpReference x:TypeArguments="x:Int32">StateTaxLoopIndex</mca:CSharpReference>
                                      </OutArgument>
                                    </Assign.To>
                                    <Assign.Value>
                                      <InArgument x:TypeArguments="x:Int32">
                                        <mca:CSharpValue x:TypeArguments="x:Int32">StateTaxLoopIndex + 1</mca:CSharpValue>
                                      </InArgument>
                                    </Assign.Value>
                                  </Assign>
                                </Sequence>
                              </ActivityAction>
                            </ForEach>
                            <If DisplayName="IfStateTaxwithhold ">
                              <If.Condition>
                                <InArgument x:TypeArguments="x:Boolean">
                                  <mca:CSharpValue x:TypeArguments="x:Boolean">StateTaxWithholdingAmountTotal &gt; ((Form1099OID.OriginalIssueDiscount.HasValue?Form1099OID.OriginalIssueDiscount.Value:0) + (Form1099OID.OtherPeriodicInterest.HasValue?Form1099OID.OtherPeriodicInterest.Value:0) + (Form1099OID.USTreasuryObligations.HasValue?Form1099OID.USTreasuryObligations.Value:0))</mca:CSharpValue>
                                </InArgument>
                              </If.Condition>
                              <If.Then>
                                <Sequence DisplayName="Error Message">
                                  <Assign>
                                    <Assign.To>
                                      <OutArgument x:TypeArguments="jtco:ErrorMessage">
                                        <mca:CSharpReference x:TypeArguments="jtco:ErrorMessage">ErrorMessage</mca:CSharpReference>
                                      </OutArgument>
                                    </Assign.To>
                                    <Assign.Value>
                                      <InArgument x:TypeArguments="jtco:ErrorMessage">
                                        <mca:CSharpValue x:TypeArguments="jtco:ErrorMessage">ErrorMessages[Constants.OID_STATE_TAX_WITHHELD_BR]</mca:CSharpValue>
                                      </InArgument>
                                    </Assign.Value>
                                  </Assign>
                                  <Assign>
                                    <Assign.To>
                                      <OutArgument x:TypeArguments="x:String">
                                        <mca:CSharpReference x:TypeArguments="x:String">ErrorMessage.FieldName</mca:CSharpReference>
                                      </OutArgument>
                                    </Assign.To>
                                    <Assign.Value>
                                      <InArgument x:TypeArguments="x:String">
                                        <mca:CSharpValue x:TypeArguments="x:String">ErrorMessage.FieldName + DynamicControlIDForBR3.ToString()</mca:CSharpValue>
                                      </InArgument>
                                    </Assign.Value>
                                  </Assign>
                                  <Assign DisplayName="F1099OIDId">
                                    <Assign.To>
                                      <OutArgument x:TypeArguments="x:Int64">
                                        <mca:CSharpReference x:TypeArguments="x:Int64">ErrorMessage.FormId</mca:CSharpReference>
                                      </OutArgument>
                                    </Assign.To>
                                    <Assign.Value>
                                      <InArgument x:TypeArguments="x:Int64">
                                        <mca:CSharpValue x:TypeArguments="x:Int64">Form1099OID.Form1099OIDId</mca:CSharpValue>
                                      </InArgument>
                                    </Assign.Value>
                                  </Assign>
                                  <AddToCollection x:TypeArguments="jtco:ErrorMessage" DisplayName="AddToCollection&lt;ErrorMessage&gt;">
                                    <AddToCollection.Item>
                                      <InArgument x:TypeArguments="jtco:ErrorMessage">
                                        <mca:CSharpValue x:TypeArguments="jtco:ErrorMessage">ErrorMessage</mca:CSharpValue>
                                      </InArgument>
                                    </AddToCollection.Item>
                                    <InArgument x:TypeArguments="scg:ICollection(jtco:ErrorMessage)">
                                      <mca:CSharpValue x:TypeArguments="scg:ICollection(jtco:ErrorMessage)">ErrorMessageList</mca:CSharpValue>
                                    </InArgument>
                                  </AddToCollection>
                                </Sequence>
                              </If.Then>
                            </If>
                          </Sequence>
                        </If.Then>
                      </If>
                    </Sequence>
                    <Assign>
                      <Assign.To>
                        <OutArgument x:TypeArguments="scg:List(jtco:ErrorMessage)">
                          <mca:CSharpReference x:TypeArguments="scg:List(jtco:ErrorMessage)">Tax1040Object.ErrorMessages</mca:CSharpReference>
                        </OutArgument>
                      </Assign.To>
                      <Assign.Value>
                        <InArgument x:TypeArguments="scg:List(jtco:ErrorMessage)">
                          <mca:CSharpValue x:TypeArguments="scg:List(jtco:ErrorMessage)">ErrorMessageList</mca:CSharpValue>
                        </InArgument>
                      </Assign.Value>
                    </Assign>
                  </Sequence>
                </ActivityAction>
              </ForEach>
            </If.Then>
          </If>
        </If.Then>
      </If>
      <sads:DebugSymbol.Symbol>9xBgq27DOtWrOqabn/B2gVPXhAFFOlxUYXgxMDQwRVpcVGF4MTA0MExhdGVzdFxKZWV2YW4xMDQwXEZlYXR1cmVcQ29kZVxKVEwuVGF4MTA0MC5CdXNpbmVzc0xvZ2ljXFdvcmtGbG93XEFjdGl2aXRpZXNcRjEwOTlPSURCdXNpbmVzc1J1bGVWYWxpZGF0aW9uLnhhbWxhPAOyAw4CAQFCC0J3AgEDRTNFNwIBAkcFsAMKAgEKSgtKjQECAQtOCa4DDgIBElEPUa4BAgETVQ2sAxcCARpYE1iJAQMB/gNfEaoDHAIBG2ATjgEeAwHAA48BE7sBGAMBgwO8ARPoARgDAcYC6QETlQIYAwGJApYCE50DHgIBLZ4DE6kDHAIBHGEVjQEaAwHBA5IBGZIB1wMDAYQDlgEXuQEiAwGMA78BGb8BrgEDAccCwwEX5gEiAwHPAuwBGewBtgEDAYoC8AEXkwIiAwGSApgCRJgCRwIBLpoCFZwDGgIBL6YDGaYDegIBJaEDGaEDjQECAR1kG2TAAQMBwgNoGYsBJAMBygOXARmiASIDAa8DowEZrgEiAwGeA68BGbgBKwMBjQPEARnPASIDAfIC0AEZ2wEiAwHhAtwBGeUBKwMB0ALxARn8ASIDAbUC/QEZiAIiAwGkAokCGZICKwMBkwKdAhudArQBAgEwoQIZmgMkAgE5aRt0JAMB7QN1G4ABJAMB3AOBARuKAS0DAcsDnwEfnwGZAQMBuAOaAR+aAXoDAbADqwEfqwF1AwGnA6YBH6YBdwMBnwO2AR22AYUBAwGWA7IBH7IBcgMBjgPMAR/MAZoBAwH7AscBH8cBegMB8wLYAR/YAXUDAeoC0wEf0wF3AwHiAuMBHeMBhQEDAdkC3wEf3wFyAwHRAvkBH/kBmQEDAb4C9AEf9AF6AwG2AoUCH4UCdQMBrQKAAh+AAncDAaUCkAIdkAKFAQMBnAKMAh+MAnIDAZQCowJJowJMAgE6pgIb4AIlAwGkAeECG5kDIAIBO3EhcaEBAwH2A2whbHwDAe4DfSF9dwMB5QN4IXh5AwHdA4gBH4gBhwEDAdQDhAEhhAF0AwHMA6kCIakCoQEDAf4BsAIf3gIqAwGlAeQCIeQCjgMCATzoAh+XAyoCAUexAiG8AioDAeUBvQIh0QImAwG/AdICId0CKgMBpgHpAiH0AioDAY0B9QIhgAMqAgF2gQMhjAMqAgFfjQMhlgMzAgFIuQInuQLyAQMB8gG0Aie0AosBAwHmAcACJ8ACwgEDAcABxAIlzwIuAwHMAdoCJ9oCeQMBswHVAifVAn0DAacB8QIn8QKgAQMBmQHsAifsAoIBAwGOAf0CJ/0CnwEDAYIB+AIn+AKDAQIBd4kDJ4kDfQIBa4QDJ4QDfwIBYJQDJZQDjQECAVSQAyeQA3oCAUnMAivMAnkDAdkBxwIrxwKGAQMBzQE=</sads:DebugSymbol.Symbol>
    </Sequence>
  </twa:F1099OIDBusinessValidation.Implementation>
</twa:F1099OIDBusinessValidation>