<?xml version="1.0" encoding="utf-8"?>
<local:IncomeSummaryCalculation xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:jtb="clr-namespace:JTL.Tax1040.BusinessObject;assembly=JTL.Tax1040.BusinessObject" xmlns:local="clr-namespace:JTL.Tax1040.BusinessLogic.WorkFlow.Activities.CalculationWithNoValidation;assembly=JTL.Tax1040.BusinessLogic" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:mca="clr-namespace:Microsoft.CSharp.Activities;assembly=System.Activities" xmlns:sads="http://schemas.microsoft.com/netfx/2010/xaml/activities/debugger" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib" xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=mscorlib" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <TextExpression.NamespacesForImplementation>
    <sco:Collection x:TypeArguments="x:String">
      <x:String>System</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Text</x:String>
      <x:String>JTL.Tax1040.BusinessObject</x:String>
    </sco:Collection>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <sco:Collection x:TypeArguments="AssemblyReference">
      <AssemblyReference>Microsoft.Activities.Extensions</AssemblyReference>
      <AssemblyReference>Microsoft.CSharp</AssemblyReference>
      <AssemblyReference>Newtonsoft.Json</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>System.Configuration</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>System.ServiceModel.Activities</AssemblyReference>
      <AssemblyReference>System.Web</AssemblyReference>
      <AssemblyReference>System.Workflow.Activities</AssemblyReference>
      <AssemblyReference>System.Workflow.ComponentModel</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>JTL.Tax1040.Core.Object</AssemblyReference>
      <AssemblyReference>JTL.Tax1040.Core.Process</AssemblyReference>
      <AssemblyReference>JTL.Tax1040.DataAccess</AssemblyReference>
      <AssemblyReference>JTL.Tax1040.BusinessObject</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>JTL.Tax1040.BusinessLogic</AssemblyReference>
    </sco:Collection>
  </TextExpression.ReferencesForImplementation>
  <local:IncomeSummaryCalculation.Implementation>
    <Sequence DisplayName="Income Summary Calculation">
      <Sequence DisplayName="Income Summary Check">
        <If DisplayName="IfTax1040Object Check">
          <If.Condition>
            <InArgument x:TypeArguments="x:Boolean">
              <mca:CSharpValue x:TypeArguments="x:Boolean">(Tax1040Object !=null &amp;&amp; Tax1040Object.Income !=null)</mca:CSharpValue>
            </InArgument>
          </If.Condition>
          <If.Then>
            <Sequence DisplayName="Income">
              <Sequence DisplayName="W2">
                <If DisplayName="IfW2WagesCheck">
                  <If.Condition>
                    <InArgument x:TypeArguments="x:Boolean">
                      <mca:CSharpValue x:TypeArguments="x:Boolean">((Tax1040Object.Income.W2Wages != null) &amp;&amp; (Tax1040Object.Income.W2Wages.Count &gt; 0))</mca:CSharpValue>
                    </InArgument>
                  </If.Condition>
                  <If.Then>
                    <Sequence DisplayName="W2">
                      <local:W2WithNoValidation>
                        <local:W2WithNoValidation.PrefixTotalWages>
                          <OutArgument x:TypeArguments="x:String">
                            <mca:CSharpReference x:TypeArguments="x:String">PrefixWages</mca:CSharpReference>
                          </OutArgument>
                        </local:W2WithNoValidation.PrefixTotalWages>
                        <local:W2WithNoValidation.Tax1040Object>
                          <InOutArgument x:TypeArguments="jtb:Tax1040">
                            <mca:CSharpReference x:TypeArguments="jtb:Tax1040">Tax1040Object</mca:CSharpReference>
                          </InOutArgument>
                        </local:W2WithNoValidation.Tax1040Object>
                        <local:W2WithNoValidation.TotalWages>
                          <OutArgument x:TypeArguments="x:Double">
                            <mca:CSharpReference x:TypeArguments="x:Double">TotalWagesAmount</mca:CSharpReference>
                          </OutArgument>
                        </local:W2WithNoValidation.TotalWages>
                      </local:W2WithNoValidation>
                    </Sequence>
                  </If.Then>
                </If>
              </Sequence>
              <Sequence DisplayName="Interest Income">
                <If DisplayName="1099 INT Calculation">
                  <If.Condition>
                    <InArgument x:TypeArguments="x:Boolean">
                      <mca:CSharpValue x:TypeArguments="x:Boolean">((Tax1040Object.Income.Form1099INT != null) &amp;&amp; (Tax1040Object.Income.Form1099INT.Count &gt; 0))</mca:CSharpValue>
                    </InArgument>
                  </If.Condition>
                  <If.Then>
                    <Sequence DisplayName="1099-INT">
                      <Sequence.Variables>
                        <Variable x:TypeArguments="x:Double" Name="Total1099INTAmount" />
                      </Sequence.Variables>
                      <local:F1099INTWithNoValidation>
                        <local:F1099INTWithNoValidation.Tax1040Object>
                          <InOutArgument x:TypeArguments="jtb:Tax1040">
                            <mca:CSharpReference x:TypeArguments="jtb:Tax1040">Tax1040Object</mca:CSharpReference>
                          </InOutArgument>
                        </local:F1099INTWithNoValidation.Tax1040Object>
                        <local:F1099INTWithNoValidation.TotalTaxableInterest>
                          <OutArgument x:TypeArguments="x:Double">
                            <mca:CSharpReference x:TypeArguments="x:Double">Total1099INT</mca:CSharpReference>
                          </OutArgument>
                        </local:F1099INTWithNoValidation.TotalTaxableInterest>
                        <local:F1099INTWithNoValidation.TotaltaxExemptInterest1099INT>
                          <OutArgument x:TypeArguments="x:Double">
                            <mca:CSharpReference x:TypeArguments="x:Double">TotalExempt1099INT</mca:CSharpReference>
                          </OutArgument>
                        </local:F1099INTWithNoValidation.TotaltaxExemptInterest1099INT>
                      </local:F1099INTWithNoValidation>
                    </Sequence>
                  </If.Then>
                </If>
                <If DisplayName="1099OID Calculation">
                  <If.Condition>
                    <InArgument x:TypeArguments="x:Boolean">
                      <mca:CSharpValue x:TypeArguments="x:Boolean">((Tax1040Object.Income.Form1099OID != null) &amp;&amp; (Tax1040Object.Income.Form1099OID.Count &gt; 0))</mca:CSharpValue>
                    </InArgument>
                  </If.Condition>
                  <If.Then>
                    <Sequence DisplayName="F1099-OID">
                      <Sequence.Variables>
                        <Variable x:TypeArguments="x:String" Name="variable1" />
                      </Sequence.Variables>
                      <local:F1099OIDWithNoValidation argument1="{x:Null}">
                        <local:F1099OIDWithNoValidation.Tax1040Object>
                          <InOutArgument x:TypeArguments="jtb:Tax1040">
                            <mca:CSharpReference x:TypeArguments="jtb:Tax1040">Tax1040Object</mca:CSharpReference>
                          </InOutArgument>
                        </local:F1099OIDWithNoValidation.Tax1040Object>
                        <local:F1099OIDWithNoValidation.TotalTaxableInterest>
                          <OutArgument x:TypeArguments="x:Double">
                            <mca:CSharpReference x:TypeArguments="x:Double">Tota1099OID</mca:CSharpReference>
                          </OutArgument>
                        </local:F1099OIDWithNoValidation.TotalTaxableInterest>
                        <local:F1099OIDWithNoValidation.TotaltaxExemptInterest1099OID>
                          <OutArgument x:TypeArguments="x:Double">
                            <mca:CSharpReference x:TypeArguments="x:Double">TotalExempt1099OID</mca:CSharpReference>
                          </OutArgument>
                        </local:F1099OIDWithNoValidation.TotaltaxExemptInterest1099OID>
                      </local:F1099OIDWithNoValidation>
                    </Sequence>
                  </If.Then>
                </If>
                <Assign>
                  <Assign.To>
                    <OutArgument x:TypeArguments="x:Double">
                      <mca:CSharpReference x:TypeArguments="x:Double">TotalInterestIncomeAmount</mca:CSharpReference>
                    </OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="x:Double">
                      <mca:CSharpValue x:TypeArguments="x:Double">Tota1099OID + Total1099INT</mca:CSharpValue>
                    </InArgument>
                  </Assign.Value>
                </Assign>
                <Assign>
                  <Assign.To>
                    <OutArgument x:TypeArguments="x:Double">
                      <mca:CSharpReference x:TypeArguments="x:Double">TotalExemptionAmount</mca:CSharpReference>
                    </OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="x:Double">
                      <mca:CSharpValue x:TypeArguments="x:Double">TotalExempt1099INT+TotalExempt1099OID</mca:CSharpValue>
                    </InArgument>
                  </Assign.Value>
                </Assign>
              </Sequence>
              <Sequence DisplayName="Unemployment Compensation">
                <If DisplayName="UnemploymentCompensation Calculation">
                  <If.Condition>
                    <InArgument x:TypeArguments="x:Boolean">
                      <mca:CSharpValue x:TypeArguments="x:Boolean">((Tax1040Object.Income.Form1099G != null) &amp;&amp; (Tax1040Object.Income.Form1099G.Count &gt; 0))</mca:CSharpValue>
                    </InArgument>
                  </If.Condition>
                  <If.Then>
                    <Sequence DisplayName="Unemployment">
                      <Sequence DisplayName="1099G">
                        <Sequence.Variables>
                          <Variable x:TypeArguments="x:Double" Name="TotalUnemploymentCompensationAmount" />
                        </Sequence.Variables>
                        <local:F1099GWithNoValidation>
                          <local:F1099GWithNoValidation.Tax1040Object>
                            <InOutArgument x:TypeArguments="jtb:Tax1040">
                              <mca:CSharpReference x:TypeArguments="jtb:Tax1040">Tax1040Object</mca:CSharpReference>
                            </InOutArgument>
                          </local:F1099GWithNoValidation.Tax1040Object>
                          <local:F1099GWithNoValidation.UnEmployment>
                            <OutArgument x:TypeArguments="x:Double">
                              <mca:CSharpReference x:TypeArguments="x:Double">TotalUnemploymentAmount</mca:CSharpReference>
                            </OutArgument>
                          </local:F1099GWithNoValidation.UnEmployment>
                        </local:F1099GWithNoValidation>
                      </Sequence>
                    </Sequence>
                  </If.Then>
                </If>
              </Sequence>
              <Sequence DisplayName="Alaska Permenant Fund">
                <If DisplayName="Alaska Permanent Fund">
                  <If.Condition>
                    <InArgument x:TypeArguments="x:Boolean">
                      <mca:CSharpValue x:TypeArguments="x:Boolean">Tax1040Object.Income.OtherIncome !=null</mca:CSharpValue>
                    </InArgument>
                  </If.Condition>
                  <If.Then>
                    <If DisplayName="If Alaska Check">
                      <If.Condition>
                        <InArgument x:TypeArguments="x:Boolean">
                          <mca:CSharpValue x:TypeArguments="x:Boolean">Tax1040Object.Income.OtherIncome.HasAlaskaPermanantFund.HasValue &amp;&amp; Tax1040Object.Income.OtherIncome.HasAlaskaPermanantFund.Value</mca:CSharpValue>
                        </InArgument>
                      </If.Condition>
                      <If.Then>
                        <Sequence DisplayName="AlaskaPermanentFund">
                          <local:AlaskaWithNoValidation>
                            <local:AlaskaWithNoValidation.AlaskaPermanentFund>
                              <OutArgument x:TypeArguments="x:Double">
                                <mca:CSharpReference x:TypeArguments="x:Double">TotalOtherIncomeAmount</mca:CSharpReference>
                              </OutArgument>
                            </local:AlaskaWithNoValidation.AlaskaPermanentFund>
                            <local:AlaskaWithNoValidation.Tax1040Object>
                              <InOutArgument x:TypeArguments="jtb:Tax1040">
                                <mca:CSharpReference x:TypeArguments="jtb:Tax1040">Tax1040Object</mca:CSharpReference>
                              </InOutArgument>
                            </local:AlaskaWithNoValidation.Tax1040Object>
                          </local:AlaskaWithNoValidation>
                        </Sequence>
                      </If.Then>
                    </If>
                  </If.Then>
                </If>
              </Sequence>
            </Sequence>
          </If.Then>
        </If>
      </Sequence>
      <sads:DebugSymbol.Symbol>9xDvMzyor6h21/bYJy9YHDQ4mgFFOlxUYXgxMDQwRVpcVGF4MTA0MExhdGVzdFxKZWV2YW4xMDQwXEZlYXR1cmVcQ29kZVxKVEwuVGF4MTA0MC5CdXNpbmVzc0xvZ2ljXFdvcmtGbG93XEFjdGl2aXRpZXNcQ2FsY3VsYXRpb25XaXRoTm9WYWxpZGF0aW9uXEluY29tZVN1bW1hcnlDYWxjdWxhdGlvbi54YW1sM0IDhwIOAgEBQwWFAhACAQJEB4QCDAIBA0cNR4kBAgEESwuCAhYCARBMDWkYAwGQAmoNwQEYAgFxwgEN3wEYAgFG4AENgQIYAgERTQ9oFAMBkQJrD4kBFAMB2gGKAQ+oARQDAaQBqQEPtAEYAwGLAbUBD8ABGAIBcsMBD94BFAIBR+EBD4ACFAIBElAVULMBAwGSAlQTZh4DAZ4CbhVuuwEDAdsBchOHAR4DAecBjQEVjQG7AQMBpQGRAROmAR4DAbEBsQEVsQFtAwGYAawBFawBdAMBjAG9ARW9AXgCAX+4ARW4AW8CAXPGARXGAbcBAgFIygET3AEeAgFU5AEV5AF7AgET6AET/gEYAgEfVRVlMAMBnwJ2FYYBNgMB6AGVARWlATYDAbIBywEV2wEgAgFV6wEZ6wHhAQIBIO8BF/wBIgIBLF0bXXEDAbgCYhticQMBrAJYG1hsAwGgAnkbeXEDAYMCgwEbgwFzAwH2AX4bfm0DAekBogEbogFzAwHNAZgBG5gBcQMBwAGdARudAWwDAbMBzwEX2gE2AgFW8AEZ+wE4AgEt0gEd0gFzAgFk1wEd1wF6AgFX+AEf+AF1AgE68wEf8wF7AgEu</sads:DebugSymbol.Symbol>
    </Sequence>
  </local:IncomeSummaryCalculation.Implementation>
</local:IncomeSummaryCalculation>