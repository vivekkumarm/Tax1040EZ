<?xml version="1.0" encoding="utf-8"?>
<jtbwa:F1040EZAdjustedGrossIncome xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:jtb="clr-namespace:JTL.Tax1040.BusinessObject;assembly=JTL.Tax1040.BusinessObject" xmlns:jtbwa="clr-namespace:JTL.Tax1040.BusinessLogic.WorkFlow.Activities;assembly=JTL.Tax1040.BusinessLogic" xmlns:jtco="clr-namespace:JTL.Tax1040.Core.Object;assembly=JTL.Tax1040.Core.Object" xmlns:local="clr-namespace:Tax1040WorkFlow.WorkFlow.Activities;assembly=JTL.Tax1040.BusinessLogic" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:mca="clr-namespace:Microsoft.CSharp.Activities;assembly=System.Activities" xmlns:sads="http://schemas.microsoft.com/netfx/2010/xaml/activities/debugger" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib" xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=mscorlib" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <TextExpression.NamespacesForImplementation>
    <sco:Collection x:TypeArguments="x:String">
      <x:String>System</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Text</x:String>
      <x:String>JTL.Tax1040.BusinessObject</x:String>
      <x:String>JTL.Tax1040.Core.Object</x:String>
    </sco:Collection>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <sco:Collection x:TypeArguments="AssemblyReference">
      <AssemblyReference>Microsoft.Activities.Extensions</AssemblyReference>
      <AssemblyReference>Microsoft.CSharp</AssemblyReference>
      <AssemblyReference>Newtonsoft.Json</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>System.Configuration</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>System.ServiceModel.Activities</AssemblyReference>
      <AssemblyReference>System.Web</AssemblyReference>
      <AssemblyReference>System.Workflow.Activities</AssemblyReference>
      <AssemblyReference>System.Workflow.ComponentModel</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>JTL.Tax1040.Core.Object</AssemblyReference>
      <AssemblyReference>JTL.Tax1040.Core.Process</AssemblyReference>
      <AssemblyReference>JTL.Tax1040.DataAccess</AssemblyReference>
      <AssemblyReference>JTL.Tax1040.BusinessObject</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>JTL.Tax1040.BusinessLogic</AssemblyReference>
    </sco:Collection>
  </TextExpression.ReferencesForImplementation>
  <jtbwa:F1040EZAdjustedGrossIncome.Implementation>
    <Sequence DisplayName="AnnualGrossIncome">
      <Sequence.Variables>
        <Variable x:TypeArguments="x:Double" Name="TotalWages" />
      </Sequence.Variables>
      <Sequence>
        <If>
          <If.Condition>
            <InArgument x:TypeArguments="x:Boolean">
              <mca:CSharpValue x:TypeArguments="x:Boolean">Tax1040Object!=null</mca:CSharpValue>
            </InArgument>
          </If.Condition>
          <If.Then>
            <Sequence>
              <Sequence DisplayName="Initialization">
                <Assign>
                  <Assign.To>
                    <OutArgument x:TypeArguments="jtb:OutputForms">
                      <mca:CSharpReference x:TypeArguments="jtb:OutputForms">Tax1040Object.OutputForms</mca:CSharpReference>
                    </OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="jtb:OutputForms">
                      <mca:CSharpValue x:TypeArguments="jtb:OutputForms">new OutputForms()</mca:CSharpValue>
                    </InArgument>
                  </Assign.Value>
                </Assign>
                <Assign>
                  <Assign.To>
                    <OutArgument x:TypeArguments="jtb:Tax1040EZPage1">
                      <mca:CSharpReference x:TypeArguments="jtb:Tax1040EZPage1">Tax1040Object.OutputForms.Tax1040EZPage1</mca:CSharpReference>
                    </OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="jtb:Tax1040EZPage1">
                      <mca:CSharpValue x:TypeArguments="jtb:Tax1040EZPage1">new Tax1040EZPage1()</mca:CSharpValue>
                    </InArgument>
                  </Assign.Value>
                </Assign>
              </Sequence>
              <Sequence>
                <If>
                  <If.Condition>
                    <InArgument x:TypeArguments="x:Boolean">
                      <mca:CSharpValue x:TypeArguments="x:Boolean">Tax1040Object.Income!=null</mca:CSharpValue>
                    </InArgument>
                  </If.Condition>
                  <If.Then>
                    <Sequence DisplayName="F1040EZLine1 - TotalWages">
                      <Sequence.Variables>
                        <Variable x:TypeArguments="jtb:W2" Name="W2" />
                      </Sequence.Variables>
                      <If DisplayName="TotalWages Calculation">
                        <If.Condition>
                          <InArgument x:TypeArguments="x:Boolean">
                            <mca:CSharpValue x:TypeArguments="x:Boolean">((Tax1040Object.Income.W2Wages != null) &amp;&amp; (Tax1040Object.Income.W2Wages.Count&gt;0))</mca:CSharpValue>
                          </InArgument>
                        </If.Condition>
                        <If.Then>
                          <Sequence DisplayName="W2 Calculation">
                            <local:FW2Calculation PrefixTotalWages="{x:Null}">
                              <local:FW2Calculation.ErrorMessages>
                                <InArgument x:TypeArguments="jtco:ErrorMessages">
                                  <mca:CSharpValue x:TypeArguments="jtco:ErrorMessages">ErrorMessages</mca:CSharpValue>
                                </InArgument>
                              </local:FW2Calculation.ErrorMessages>
                              <local:FW2Calculation.Tax1040Object>
                                <InOutArgument x:TypeArguments="jtb:Tax1040">
                                  <mca:CSharpReference x:TypeArguments="jtb:Tax1040">Tax1040Object</mca:CSharpReference>
                                </InOutArgument>
                              </local:FW2Calculation.Tax1040Object>
                              <local:FW2Calculation.TotalWages>
                                <OutArgument x:TypeArguments="x:Double">
                                  <mca:CSharpReference x:TypeArguments="x:Double">Tax1040Object.OutputForms.Tax1040EZPage1.TotalWages</mca:CSharpReference>
                                </OutArgument>
                              </local:FW2Calculation.TotalWages>
                            </local:FW2Calculation>
                          </Sequence>
                        </If.Then>
                      </If>
                      <Sequence DisplayName="F1040EZLine2 - TaxableInterest">
                        <Sequence.Variables>
                          <Variable x:TypeArguments="jtb:Form1099OID" Name="Form1099OID" />
                          <Variable x:TypeArguments="jtb:Form1099INT" Name="Form1099INT" />
                          <Variable x:TypeArguments="x:Double" Name="Totol1099OIDAmount" />
                          <Variable x:TypeArguments="x:Double" Name="Form1099INTTotal" />
                          <Variable x:TypeArguments="x:Double" Name="Form1099OIDTotal" />
                          <Variable x:TypeArguments="x:Double" Name="F1099INTTaxExemptInterest" />
                          <Variable x:TypeArguments="x:Double" Name="F1099OIDTaxExemptInterest" />
                        </Sequence.Variables>
                        <If DisplayName="1099 INT Calculation">
                          <If.Condition>
                            <InArgument x:TypeArguments="x:Boolean">
                              <mca:CSharpValue x:TypeArguments="x:Boolean">((Tax1040Object.Income.Form1099INT != null) &amp;&amp; (Tax1040Object.Income.Form1099INT.Count &gt; 0))</mca:CSharpValue>
                            </InArgument>
                          </If.Condition>
                          <If.Then>
                            <Sequence DisplayName="1099-INT">
                              <Sequence.Variables>
                                <Variable x:TypeArguments="x:Double" Name="Total1099INTAmount" />
                              </Sequence.Variables>
                              <local:F1099INTCalculation DisplayName="F1099INTCalculation">
                                <local:F1099INTCalculation.ErrorMessages>
                                  <InArgument x:TypeArguments="jtco:ErrorMessages">
                                    <mca:CSharpValue x:TypeArguments="jtco:ErrorMessages">ErrorMessages</mca:CSharpValue>
                                  </InArgument>
                                </local:F1099INTCalculation.ErrorMessages>
                                <local:F1099INTCalculation.Tax1040Object>
                                  <InOutArgument x:TypeArguments="jtb:Tax1040">
                                    <mca:CSharpReference x:TypeArguments="jtb:Tax1040">Tax1040Object</mca:CSharpReference>
                                  </InOutArgument>
                                </local:F1099INTCalculation.Tax1040Object>
                                <local:F1099INTCalculation.TotalTaxableInterest>
                                  <OutArgument x:TypeArguments="x:Double">
                                    <mca:CSharpReference x:TypeArguments="x:Double">Form1099INTTotal</mca:CSharpReference>
                                  </OutArgument>
                                </local:F1099INTCalculation.TotalTaxableInterest>
                                <local:F1099INTCalculation.TotaltaxExemptInterest1099INT>
                                  <OutArgument x:TypeArguments="x:Double">
                                    <mca:CSharpReference x:TypeArguments="x:Double">F1099INTTaxExemptInterest</mca:CSharpReference>
                                  </OutArgument>
                                </local:F1099INTCalculation.TotaltaxExemptInterest1099INT>
                              </local:F1099INTCalculation>
                            </Sequence>
                          </If.Then>
                        </If>
                        <If DisplayName="1099OID Calculation">
                          <If.Condition>
                            <InArgument x:TypeArguments="x:Boolean">
                              <mca:CSharpValue x:TypeArguments="x:Boolean">((Tax1040Object.Income.Form1099OID != null) &amp;&amp; (Tax1040Object.Income.Form1099OID.Count &gt; 0))</mca:CSharpValue>
                            </InArgument>
                          </If.Condition>
                          <If.Then>
                            <Sequence DisplayName="F1099-OID">
                              <Sequence.Variables>
                                <Variable x:TypeArguments="x:String" Name="variable1" />
                              </Sequence.Variables>
                              <local:F1099OIDCalculation>
                                <local:F1099OIDCalculation.ErrorMessages>
                                  <InArgument x:TypeArguments="jtco:ErrorMessages">
                                    <mca:CSharpValue x:TypeArguments="jtco:ErrorMessages">ErrorMessages</mca:CSharpValue>
                                  </InArgument>
                                </local:F1099OIDCalculation.ErrorMessages>
                                <local:F1099OIDCalculation.Tax1040Object>
                                  <InOutArgument x:TypeArguments="jtb:Tax1040">
                                    <mca:CSharpReference x:TypeArguments="jtb:Tax1040">Tax1040Object</mca:CSharpReference>
                                  </InOutArgument>
                                </local:F1099OIDCalculation.Tax1040Object>
                                <local:F1099OIDCalculation.TotalTaxableInterest>
                                  <OutArgument x:TypeArguments="x:Double">
                                    <mca:CSharpReference x:TypeArguments="x:Double">Form1099OIDTotal</mca:CSharpReference>
                                  </OutArgument>
                                </local:F1099OIDCalculation.TotalTaxableInterest>
                                <local:F1099OIDCalculation.TotaltaxExemptInterest1099OID>
                                  <OutArgument x:TypeArguments="x:Double">
                                    <mca:CSharpReference x:TypeArguments="x:Double">F1099OIDTaxExemptInterest</mca:CSharpReference>
                                  </OutArgument>
                                </local:F1099OIDCalculation.TotaltaxExemptInterest1099OID>
                              </local:F1099OIDCalculation>
                            </Sequence>
                          </If.Then>
                        </If>
                        <Assign DisplayName="Total Interest Income">
                          <Assign.To>
                            <OutArgument x:TypeArguments="x:Double">
                              <mca:CSharpReference x:TypeArguments="x:Double">Tax1040Object.OutputForms.Tax1040EZPage1.TaxableInterest</mca:CSharpReference>
                            </OutArgument>
                          </Assign.To>
                          <Assign.Value>
                            <InArgument x:TypeArguments="x:Double">
                              <mca:CSharpValue x:TypeArguments="x:Double">Form1099INTTotal + Form1099OIDTotal</mca:CSharpValue>
                            </InArgument>
                          </Assign.Value>
                        </Assign>
                        <Assign DisplayName="Total Taxable Interest">
                          <Assign.To>
                            <OutArgument x:TypeArguments="x:Double">
                              <mca:CSharpReference x:TypeArguments="x:Double">Tax1040Object.OutputForms.Tax1040EZPage1.TEI</mca:CSharpReference>
                            </OutArgument>
                          </Assign.To>
                          <Assign.Value>
                            <InArgument x:TypeArguments="x:Double">
                              <mca:CSharpValue x:TypeArguments="x:Double">F1099INTTaxExemptInterest + F1099OIDTaxExemptInterest</mca:CSharpValue>
                            </InArgument>
                          </Assign.Value>
                        </Assign>
                      </Sequence>
                      <Sequence DisplayName="F1040EZLine3 - UnemploymentCompensation">
                        <Sequence.Variables>
                          <Variable x:TypeArguments="jtb:Form1099G" Name="Form1099G" />
                          <Variable x:TypeArguments="x:Double" Name="AlaskaPermanantFundAmount" />
                          <Variable x:TypeArguments="x:Double" Name="UnemploymentAmount" />
                        </Sequence.Variables>
                        <If DisplayName="UnemploymentCompensation Calculation">
                          <If.Condition>
                            <InArgument x:TypeArguments="x:Boolean">
                              <mca:CSharpValue x:TypeArguments="x:Boolean">((Tax1040Object.Income.Form1099G != null) &amp;&amp; (Tax1040Object.Income.Form1099G.Count &gt; 0))</mca:CSharpValue>
                            </InArgument>
                          </If.Condition>
                          <If.Then>
                            <Sequence DisplayName="Unemployment">
                              <Sequence DisplayName="1099G">
                                <Sequence.Variables>
                                  <Variable x:TypeArguments="x:Double" Name="TotalUnemploymentCompensationAmount" />
                                </Sequence.Variables>
                                <local:F1099GCalculation>
                                  <local:F1099GCalculation.ErrorMessages>
                                    <InArgument x:TypeArguments="jtco:ErrorMessages">
                                      <mca:CSharpValue x:TypeArguments="jtco:ErrorMessages">ErrorMessages</mca:CSharpValue>
                                    </InArgument>
                                  </local:F1099GCalculation.ErrorMessages>
                                  <local:F1099GCalculation.Tax1040Object>
                                    <InOutArgument x:TypeArguments="jtb:Tax1040">
                                      <mca:CSharpReference x:TypeArguments="jtb:Tax1040">Tax1040Object</mca:CSharpReference>
                                    </InOutArgument>
                                  </local:F1099GCalculation.Tax1040Object>
                                  <local:F1099GCalculation.UnEmployment>
                                    <OutArgument x:TypeArguments="x:Double">
                                      <mca:CSharpReference x:TypeArguments="x:Double">UnemploymentAmount</mca:CSharpReference>
                                    </OutArgument>
                                  </local:F1099GCalculation.UnEmployment>
                                </local:F1099GCalculation>
                              </Sequence>
                            </Sequence>
                          </If.Then>
                        </If>
                        <If DisplayName="Alaska Permanent Fund">
                          <If.Condition>
                            <InArgument x:TypeArguments="x:Boolean">
                              <mca:CSharpValue x:TypeArguments="x:Boolean">Tax1040Object.Income.OtherIncome !=null</mca:CSharpValue>
                            </InArgument>
                          </If.Condition>
                          <If.Then>
                            <If DisplayName="If Alaska Check">
                              <If.Condition>
                                <InArgument x:TypeArguments="x:Boolean">
                                  <mca:CSharpValue x:TypeArguments="x:Boolean">Tax1040Object.Income.OtherIncome.HasAlaskaPermanantFund.HasValue &amp;&amp; Tax1040Object.Income.OtherIncome.HasAlaskaPermanantFund.Value</mca:CSharpValue>
                                </InArgument>
                              </If.Condition>
                              <If.Then>
                                <Sequence DisplayName="AlaskaPermanantFund">
                                  <local:F1040EZAlaskaPermanentFund>
                                    <local:F1040EZAlaskaPermanentFund.AlaskaPermanantFund>
                                      <OutArgument x:TypeArguments="x:Double">
                                        <mca:CSharpReference x:TypeArguments="x:Double">AlaskaPermanantFundAmount</mca:CSharpReference>
                                      </OutArgument>
                                    </local:F1040EZAlaskaPermanentFund.AlaskaPermanantFund>
                                    <local:F1040EZAlaskaPermanentFund.Tax1040Object>
                                      <InOutArgument x:TypeArguments="jtb:Tax1040">
                                        <mca:CSharpReference x:TypeArguments="jtb:Tax1040">Tax1040Object</mca:CSharpReference>
                                      </InOutArgument>
                                    </local:F1040EZAlaskaPermanentFund.Tax1040Object>
                                  </local:F1040EZAlaskaPermanentFund>
                                </Sequence>
                              </If.Then>
                            </If>
                          </If.Then>
                        </If>
                        <Assign>
                          <Assign.To>
                            <OutArgument x:TypeArguments="x:Double">
                              <mca:CSharpReference x:TypeArguments="x:Double">Tax1040Object.OutputForms.Tax1040EZPage1.UnemploymentCompensation</mca:CSharpReference>
                            </OutArgument>
                          </Assign.To>
                          <Assign.Value>
                            <InArgument x:TypeArguments="x:Double">
                              <mca:CSharpValue x:TypeArguments="x:Double">UnemploymentAmount + AlaskaPermanantFundAmount</mca:CSharpValue>
                            </InArgument>
                          </Assign.Value>
                        </Assign>
                      </Sequence>
                      <Sequence>
                        <Assign>
                          <Assign.To>
                            <OutArgument x:TypeArguments="x:Double">
                              <mca:CSharpReference x:TypeArguments="x:Double">AnnualGrossIncome</mca:CSharpReference>
                            </OutArgument>
                          </Assign.To>
                          <Assign.Value>
                            <InArgument x:TypeArguments="x:Double">
                              <mca:CSharpValue x:TypeArguments="x:Double">Tax1040Object.OutputForms.Tax1040EZPage1.TotalWages + Tax1040Object.OutputForms.Tax1040EZPage1.TaxableInterest + Tax1040Object.OutputForms.Tax1040EZPage1.UnemploymentCompensation</mca:CSharpValue>
                            </InArgument>
                          </Assign.Value>
                        </Assign>
                        <Assign>
                          <Assign.To>
                            <OutArgument x:TypeArguments="x:Double">
                              <mca:CSharpReference x:TypeArguments="x:Double">Tax1040Object.OutputForms.Tax1040EZPage1.AdjustedGrossIncome</mca:CSharpReference>
                            </OutArgument>
                          </Assign.To>
                          <Assign.Value>
                            <InArgument x:TypeArguments="x:Double">
                              <mca:CSharpValue x:TypeArguments="x:Double">AnnualGrossIncome</mca:CSharpValue>
                            </InArgument>
                          </Assign.Value>
                        </Assign>
                        <Assign>
                          <Assign.To>
                            <OutArgument x:TypeArguments="x:Double">
                              <mca:CSharpReference x:TypeArguments="x:Double">TotalW2Wages</mca:CSharpReference>
                            </OutArgument>
                          </Assign.To>
                          <Assign.Value>
                            <InArgument x:TypeArguments="x:Double">
                              <mca:CSharpValue x:TypeArguments="x:Double">Tax1040Object.OutputForms.Tax1040EZPage1.TotalWages</mca:CSharpValue>
                            </InArgument>
                          </Assign.Value>
                        </Assign>
                      </Sequence>
                    </Sequence>
                  </If.Then>
                </If>
              </Sequence>
            </Sequence>
          </If.Then>
        </If>
      </Sequence>
      <sads:DebugSymbol.Symbol>9xBvIPeOvCOWi7lntZDH2wGlgAFFOlxUYXgxMDQwRVpcVGF4MTA0MExhdGVzdFxKZWV2YW4xMDQwXEZlYXR1cmVcQ29kZVxKVEwuVGF4MTA0MC5CdXNpbmVzc0xvZ2ljXFdvcmtGbG93XEFjdGl2aXRpZXNcRjEwNDBFWkFkanVzdGVkR3Jvc3NJbmNvbWUueGFtbEw9A/oCDgIBAUEF+AIQAgECQgf3AgwCAQNFDUVfAgEESQv1AhYCAQpKDWMYAwGnA2QN9AIYAgELSw9WGAMBtQNXD2IYAwGoA2UP8wIUAgEMUxVTawMBvANOFU57AwG2A18VX3EDAa8DWhVajQEDAakDaBVobgIBDWwT8QIeAgETcBWLARoDAYgDjAEV9gEgAwGzAfcBFcoCIAIBQssCFfACIAIBFHMbc7cBAwGJA3cZiQEkAwGQA5YBF7kBHAMBuwK6ARfdARwDAe4B3gEX6QEgAwHRAeoBF/UBIAMBtAH9ARedAhwDAYQBngIXvQIcAgFYvgIXyQIgAgFDzAIX1wIgAgEz2AIX4wIgAgEk5AIX7wIgAgEVeBuIATIDAZEDmQEdmQHDAQMBvAKdARu3ASYDAcoCvQEdvQHDAQMB7wHBARvbASYDAf0B5gEd5gF+AwHgAeEBHeEBmwEDAdIB8gEd8gGQAQMBwwHtAR3tAY8BAwG1AYACHYACvwEDAYUBhAIbmwImAwGPAaECHaECgwECAVmlAhu7AiACAWPGAh3GAokBAgFOwQIdwQKkAQIBRNQCHdQCjQICATvPAh3PAnQCATTgAh3gAmwCASzbAh3bAp8BAgEl7AId7AKOAQIBHecCHecCbwIBFoABIYABdwMBoAOFASGFAZoBAwGZA3she3YDAZIDoQEdtgE5AwHLAsUBHdoBOQMB/gGFAh2aAigDAZABqAIhqALpAQIBZKwCH7kCKgIBbqkBI6kBeQMB+QKzASOzAYIBAwHqAqQBI6QBeAMB2wKuASOuAXkDAcwC1wEj1wGCAQMBrALNASPNAXkDAZ0CyAEjyAF4AwGOAtIBI9IBeQMB/wGJAh+ZAjkDAZEBrQIhuAJEAgFvkQIlkQJ7AwGoAYwCJYwCegMBnQGWAiWWAn0DAZIBtQIntQJ9AgF6sAInsAKGAQIBcA==</sads:DebugSymbol.Symbol>
    </Sequence>
  </jtbwa:F1040EZAdjustedGrossIncome.Implementation>
</jtbwa:F1040EZAdjustedGrossIncome>