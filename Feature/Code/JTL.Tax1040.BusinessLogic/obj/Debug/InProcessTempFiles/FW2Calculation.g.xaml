<?xml version="1.0" encoding="utf-8"?>
<local:FW2Calculation xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:jtb="clr-namespace:JTL.Tax1040.BusinessObject;assembly=JTL.Tax1040.BusinessObject" xmlns:jtco="clr-namespace:JTL.Tax1040.Core.Object;assembly=JTL.Tax1040.Core.Object" xmlns:local="clr-namespace:Tax1040WorkFlow.WorkFlow.Activities;assembly=JTL.Tax1040.BusinessLogic" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:mca="clr-namespace:Microsoft.CSharp.Activities;assembly=System.Activities" xmlns:sads="http://schemas.microsoft.com/netfx/2010/xaml/activities/debugger" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib" xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=mscorlib" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <TextExpression.NamespacesForImplementation>
    <sco:Collection x:TypeArguments="x:String">
      <x:String>System</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Text</x:String>
      <x:String>JTL.Tax1040.BusinessObject</x:String>
      <x:String>JTL.Tax1040.Core.Object</x:String>
      <x:String>JTL.Tax1040.Core.Process</x:String>
    </sco:Collection>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <sco:Collection x:TypeArguments="AssemblyReference">
      <AssemblyReference>Microsoft.Activities.Extensions</AssemblyReference>
      <AssemblyReference>Microsoft.CSharp</AssemblyReference>
      <AssemblyReference>Newtonsoft.Json</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>System.Configuration</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>System.ServiceModel.Activities</AssemblyReference>
      <AssemblyReference>System.Web</AssemblyReference>
      <AssemblyReference>System.Workflow.Activities</AssemblyReference>
      <AssemblyReference>System.Workflow.ComponentModel</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>JTL.Tax1040.Core.Object</AssemblyReference>
      <AssemblyReference>JTL.Tax1040.Core.Process</AssemblyReference>
      <AssemblyReference>JTL.Tax1040.DataAccess</AssemblyReference>
      <AssemblyReference>JTL.Tax1040.BusinessObject</AssemblyReference>
      <AssemblyReference>JTL.Tax1040.PDFBinding</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>JTL.Tax1040.BusinessLogic</AssemblyReference>
    </sco:Collection>
  </TextExpression.ReferencesForImplementation>
  <local:FW2Calculation.Implementation>
    <Sequence DisplayName="FW2Calculation">
      <Sequence.Variables>
        <Variable x:TypeArguments="jtb:W2" Name="W2" />
        <Variable x:TypeArguments="jtco:EmploymentType" Name="EmployerType" />
      </Sequence.Variables>
      <local:FW2BusinessRuleValidation>
        <local:FW2BusinessRuleValidation.ErrorMessages>
          <InArgument x:TypeArguments="jtco:ErrorMessages">
            <mca:CSharpValue x:TypeArguments="jtco:ErrorMessages">ErrorMessages</mca:CSharpValue>
          </InArgument>
        </local:FW2BusinessRuleValidation.ErrorMessages>
        <local:FW2BusinessRuleValidation.Tax1040Object>
          <InOutArgument x:TypeArguments="jtb:Tax1040">
            <mca:CSharpReference x:TypeArguments="jtb:Tax1040">Tax1040Object</mca:CSharpReference>
          </InOutArgument>
        </local:FW2BusinessRuleValidation.Tax1040Object>
      </local:FW2BusinessRuleValidation>
      <Sequence DisplayName="W2">
        <If DisplayName="If Tax1040ObjectCheck">
          <If.Condition>
            <InArgument x:TypeArguments="x:Boolean">
              <mca:CSharpValue x:TypeArguments="x:Boolean">((Tax1040Object != null) &amp;&amp; (Tax1040Object.Income != null))</mca:CSharpValue>
            </InArgument>
          </If.Condition>
          <If.Then>
            <If DisplayName="If W2Check">
              <If.Condition>
                <InArgument x:TypeArguments="x:Boolean">
                  <mca:CSharpValue x:TypeArguments="x:Boolean">((Tax1040Object.Income.W2Wages != null) &amp;&amp; (Tax1040Object.Income.W2Wages.Any()))</mca:CSharpValue>
                </InArgument>
              </If.Condition>
              <If.Then>
                <Sequence DisplayName="FW2">
                  <ForEach x:TypeArguments="jtb:W2" DisplayName="ForEach&lt;W2&gt;">
                    <ForEach.Values>
                      <InArgument x:TypeArguments="scg:IEnumerable(jtb:W2)">
                        <mca:CSharpValue x:TypeArguments="scg:IEnumerable(jtb:W2)">Tax1040Object.Income.W2Wages</mca:CSharpValue>
                      </InArgument>
                    </ForEach.Values>
                    <ActivityAction x:TypeArguments="jtb:W2">
                      <ActivityAction.Argument>
                        <DelegateInArgument x:TypeArguments="jtb:W2" Name="W2" />
                      </ActivityAction.Argument>
                      <Sequence DisplayName="W2">
                        <If DisplayName="If W2 Condition Check">
                          <If.Condition>
                            <InArgument x:TypeArguments="x:Boolean">
                              <mca:CSharpValue x:TypeArguments="x:Boolean" xml:space="preserve">((W2.EmploymentType != (EmploymentType.HouseholdEmployeeWages)) &amp;&amp;  (W2.EmploymentType != EmploymentType.TaxableScholarshipIncome))</mca:CSharpValue>
                            </InArgument>
                          </If.Condition>
                          <If.Then>
                            <Sequence DisplayName="Wages &amp; Non Qualified Summation">
                              <Assign>
                                <Assign.To>
                                  <OutArgument x:TypeArguments="x:Double">
                                    <mca:CSharpReference x:TypeArguments="x:Double">TotalWages</mca:CSharpReference>
                                  </OutArgument>
                                </Assign.To>
                                <Assign.Value>
                                  <InArgument x:TypeArguments="x:Double">
                                    <mca:CSharpValue x:TypeArguments="x:Double">(W2.WagesAmount.HasValue ?W2.WagesAmount.Value:0) + TotalWages</mca:CSharpValue>
                                  </InArgument>
                                </Assign.Value>
                              </Assign>
                              <Assign>
                                <Assign.To>
                                  <OutArgument x:TypeArguments="x:Double">
                                    <mca:CSharpReference x:TypeArguments="x:Double">NonQualifiedPlansAmount</mca:CSharpReference>
                                  </OutArgument>
                                </Assign.To>
                                <Assign.Value>
                                  <InArgument x:TypeArguments="x:Double">
                                    <mca:CSharpValue x:TypeArguments="x:Double">(W2.NonQualifiedPlansAmount.HasValue ? W2.NonQualifiedPlansAmount.Value : 0) + NonQualifiedPlansAmount</mca:CSharpValue>
                                  </InArgument>
                                </Assign.Value>
                              </Assign>
                            </Sequence>
                          </If.Then>
                        </If>
                        <If DisplayName="If  W2 House hold Employee wages">
                          <If.Condition>
                            <InArgument x:TypeArguments="x:Boolean">
                              <mca:CSharpValue x:TypeArguments="x:Boolean">W2.EmploymentType == EmploymentType.HouseholdEmployeeWages</mca:CSharpValue>
                            </InArgument>
                          </If.Condition>
                          <If.Then>
                            <Sequence DisplayName="House hold Employee wages">
                              <If DisplayName="If Employer Check">
                                <If.Condition>
                                  <InArgument x:TypeArguments="x:Boolean">
                                    <mca:CSharpValue x:TypeArguments="x:Boolean">W2.Employer !=null</mca:CSharpValue>
                                  </InArgument>
                                </If.Condition>
                                <If.Then>
                                  <Sequence DisplayName="HSH">
                                    <Assign>
                                      <Assign.To>
                                        <OutArgument x:TypeArguments="x:Double">
                                          <mca:CSharpReference x:TypeArguments="x:Double">TotalWages</mca:CSharpReference>
                                        </OutArgument>
                                      </Assign.To>
                                      <Assign.Value>
                                        <InArgument x:TypeArguments="x:Double">
                                          <mca:CSharpValue x:TypeArguments="x:Double">(W2.Employer.HouseholdEmployeeWages.HasValue ?W2.Employer.HouseholdEmployeeWages.Value:0) + TotalWages</mca:CSharpValue>
                                        </InArgument>
                                      </Assign.Value>
                                    </Assign>
                                    <If DisplayName="If  PrefixTotalWages (HSH)">
                                      <If.Condition>
                                        <InArgument x:TypeArguments="x:Boolean">
                                          <mca:CSharpValue x:TypeArguments="x:Boolean">Utilities.IsStringEmpty(PrefixTotalWages)</mca:CSharpValue>
                                        </InArgument>
                                      </If.Condition>
                                      <If.Then>
                                        <Assign>
                                          <Assign.To>
                                            <OutArgument x:TypeArguments="x:String">
                                              <mca:CSharpReference x:TypeArguments="x:String">PrefixTotalWages</mca:CSharpReference>
                                            </OutArgument>
                                          </Assign.To>
                                          <Assign.Value>
                                            <InArgument x:TypeArguments="x:String">HSH</InArgument>
                                          </Assign.Value>
                                        </Assign>
                                      </If.Then>
                                      <If.Else>
                                        <If DisplayName="If Contain (HSH)">
                                          <If.Condition>
                                            <InArgument x:TypeArguments="x:Boolean">
                                              <mca:CSharpValue x:TypeArguments="x:Boolean">!PrefixTotalWages.Contains("HSH")</mca:CSharpValue>
                                            </InArgument>
                                          </If.Condition>
                                          <If.Then>
                                            <Assign>
                                              <Assign.To>
                                                <OutArgument x:TypeArguments="x:String">
                                                  <mca:CSharpReference x:TypeArguments="x:String">PrefixTotalWages</mca:CSharpReference>
                                                </OutArgument>
                                              </Assign.To>
                                              <Assign.Value>
                                                <InArgument x:TypeArguments="x:String">
                                                  <mca:CSharpValue x:TypeArguments="x:String">PrefixTotalWages + ", HSH"</mca:CSharpValue>
                                                </InArgument>
                                              </Assign.Value>
                                            </Assign>
                                          </If.Then>
                                        </If>
                                      </If.Else>
                                    </If>
                                  </Sequence>
                                </If.Then>
                              </If>
                            </Sequence>
                          </If.Then>
                        </If>
                        <If DisplayName="If W2  Taxable ScholarshipIncome">
                          <If.Condition>
                            <InArgument x:TypeArguments="x:Boolean">
                              <mca:CSharpValue x:TypeArguments="x:Boolean">W2.EmploymentType == EmploymentType.TaxableScholarshipIncome</mca:CSharpValue>
                            </InArgument>
                          </If.Condition>
                          <If.Then>
                            <Sequence DisplayName="Taxable ScholarshipIncome">
                              <If DisplayName="If Employer Check">
                                <If.Condition>
                                  <InArgument x:TypeArguments="x:Boolean">
                                    <mca:CSharpValue x:TypeArguments="x:Boolean">W2.Employer !=null</mca:CSharpValue>
                                  </InArgument>
                                </If.Condition>
                                <If.Then>
                                  <Sequence DisplayName="SCH">
                                    <Assign>
                                      <Assign.To>
                                        <OutArgument x:TypeArguments="x:Double">
                                          <mca:CSharpReference x:TypeArguments="x:Double">TaxableScholarshipAmount</mca:CSharpReference>
                                        </OutArgument>
                                      </Assign.To>
                                      <Assign.Value>
                                        <InArgument x:TypeArguments="x:Double">
                                          <mca:CSharpValue x:TypeArguments="x:Double">(W2.Employer.TaxableScholarshipAmount.HasValue ? W2.Employer.TaxableScholarshipAmount.Value:0) + TaxableScholarshipAmount</mca:CSharpValue>
                                        </InArgument>
                                      </Assign.Value>
                                    </Assign>
                                    <Assign>
                                      <Assign.To>
                                        <OutArgument x:TypeArguments="x:Double">
                                          <mca:CSharpReference x:TypeArguments="x:Double">TotalWages</mca:CSharpReference>
                                        </OutArgument>
                                      </Assign.To>
                                      <Assign.Value>
                                        <InArgument x:TypeArguments="x:Double">
                                          <mca:CSharpValue x:TypeArguments="x:Double">(W2.Employer.TaxableScholarshipAmount.HasValue ? W2.Employer.TaxableScholarshipAmount.Value:0) + TotalWages</mca:CSharpValue>
                                        </InArgument>
                                      </Assign.Value>
                                    </Assign>
                                    <If DisplayName="If  PrefixTotalWages (SCH)">
                                      <If.Condition>
                                        <InArgument x:TypeArguments="x:Boolean">
                                          <mca:CSharpValue x:TypeArguments="x:Boolean">Utilities.IsStringEmpty(PrefixTotalWages)</mca:CSharpValue>
                                        </InArgument>
                                      </If.Condition>
                                      <If.Then>
                                        <Assign>
                                          <Assign.To>
                                            <OutArgument x:TypeArguments="x:String">
                                              <mca:CSharpReference x:TypeArguments="x:String">PrefixTotalWages</mca:CSharpReference>
                                            </OutArgument>
                                          </Assign.To>
                                          <Assign.Value>
                                            <InArgument x:TypeArguments="x:String">SCH</InArgument>
                                          </Assign.Value>
                                        </Assign>
                                      </If.Then>
                                      <If.Else>
                                        <If DisplayName="If Contain (SCH)">
                                          <If.Condition>
                                            <InArgument x:TypeArguments="x:Boolean">
                                              <mca:CSharpValue x:TypeArguments="x:Boolean">!PrefixTotalWages.Contains("SCH")</mca:CSharpValue>
                                            </InArgument>
                                          </If.Condition>
                                          <If.Then>
                                            <Assign>
                                              <Assign.To>
                                                <OutArgument x:TypeArguments="x:String">
                                                  <mca:CSharpReference x:TypeArguments="x:String">PrefixTotalWages</mca:CSharpReference>
                                                </OutArgument>
                                              </Assign.To>
                                              <Assign.Value>
                                                <InArgument x:TypeArguments="x:String">
                                                  <mca:CSharpValue x:TypeArguments="x:String">PrefixTotalWages + ", SCH"</mca:CSharpValue>
                                                </InArgument>
                                              </Assign.Value>
                                            </Assign>
                                          </If.Then>
                                        </If>
                                      </If.Else>
                                    </If>
                                  </Sequence>
                                </If.Then>
                              </If>
                            </Sequence>
                          </If.Then>
                        </If>
                      </Sequence>
                    </ActivityAction>
                  </ForEach>
                  <Assign>
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:Double">
                        <mca:CSharpReference x:TypeArguments="x:Double">TotalWages</mca:CSharpReference>
                      </OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:Double">
                        <mca:CSharpValue x:TypeArguments="x:Double">Math.Round(TotalWages,MidpointRounding.AwayFromZero)</mca:CSharpValue>
                      </InArgument>
                    </Assign.Value>
                  </Assign>
                </Sequence>
              </If.Then>
            </If>
          </If.Then>
        </If>
      </Sequence>
      <sads:DebugSymbol.Symbol>d1xGOlxKZWV2YW4xMDQwXEZlYXR1cmVcQ29kZVxKVEwuVGF4MTA0MC5CdXNpbmVzc0xvZ2ljXFdvcmtGbG93XEFjdGl2aXRpZXNcRlcyQ2FsY3VsYXRpb24ueGFtbEJBA8wCDgIBAUYFUScDAckCUgXKAhACAQJOC05hAwHTAkkLSWADAcoCUwfJAgwCAQNWDVaPAQIBBFoLxwIQAgENXRFdqAECAQ5hD8UCGgIBF2IRuAIbAgEruQIRxAIaAgEYZRdlgAEDAcACbBW2AiACASzBAhfBAokBAgEivAIXvAJnAgEZbReRARwDAYoCkgEX3QEcAwGmAd4BF7UCHAIBLXAdcPwBAwGLAnQbjwEmAwGVApUBHZUBlgEDAacBmQEb2wEmAwGxAeEBHeEBmAECAS7lARuzAiYCATh1HYABJgMBqwKBAR2NASYDAZYCmgEd2gEiAwGyAeYBHbICIgIBOX0jfZ8BAwG2AngjeHMDAawCiQEjiQHHAQMBoQKEASOEAYABAwGXAp0BI50BdAMBswGhASHYASwDAb0B6QEj6QF0AgE67QEhsAIsAgFEogEjrQEsAwH1Aa4BI9cBKAMBvgHuASP5ASwDAZEB+gEjhQIsAgF8hgIjrwIoAgFFqgEpqgHNAQMBgAKlASmlAXkDAfYBsQEpsQGRAQMBvwG1ASe+ATADAekBwQEn1QEsAwHJAfYBKfYB4AEDAZwB8QEp8QGHAQMBkgGCAimCAtIBAwGHAf0BKf0BeQIBfYkCKYkCkQECAUaNAieWAjACAXCZAietAiwCAVC8AVK8AVUDAfQBuAEtuAGDAQMB6gHEAS3EAY0BAwHKAcgBK9MBNAMB1AGUAlKUAlUCAXuQAi2QAoMBAgFxnAItnAKNAQIBUaACK6sCNAIBW9ABMdABiQEDAd8BywExywGHAQMB1QGoAjGoAokBAgFmowIxowKHAQIBXA==</sads:DebugSymbol.Symbol>
    </Sequence>
  </local:FW2Calculation.Implementation>
</local:FW2Calculation>