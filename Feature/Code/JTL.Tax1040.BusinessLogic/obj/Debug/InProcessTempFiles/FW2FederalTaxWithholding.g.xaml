<?xml version="1.0" encoding="utf-8"?>
<twa:FW2FederalTaxWithholding xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:jtb="clr-namespace:JTL.Tax1040.BusinessObject;assembly=JTL.Tax1040.BusinessObject" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:mca="clr-namespace:Microsoft.CSharp.Activities;assembly=System.Activities" xmlns:sads="http://schemas.microsoft.com/netfx/2010/xaml/activities/debugger" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib" xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=mscorlib" xmlns:twa="clr-namespace:Tax1040WorkFlow.WorkFlow.Activities;assembly=JTL.Tax1040.BusinessLogic" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <TextExpression.NamespacesForImplementation>
    <sco:Collection x:TypeArguments="x:String">
      <x:String>System</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Text</x:String>
      <x:String>JTL.Tax1040.BusinessObject</x:String>
    </sco:Collection>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <sco:Collection x:TypeArguments="AssemblyReference">
      <AssemblyReference>Microsoft.Activities.Extensions</AssemblyReference>
      <AssemblyReference>Microsoft.CSharp</AssemblyReference>
      <AssemblyReference>Newtonsoft.Json</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>System.Configuration</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>System.ServiceModel.Activities</AssemblyReference>
      <AssemblyReference>System.Web</AssemblyReference>
      <AssemblyReference>System.Workflow.Activities</AssemblyReference>
      <AssemblyReference>System.Workflow.ComponentModel</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>JTL.Tax1040.Core.Object</AssemblyReference>
      <AssemblyReference>JTL.Tax1040.Core.Process</AssemblyReference>
      <AssemblyReference>JTL.Tax1040.DataAccess</AssemblyReference>
      <AssemblyReference>JTL.Tax1040.BusinessObject</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>JTL.Tax1040.BusinessLogic</AssemblyReference>
    </sco:Collection>
  </TextExpression.ReferencesForImplementation>
  <twa:FW2FederalTaxWithholding.Implementation>
    <Sequence DisplayName="W2FederalTaxWithhold Calculation">
      <Sequence.Variables>
        <Variable x:TypeArguments="jtb:W2" Name="W2" />
        <Variable x:TypeArguments="x:Double" Name="TotalWagesAmount" />
      </Sequence.Variables>
      <If DisplayName="If Tax1040ObjectCheck">
        <If.Condition>
          <InArgument x:TypeArguments="x:Boolean">
            <mca:CSharpValue x:TypeArguments="x:Boolean">((Tax1040Object != null) &amp;&amp; (Tax1040Object.Income != null))</mca:CSharpValue>
          </InArgument>
        </If.Condition>
        <If.Then>
          <Sequence DisplayName="W2 FederalWithheldCheck">
            <If DisplayName="If W2Check">
              <If.Condition>
                <InArgument x:TypeArguments="x:Boolean">
                  <mca:CSharpValue x:TypeArguments="x:Boolean">(Tax1040Object.Income.W2Wages != null) &amp;&amp; (Tax1040Object.Income.W2Wages.Any())</mca:CSharpValue>
                </InArgument>
              </If.Condition>
              <If.Then>
                <Sequence DisplayName="W2 FederalWithholding">
                  <ForEach x:TypeArguments="jtb:W2" DisplayName="ForEach&lt;W2&gt;">
                    <ForEach.Values>
                      <InArgument x:TypeArguments="scg:IEnumerable(jtb:W2)">
                        <mca:CSharpValue x:TypeArguments="scg:IEnumerable(jtb:W2)">Tax1040Object.Income.W2Wages</mca:CSharpValue>
                      </InArgument>
                    </ForEach.Values>
                    <ActivityAction x:TypeArguments="jtb:W2">
                      <ActivityAction.Argument>
                        <DelegateInArgument x:TypeArguments="jtb:W2" Name="W2" />
                      </ActivityAction.Argument>
                      <If DisplayName="FW2FederalTaxWithholdingAmountTotal">
                        <If.Condition>
                          <InArgument x:TypeArguments="x:Boolean">
                            <mca:CSharpValue x:TypeArguments="x:Boolean">W2.FederalTaxWithholdingAmount.HasValue &amp;&amp; W2.FederalTaxWithholdingAmount.Value != 0.0D</mca:CSharpValue>
                          </InArgument>
                        </If.Condition>
                        <If.Then>
                          <Assign>
                            <Assign.To>
                              <OutArgument x:TypeArguments="x:Double">
                                <mca:CSharpReference x:TypeArguments="x:Double">TotalW2FederalTaxWithhold</mca:CSharpReference>
                              </OutArgument>
                            </Assign.To>
                            <Assign.Value>
                              <InArgument x:TypeArguments="x:Double">
                                <mca:CSharpValue x:TypeArguments="x:Double">W2.FederalTaxWithholdingAmount.Value + TotalW2FederalTaxWithhold</mca:CSharpValue>
                              </InArgument>
                            </Assign.Value>
                          </Assign>
                        </If.Then>
                      </If>
                    </ActivityAction>
                  </ForEach>
                  <Assign>
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:Double">
                        <mca:CSharpReference x:TypeArguments="x:Double">TotalW2FederalTaxWithhold</mca:CSharpReference>
                      </OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:Double">
                        <mca:CSharpValue x:TypeArguments="x:Double">Math.Round(TotalW2FederalTaxWithhold,MidpointRounding.AwayFromZero)</mca:CSharpValue>
                      </InArgument>
                    </Assign.Value>
                  </Assign>
                </Sequence>
              </If.Then>
            </If>
          </Sequence>
        </If.Then>
      </If>
      <sads:DebugSymbol.Symbol>d44BRTpcVGF4R2FyZGVuc1xKZWV2YW4xMDQwXFBPQ1xXb3JrRmxvd1xUYXgxMDQwV0ZSdWxlc2FuZENhbGN1bGF0aW9uXEpUTC5UYXgxMDQwLkJ1c2luZXNzTG9naWNcV29ya0Zsb3dcQWN0aXZpdGllc1xGVzJGZWRlcmFsVGF4V2l0aGhvbGRpbmcueGFtbBE4A4EBDgIBAT0FfwoCAQJAC0CNAQIBA0QJfRQCAQhFC3wQAgEJSBFIpgECAQpMD3oaAgEPTRFtGwIBG24ReRoCARBQF1CAAQIBMFcVaxoCARx2F3aYAQIBFnEXcXYCARFaG1q5AQIBHV4ZaSICASNmH2adAQIBKmEfYX4CASQ=</sads:DebugSymbol.Symbol>
    </Sequence>
  </twa:FW2FederalTaxWithholding.Implementation>
</twa:FW2FederalTaxWithholding>