<?xml version="1.0" encoding="utf-8"?>
<twa:FSSAFederalTaxWithHolding xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:jtb="clr-namespace:JTL.Tax1040.BusinessObject;assembly=JTL.Tax1040.BusinessObject" xmlns:jtco="clr-namespace:JTL.Tax1040.Core.Object;assembly=JTL.Tax1040.Core.Object" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:mca="clr-namespace:Microsoft.CSharp.Activities;assembly=System.Activities" xmlns:sads="http://schemas.microsoft.com/netfx/2010/xaml/activities/debugger" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib" xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=mscorlib" xmlns:twa="clr-namespace:Tax1040WorkFlow.WorkFlow.Activities;assembly=JTL.Tax1040.BusinessLogic" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <TextExpression.NamespacesForImplementation>
    <sco:Collection x:TypeArguments="x:String">
      <x:String>System</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Text</x:String>
      <x:String>JTL.Tax1040.BusinessObject</x:String>
    </sco:Collection>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <sco:Collection x:TypeArguments="AssemblyReference">
      <AssemblyReference>Microsoft.Activities.Extensions</AssemblyReference>
      <AssemblyReference>Microsoft.CSharp</AssemblyReference>
      <AssemblyReference>Newtonsoft.Json</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>System.Configuration</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>System.ServiceModel.Activities</AssemblyReference>
      <AssemblyReference>System.Web</AssemblyReference>
      <AssemblyReference>System.Workflow.Activities</AssemblyReference>
      <AssemblyReference>System.Workflow.ComponentModel</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>JTL.Tax1040.Core.Object</AssemblyReference>
      <AssemblyReference>JTL.Tax1040.Core.Process</AssemblyReference>
      <AssemblyReference>JTL.Tax1040.DataAccess</AssemblyReference>
      <AssemblyReference>JTL.Tax1040.BusinessObject</AssemblyReference>
      <AssemblyReference>JTL.Tax1040.PDFBinding</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>JTL.Tax1040.BusinessLogic</AssemblyReference>
    </sco:Collection>
  </TextExpression.ReferencesForImplementation>
  <twa:FSSAFederalTaxWithHolding.Implementation>
    <Sequence DisplayName="SSAFederalTaxWithhold">
      <If DisplayName="If Tax1040ObjectCheck">
        <If.Condition>
          <InArgument x:TypeArguments="x:Boolean">
            <mca:CSharpValue x:TypeArguments="x:Boolean">((Tax1040Object != null) &amp;&amp; (Tax1040Object.Income != null) &amp;&amp; (Tax1040Object.Income.OtherIncome != null))</mca:CSharpValue>
          </InArgument>
        </If.Condition>
        <If.Then>
          <Sequence DisplayName="SSACheck">
            <If DisplayName="If SSB Check">
              <If.Condition>
                <InArgument x:TypeArguments="x:Boolean">
                  <mca:CSharpValue x:TypeArguments="x:Boolean">(Tax1040Object.Income.OtherIncome.SSB != null)</mca:CSharpValue>
                </InArgument>
              </If.Condition>
              <If.Then>
                <If DisplayName=" If - Primary TaxPayer Null Check">
                  <If.Condition>
                    <InArgument x:TypeArguments="x:Boolean">
                      <mca:CSharpValue x:TypeArguments="x:Boolean">(Tax1040Object.PersonalDetails != null) &amp;&amp; (Tax1040Object.PersonalDetails.PrimaryTaxPayer != null)</mca:CSharpValue>
                    </InArgument>
                  </If.Condition>
                  <If.Then>
                    <Switch x:TypeArguments="jtco:FilingStatus">
                      <Switch.Expression>
                        <InArgument x:TypeArguments="jtco:FilingStatus">
                          <mca:CSharpValue x:TypeArguments="jtco:FilingStatus">Tax1040Object.PersonalDetails.PrimaryTaxPayer.FilingStatus</mca:CSharpValue>
                        </InArgument>
                      </Switch.Expression>
                      <If x:Key="Single" DisplayName="FSSBFederalTaxWithHoldingAmount Check for PrimaryTaxPayer">
                        <If.Condition>
                          <InArgument x:TypeArguments="x:Boolean">
                            <mca:CSharpValue x:TypeArguments="x:Boolean">Tax1040Object.Income.OtherIncome.SSB.TaxPayerFederalTaxWithheld != null</mca:CSharpValue>
                          </InArgument>
                        </If.Condition>
                        <If.Then>
                          <Sequence>
                            <If>
                              <If.Condition>
                                <InArgument x:TypeArguments="x:Boolean">
                                  <mca:CSharpValue x:TypeArguments="x:Boolean">Tax1040Object.Income.OtherIncome.SSB.TaxPayerFederalTaxWithheld !=null</mca:CSharpValue>
                                </InArgument>
                              </If.Condition>
                              <If.Then>
                                <Assign>
                                  <Assign.To>
                                    <OutArgument x:TypeArguments="x:Double">
                                      <mca:CSharpReference x:TypeArguments="x:Double">TotalSSBWithHolding</mca:CSharpReference>
                                    </OutArgument>
                                  </Assign.To>
                                  <Assign.Value>
                                    <InArgument x:TypeArguments="x:Double">
                                      <mca:CSharpValue x:TypeArguments="x:Double">Tax1040Object.Income.OtherIncome.SSB.TaxPayerFederalTaxWithheld.HasValue ? Tax1040Object.Income.OtherIncome.SSB.TaxPayerFederalTaxWithheld.Value:0</mca:CSharpValue>
                                    </InArgument>
                                  </Assign.Value>
                                </Assign>
                              </If.Then>
                            </If>
                          </Sequence>
                        </If.Then>
                      </If>
                      <Sequence x:Key="MarriedFilingJointly" DisplayName="SSB FederalWithholding">
                        <If DisplayName="FSSBFederalTaxWithHoldingAmount Check For Primary TaxPayer">
                          <If.Condition>
                            <InArgument x:TypeArguments="x:Boolean">
                              <mca:CSharpValue x:TypeArguments="x:Boolean">Tax1040Object.Income.OtherIncome.SSB.TaxPayerFederalTaxWithheld != null</mca:CSharpValue>
                            </InArgument>
                          </If.Condition>
                          <If.Then>
                            <Sequence>
                              <If>
                                <If.Condition>
                                  <InArgument x:TypeArguments="x:Boolean">
                                    <mca:CSharpValue x:TypeArguments="x:Boolean">Tax1040Object.Income.OtherIncome.SSB.TaxPayerFederalTaxWithheld !=null</mca:CSharpValue>
                                  </InArgument>
                                </If.Condition>
                                <If.Then>
                                  <Assign>
                                    <Assign.To>
                                      <OutArgument x:TypeArguments="x:Double">
                                        <mca:CSharpReference x:TypeArguments="x:Double">TotalSSBWithHolding</mca:CSharpReference>
                                      </OutArgument>
                                    </Assign.To>
                                    <Assign.Value>
                                      <InArgument x:TypeArguments="x:Double">
                                        <mca:CSharpValue x:TypeArguments="x:Double">Tax1040Object.Income.OtherIncome.SSB.TaxPayerFederalTaxWithheld.HasValue ? Tax1040Object.Income.OtherIncome.SSB.TaxPayerFederalTaxWithheld.Value:0</mca:CSharpValue>
                                      </InArgument>
                                    </Assign.Value>
                                  </Assign>
                                </If.Then>
                              </If>
                            </Sequence>
                          </If.Then>
                        </If>
                        <If DisplayName="FSSBFederalTaxWithHoldingAmount Check For Spouse">
                          <If.Condition>
                            <InArgument x:TypeArguments="x:Boolean">
                              <mca:CSharpValue x:TypeArguments="x:Boolean">Tax1040Object.Income.OtherIncome.SSB.SpouseFederalTaxWithheld != null</mca:CSharpValue>
                            </InArgument>
                          </If.Condition>
                          <If.Then>
                            <Assign>
                              <Assign.To>
                                <OutArgument x:TypeArguments="x:Double">
                                  <mca:CSharpReference x:TypeArguments="x:Double">TotalSSBWithHolding</mca:CSharpReference>
                                </OutArgument>
                              </Assign.To>
                              <Assign.Value>
                                <InArgument x:TypeArguments="x:Double">
                                  <mca:CSharpValue x:TypeArguments="x:Double">TotalSSBWithHolding +(Tax1040Object.Income.OtherIncome.SSB.TaxPayerFederalTaxWithheld.HasValue ? Tax1040Object.Income.OtherIncome.SSB.TaxPayerFederalTaxWithheld.Value:0)</mca:CSharpValue>
                                </InArgument>
                              </Assign.Value>
                            </Assign>
                          </If.Then>
                        </If>
                      </Sequence>
                      <x:Null x:Key="HeadofHousehold" />
                      <x:Null x:Key="MarriedFilingSeperately" />
                      <x:Null x:Key="Widower" />
                    </Switch>
                  </If.Then>
                </If>
              </If.Then>
            </If>
            <Assign>
              <Assign.To>
                <OutArgument x:TypeArguments="x:Double">
                  <mca:CSharpReference x:TypeArguments="x:Double">TotalSSBWithHolding</mca:CSharpReference>
                </OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:Double">
                  <mca:CSharpValue x:TypeArguments="x:Double">Math.Round(TotalSSBWithHolding,MidpointRounding.AwayFromZero)</mca:CSharpValue>
                </InArgument>
              </Assign.Value>
            </Assign>
          </Sequence>
        </If.Then>
      </If>
      <sads:DebugSymbol.Symbol>d39FOlxUYXgxMDQwRVpcVGF4MTA0MExhdGVzdFxKZWV2YW4xMDQwXEZlYXR1cmVcQ29kZVxKVEwuVGF4MTA0MC5CdXNpbmVzc0xvZ2ljXFdvcmtGbG93XEFjdGl2aXRpZXNcRlNTQUZlZGVyYWxUYXhXaXRoSG9sZGluZy54YW1sIzoDxgEOAgEBOwXEAQoCAQI+Cz7DAQIBA0IJwgEUAgEGQwu1ARACAQ62AQvBARQCAQdGEUZ+AgEPSg+zARQCARK+ARG+AYwBAgELuQERuQFqAgEITRVNvgECARNRE7EBHAIBFlQZVJoBAgEXVxV2GgIBNncVrQEgAgEaWhtaoQECATdeGXQkAgE6eBeXARwCASaYAResARwCARtfG3MgAgE7ex17owECASd/G5UBJgIBKpsBHZsBoQECARyfARuqASQCAR9iIWKmAQIBPGYfcSgCAT+AAR2UASICASunASGnAYgCAgEjogEhogF6AgEgbiVu9QECAUNpJWl+AgFAgwEjgwGoAQIBLIcBIZIBKgIBL48BJ48B9wECATOKASeKAYABAgEw</sads:DebugSymbol.Symbol>
    </Sequence>
  </twa:FSSAFederalTaxWithHolding.Implementation>
</twa:FSSAFederalTaxWithHolding>