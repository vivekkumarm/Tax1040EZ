<?xml version="1.0" encoding="utf-8"?>
<local:Form1040EZSSBEligiblity xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:jtb="clr-namespace:JTL.Tax1040.BusinessObject;assembly=JTL.Tax1040.BusinessObject" xmlns:jtco="clr-namespace:JTL.Tax1040.Core.Object;assembly=JTL.Tax1040.Core.Object" xmlns:local="clr-namespace:Tax1040WorkFlow.WorkFlow.Activities;assembly=JTL.Tax1040.BusinessLogic" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:mca="clr-namespace:Microsoft.CSharp.Activities;assembly=System.Activities" xmlns:sads="http://schemas.microsoft.com/netfx/2010/xaml/activities/debugger" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib" xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=mscorlib" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <TextExpression.NamespacesForImplementation>
    <sco:Collection x:TypeArguments="x:String">
      <x:String>System</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Text</x:String>
      <x:String>JTL.Tax1040.BusinessObject</x:String>
      <x:String>JTL.Tax1040.Core.Object</x:String>
    </sco:Collection>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <sco:Collection x:TypeArguments="AssemblyReference">
      <AssemblyReference>Microsoft.Activities.Extensions</AssemblyReference>
      <AssemblyReference>Microsoft.CSharp</AssemblyReference>
      <AssemblyReference>Newtonsoft.Json</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>System.Configuration</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>System.ServiceModel.Activities</AssemblyReference>
      <AssemblyReference>System.Web</AssemblyReference>
      <AssemblyReference>System.Workflow.Activities</AssemblyReference>
      <AssemblyReference>System.Workflow.ComponentModel</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>JTL.Tax1040.Core.Object</AssemblyReference>
      <AssemblyReference>JTL.Tax1040.Core.Process</AssemblyReference>
      <AssemblyReference>JTL.Tax1040.DataAccess</AssemblyReference>
      <AssemblyReference>JTL.Tax1040.BusinessObject</AssemblyReference>
      <AssemblyReference>JTL.Tax1040.PDFBinding</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>JTL.Tax1040.BusinessLogic</AssemblyReference>
    </sco:Collection>
  </TextExpression.ReferencesForImplementation>
  <local:Form1040EZSSBEligiblity.Implementation>
    <Sequence DisplayName="SSBEligiblity Calculation">
      <Sequence.Variables>
        <Variable x:TypeArguments="jtco:ErrorMessage" Name="ErrorMessage" />
        <Variable x:TypeArguments="scg:List(jtco:ErrorMessage)" Name="ErrorMessageList">
          <Variable.Default>
            <mca:CSharpValue x:TypeArguments="scg:List(jtco:ErrorMessage)">Tax1040Object.ErrorMessages</mca:CSharpValue>
          </Variable.Default>
        </Variable>
        <Variable x:TypeArguments="x:Double" Name="SSA" />
        <Variable x:TypeArguments="x:Double" Name="RRB" />
        <Variable x:TypeArguments="x:Double" Default="25000" Name="SingleLimit" />
        <Variable x:TypeArguments="x:Double" Default="32000" Name="MFJLimit" />
      </Sequence.Variables>
      <If DisplayName="If Tax1040ObjectCheck">
        <If.Condition>
          <InArgument x:TypeArguments="x:Boolean">
            <mca:CSharpValue x:TypeArguments="x:Boolean">Tax1040Object != null &amp;&amp; Tax1040Object.Income!=null &amp;&amp; Tax1040Object.Income.OtherIncome !=null</mca:CSharpValue>
          </InArgument>
        </If.Condition>
        <If.Then>
          <Sequence DisplayName="SSB EligibilityCheck">
            <Sequence DisplayName="RRB &amp; SSB Check">
              <Sequence DisplayName="SocialSecurityBenefits">
                <local:F1099SSBBusinessValidationRule>
                  <local:F1099SSBBusinessValidationRule.ErrorMessages>
                    <InArgument x:TypeArguments="jtco:ErrorMessages">
                      <mca:CSharpValue x:TypeArguments="jtco:ErrorMessages">ErrorMessages</mca:CSharpValue>
                    </InArgument>
                  </local:F1099SSBBusinessValidationRule.ErrorMessages>
                  <local:F1099SSBBusinessValidationRule.Tax1040Object>
                    <InOutArgument x:TypeArguments="jtb:Tax1040">
                      <mca:CSharpReference x:TypeArguments="jtb:Tax1040">Tax1040Object</mca:CSharpReference>
                    </InOutArgument>
                  </local:F1099SSBBusinessValidationRule.Tax1040Object>
                </local:F1099SSBBusinessValidationRule>
                <If DisplayName="If  SocialSecurityBenefit Check">
                  <If.Condition>
                    <InArgument x:TypeArguments="x:Boolean">
                      <mca:CSharpValue x:TypeArguments="x:Boolean">((Tax1040Object.Income.OtherIncome.SSB != null))</mca:CSharpValue>
                    </InArgument>
                  </If.Condition>
                  <If.Then>
                    <If DisplayName=" If - Primary TaxPayer Null Check">
                      <If.Condition>
                        <InArgument x:TypeArguments="x:Boolean">
                          <mca:CSharpValue x:TypeArguments="x:Boolean">(Tax1040Object.PersonalDetails != null) &amp;&amp; (Tax1040Object.PersonalDetails.PrimaryTaxPayer != null)</mca:CSharpValue>
                        </InArgument>
                      </If.Condition>
                      <If.Then>
                        <Switch x:TypeArguments="jtco:FilingStatus">
                          <Switch.Expression>
                            <InArgument x:TypeArguments="jtco:FilingStatus">
                              <mca:CSharpValue x:TypeArguments="jtco:FilingStatus">Tax1040Object.PersonalDetails.PrimaryTaxPayer.FilingStatus</mca:CSharpValue>
                            </InArgument>
                          </Switch.Expression>
                          <Sequence x:Key="Single">
                            <If>
                              <If.Condition>
                                <InArgument x:TypeArguments="x:Boolean">
                                  <mca:CSharpValue x:TypeArguments="x:Boolean">Tax1040Object.Income.OtherIncome.SSB.TaxpayerNetBenefits!=null</mca:CSharpValue>
                                </InArgument>
                              </If.Condition>
                              <If.Then>
                                <Assign>
                                  <Assign.To>
                                    <OutArgument x:TypeArguments="x:Double">
                                      <mca:CSharpReference x:TypeArguments="x:Double">SSA</mca:CSharpReference>
                                    </OutArgument>
                                  </Assign.To>
                                  <Assign.Value>
                                    <InArgument x:TypeArguments="x:Double">
                                      <mca:CSharpValue x:TypeArguments="x:Double">Tax1040Object.Income.OtherIncome.SSB.TaxpayerNetBenefits.Value</mca:CSharpValue>
                                    </InArgument>
                                  </Assign.Value>
                                </Assign>
                              </If.Then>
                            </If>
                          </Sequence>
                          <Sequence x:Key="MarriedFilingJointly" DisplayName="TaxpayerNetBenefits">
                            <If DisplayName="If TaxpayerNetBenefits Check">
                              <If.Condition>
                                <InArgument x:TypeArguments="x:Boolean">
                                  <mca:CSharpValue x:TypeArguments="x:Boolean">(Tax1040Object.Income.OtherIncome.SSB.TaxpayerNetBenefits!=null) || (Tax1040Object.Income.OtherIncome.SSB.SpouseNetBenefits!=null)</mca:CSharpValue>
                                </InArgument>
                              </If.Condition>
                              <If.Then>
                                <Assign>
                                  <Assign.To>
                                    <OutArgument x:TypeArguments="x:Double">
                                      <mca:CSharpReference x:TypeArguments="x:Double">SSA</mca:CSharpReference>
                                    </OutArgument>
                                  </Assign.To>
                                  <Assign.Value>
                                    <InArgument x:TypeArguments="x:Double">
                                      <mca:CSharpValue x:TypeArguments="x:Double">(Tax1040Object.Income.OtherIncome.SSB.TaxpayerNetBenefits.HasValue ? Tax1040Object.Income.OtherIncome.SSB.TaxpayerNetBenefits.Value:0 )+ (Tax1040Object.Income.OtherIncome.SSB.SpouseNetBenefits.HasValue ? Tax1040Object.Income.OtherIncome.SSB.SpouseNetBenefits.Value:0)</mca:CSharpValue>
                                    </InArgument>
                                  </Assign.Value>
                                </Assign>
                              </If.Then>
                            </If>
                          </Sequence>
                          <x:Null x:Key="HeadofHousehold" />
                          <x:Null x:Key="MarriedFilingSeperately" />
                          <x:Null x:Key="Widower" />
                        </Switch>
                      </If.Then>
                    </If>
                  </If.Then>
                </If>
              </Sequence>
              <Sequence DisplayName="RailRoardRetirementBenefits">
                <Sequence.Variables>
                  <Variable x:TypeArguments="jtb:RailroadRetirementIncome" Name="RailRoadBenefit" />
                </Sequence.Variables>
                <local:F1099RRBBusinessValidationRule>
                  <local:F1099RRBBusinessValidationRule.ErrorMessages>
                    <InArgument x:TypeArguments="jtco:ErrorMessages">
                      <mca:CSharpValue x:TypeArguments="jtco:ErrorMessages">ErrorMessages</mca:CSharpValue>
                    </InArgument>
                  </local:F1099RRBBusinessValidationRule.ErrorMessages>
                  <local:F1099RRBBusinessValidationRule.Tax1040Object>
                    <InOutArgument x:TypeArguments="jtb:Tax1040">
                      <mca:CSharpReference x:TypeArguments="jtb:Tax1040">Tax1040Object</mca:CSharpReference>
                    </InOutArgument>
                  </local:F1099RRBBusinessValidationRule.Tax1040Object>
                </local:F1099RRBBusinessValidationRule>
                <If DisplayName="If RailroadRetirementBenefit Check">
                  <If.Condition>
                    <InArgument x:TypeArguments="x:Boolean">
                      <mca:CSharpValue x:TypeArguments="x:Boolean">(Tax1040Object.Income.OtherIncome.RRB != null)</mca:CSharpValue>
                    </InArgument>
                  </If.Condition>
                  <If.Then>
                    <If DisplayName=" If - Primary TaxPayer Null Check">
                      <If.Condition>
                        <InArgument x:TypeArguments="x:Boolean">
                          <mca:CSharpValue x:TypeArguments="x:Boolean">(Tax1040Object.PersonalDetails != null) &amp;&amp; (Tax1040Object.PersonalDetails.PrimaryTaxPayer != null)</mca:CSharpValue>
                        </InArgument>
                      </If.Condition>
                      <If.Then>
                        <Switch x:TypeArguments="jtco:FilingStatus">
                          <Switch.Expression>
                            <InArgument x:TypeArguments="jtco:FilingStatus">
                              <mca:CSharpValue x:TypeArguments="jtco:FilingStatus">Tax1040Object.PersonalDetails.PrimaryTaxPayer.FilingStatus</mca:CSharpValue>
                            </InArgument>
                          </Switch.Expression>
                          <Sequence x:Key="Single">
                            <If>
                              <If.Condition>
                                <InArgument x:TypeArguments="x:Boolean">
                                  <mca:CSharpValue x:TypeArguments="x:Boolean">Tax1040Object.Income.OtherIncome.RRB.TaxpayerNetBenefits!=null</mca:CSharpValue>
                                </InArgument>
                              </If.Condition>
                              <If.Then>
                                <Assign>
                                  <Assign.To>
                                    <OutArgument x:TypeArguments="x:Double">
                                      <mca:CSharpReference x:TypeArguments="x:Double">RRB</mca:CSharpReference>
                                    </OutArgument>
                                  </Assign.To>
                                  <Assign.Value>
                                    <InArgument x:TypeArguments="x:Double">
                                      <mca:CSharpValue x:TypeArguments="x:Double">Tax1040Object.Income.OtherIncome.RRB.TaxpayerNetBenefits.Value</mca:CSharpValue>
                                    </InArgument>
                                  </Assign.Value>
                                </Assign>
                              </If.Then>
                            </If>
                          </Sequence>
                          <Sequence x:Key="MarriedFilingJointly">
                            <If>
                              <If.Condition>
                                <InArgument x:TypeArguments="x:Boolean">
                                  <mca:CSharpValue x:TypeArguments="x:Boolean">(Tax1040Object.Income.OtherIncome.RRB.TaxpayerNetBenefits!=null)|| (Tax1040Object.Income.OtherIncome.RRB.SpouseNetBenefits!=null)</mca:CSharpValue>
                                </InArgument>
                              </If.Condition>
                              <If.Then>
                                <Assign>
                                  <Assign.To>
                                    <OutArgument x:TypeArguments="x:Double">
                                      <mca:CSharpReference x:TypeArguments="x:Double">RRB</mca:CSharpReference>
                                    </OutArgument>
                                  </Assign.To>
                                  <Assign.Value>
                                    <InArgument x:TypeArguments="x:Double">
                                      <mca:CSharpValue x:TypeArguments="x:Double">(Tax1040Object.Income.OtherIncome.RRB.TaxpayerNetBenefits.HasValue ? Tax1040Object.Income.OtherIncome.RRB.TaxpayerNetBenefits.Value:0 )+( Tax1040Object.Income.OtherIncome.RRB.SpouseNetBenefits.HasValue ? Tax1040Object.Income.OtherIncome.RRB.SpouseNetBenefits.Value:0)</mca:CSharpValue>
                                    </InArgument>
                                  </Assign.Value>
                                </Assign>
                              </If.Then>
                            </If>
                          </Sequence>
                          <x:Null x:Key="HeadofHousehold" />
                          <x:Null x:Key="MarriedFilingSeperately" />
                          <x:Null x:Key="Widower" />
                        </Switch>
                      </If.Then>
                    </If>
                  </If.Then>
                </If>
              </Sequence>
            </Sequence>
            <Sequence DisplayName="SSB&amp;RRBEligibilityWorksheetCalculation">
              <Sequence DisplayName="Initialization">
                <If>
                  <If.Condition>
                    <InArgument x:TypeArguments="x:Boolean">
                      <mca:CSharpValue x:TypeArguments="x:Boolean">(Tax1040Object.F1040EZ==null)</mca:CSharpValue>
                    </InArgument>
                  </If.Condition>
                  <If.Then>
                    <Sequence>
                      <Assign>
                        <Assign.To>
                          <OutArgument x:TypeArguments="jtb:F1040EZ">
                            <mca:CSharpReference x:TypeArguments="jtb:F1040EZ">Tax1040Object.F1040EZ</mca:CSharpReference>
                          </OutArgument>
                        </Assign.To>
                        <Assign.Value>
                          <InArgument x:TypeArguments="jtb:F1040EZ">
                            <mca:CSharpValue x:TypeArguments="jtb:F1040EZ">new F1040EZ()</mca:CSharpValue>
                          </InArgument>
                        </Assign.Value>
                      </Assign>
                      <Assign>
                        <Assign.To>
                          <OutArgument x:TypeArguments="jtb:F1040EZWorkSheets">
                            <mca:CSharpReference x:TypeArguments="jtb:F1040EZWorkSheets">Tax1040Object.F1040EZ.F1040EZWorkSheets</mca:CSharpReference>
                          </OutArgument>
                        </Assign.To>
                        <Assign.Value>
                          <InArgument x:TypeArguments="jtb:F1040EZWorkSheets">
                            <mca:CSharpValue x:TypeArguments="jtb:F1040EZWorkSheets">new F1040EZWorkSheets()</mca:CSharpValue>
                          </InArgument>
                        </Assign.Value>
                      </Assign>
                      <Assign>
                        <Assign.To>
                          <OutArgument x:TypeArguments="jtb:SSBWorkSheet">
                            <mca:CSharpReference x:TypeArguments="jtb:SSBWorkSheet">Tax1040Object.F1040EZ.F1040EZWorkSheets.SSBWorkSheet</mca:CSharpReference>
                          </OutArgument>
                        </Assign.To>
                        <Assign.Value>
                          <InArgument x:TypeArguments="jtb:SSBWorkSheet">
                            <mca:CSharpValue x:TypeArguments="jtb:SSBWorkSheet">new SSBWorkSheet()</mca:CSharpValue>
                          </InArgument>
                        </Assign.Value>
                      </Assign>
                    </Sequence>
                  </If.Then>
                  <If.Else>
                    <If>
                      <If.Condition>
                        <InArgument x:TypeArguments="x:Boolean">
                          <mca:CSharpValue x:TypeArguments="x:Boolean">(Tax1040Object.F1040EZ.F1040EZWorkSheets==null)</mca:CSharpValue>
                        </InArgument>
                      </If.Condition>
                      <If.Then>
                        <Sequence>
                          <Assign>
                            <Assign.To>
                              <OutArgument x:TypeArguments="jtb:F1040EZWorkSheets">
                                <mca:CSharpReference x:TypeArguments="jtb:F1040EZWorkSheets">Tax1040Object.F1040EZ.F1040EZWorkSheets</mca:CSharpReference>
                              </OutArgument>
                            </Assign.To>
                            <Assign.Value>
                              <InArgument x:TypeArguments="jtb:F1040EZWorkSheets">
                                <mca:CSharpValue x:TypeArguments="jtb:F1040EZWorkSheets">new F1040EZWorkSheets()</mca:CSharpValue>
                              </InArgument>
                            </Assign.Value>
                          </Assign>
                          <Assign>
                            <Assign.To>
                              <OutArgument x:TypeArguments="jtb:SSBWorkSheet">
                                <mca:CSharpReference x:TypeArguments="jtb:SSBWorkSheet">Tax1040Object.F1040EZ.F1040EZWorkSheets.SSBWorkSheet</mca:CSharpReference>
                              </OutArgument>
                            </Assign.To>
                            <Assign.Value>
                              <InArgument x:TypeArguments="jtb:SSBWorkSheet">
                                <mca:CSharpValue x:TypeArguments="jtb:SSBWorkSheet">new SSBWorkSheet()</mca:CSharpValue>
                              </InArgument>
                            </Assign.Value>
                          </Assign>
                        </Sequence>
                      </If.Then>
                      <If.Else>
                        <If>
                          <If.Condition>
                            <InArgument x:TypeArguments="x:Boolean">
                              <mca:CSharpValue x:TypeArguments="x:Boolean">(Tax1040Object.F1040EZ.F1040EZWorkSheets.SSBWorkSheet==null)</mca:CSharpValue>
                            </InArgument>
                          </If.Condition>
                          <If.Then>
                            <Assign>
                              <Assign.To>
                                <OutArgument x:TypeArguments="jtb:SSBWorkSheet">
                                  <mca:CSharpReference x:TypeArguments="jtb:SSBWorkSheet">Tax1040Object.F1040EZ.F1040EZWorkSheets.SSBWorkSheet</mca:CSharpReference>
                                </OutArgument>
                              </Assign.To>
                              <Assign.Value>
                                <InArgument x:TypeArguments="jtb:SSBWorkSheet">
                                  <mca:CSharpValue x:TypeArguments="jtb:SSBWorkSheet">new SSBWorkSheet()</mca:CSharpValue>
                                </InArgument>
                              </Assign.Value>
                            </Assign>
                          </If.Then>
                        </If>
                      </If.Else>
                    </If>
                  </If.Else>
                </If>
              </Sequence>
              <Sequence DisplayName="SSB WorkSheet Calculation">
                <Assign>
                  <Assign.To>
                    <OutArgument x:TypeArguments="x:Double">
                      <mca:CSharpReference x:TypeArguments="x:Double">Tax1040Object.F1040EZ.F1040EZWorkSheets.SSBWorkSheet.Line1Amount</mca:CSharpReference>
                    </OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="x:Double">
                      <mca:CSharpValue x:TypeArguments="x:Double">Math.Round(SSA)+Math.Round(RRB)</mca:CSharpValue>
                    </InArgument>
                  </Assign.Value>
                </Assign>
                <If>
                  <If.Condition>
                    <InArgument x:TypeArguments="x:Boolean">
                      <mca:CSharpValue x:TypeArguments="x:Boolean">(Tax1040Object.F1040EZ.F1040EZWorkSheets.SSBWorkSheet.Line1Amount &gt; 0)</mca:CSharpValue>
                    </InArgument>
                  </If.Condition>
                  <If.Then>
                    <Sequence>
                      <Assign>
                        <Assign.To>
                          <OutArgument x:TypeArguments="x:Boolean">
                            <mca:CSharpReference x:TypeArguments="x:Boolean">Tax1040Object.F1040EZ.F1040EZWorkSheets.SSBWorkSheet.IsLine2SSBTaxable</mca:CSharpReference>
                          </OutArgument>
                        </Assign.To>
                        <Assign.Value>
                          <InArgument x:TypeArguments="x:Boolean">True</InArgument>
                        </Assign.Value>
                      </Assign>
                      <Assign>
                        <Assign.To>
                          <OutArgument x:TypeArguments="x:Double">
                            <mca:CSharpReference x:TypeArguments="x:Double">Tax1040Object.F1040EZ.F1040EZWorkSheets.SSBWorkSheet.Line2Amount</mca:CSharpReference>
                          </OutArgument>
                        </Assign.To>
                        <Assign.Value>
                          <InArgument x:TypeArguments="x:Double">
                            <mca:CSharpValue x:TypeArguments="x:Double">Tax1040Object.F1040EZ.F1040EZWorkSheets.SSBWorkSheet.Line1Amount/2</mca:CSharpValue>
                          </InArgument>
                        </Assign.Value>
                      </Assign>
                    </Sequence>
                  </If.Then>
                  <If.Else>
                    <Assign>
                      <Assign.To>
                        <OutArgument x:TypeArguments="x:Boolean">
                          <mca:CSharpReference x:TypeArguments="x:Boolean">Tax1040Object.F1040EZ.F1040EZWorkSheets.SSBWorkSheet.IsLine2SSBTaxable</mca:CSharpReference>
                        </OutArgument>
                      </Assign.To>
                      <Assign.Value>
                        <InArgument x:TypeArguments="x:Boolean">False</InArgument>
                      </Assign.Value>
                    </Assign>
                  </If.Else>
                </If>
                <Assign>
                  <Assign.To>
                    <OutArgument x:TypeArguments="x:Double">
                      <mca:CSharpReference x:TypeArguments="x:Double">Tax1040Object.F1040EZ.F1040EZWorkSheets.SSBWorkSheet.Line3Amount</mca:CSharpReference>
                    </OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="x:Double">
                      <mca:CSharpValue x:TypeArguments="x:Double">Tax1040Object.OutputForms.Tax1040EZPage1.TotalWages+Tax1040Object.OutputForms.Tax1040EZPage1.UnemploymentCompensation</mca:CSharpValue>
                    </InArgument>
                  </Assign.Value>
                </Assign>
                <Assign>
                  <Assign.To>
                    <OutArgument x:TypeArguments="x:Double">
                      <mca:CSharpReference x:TypeArguments="x:Double">Tax1040Object.F1040EZ.F1040EZWorkSheets.SSBWorkSheet.Line4Amount</mca:CSharpReference>
                    </OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="x:Double">
                      <mca:CSharpValue x:TypeArguments="x:Double">Tax1040Object.OutputForms.Tax1040EZPage1.TaxableInterest + Tax1040Object.OutputForms.Tax1040EZPage1.TEI</mca:CSharpValue>
                    </InArgument>
                  </Assign.Value>
                </Assign>
                <Assign>
                  <Assign.To>
                    <OutArgument x:TypeArguments="x:Double">
                      <mca:CSharpReference x:TypeArguments="x:Double">Tax1040Object.F1040EZ.F1040EZWorkSheets.SSBWorkSheet.Line5Amount</mca:CSharpReference>
                    </OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="x:Double">
                      <mca:CSharpValue x:TypeArguments="x:Double">Tax1040Object.F1040EZ.F1040EZWorkSheets.SSBWorkSheet.Line2Amount+Tax1040Object.F1040EZ.F1040EZWorkSheets.SSBWorkSheet.Line3Amount + Tax1040Object.F1040EZ.F1040EZWorkSheets.SSBWorkSheet.Line4Amount</mca:CSharpValue>
                    </InArgument>
                  </Assign.Value>
                </Assign>
              </Sequence>
              <If DisplayName="If PersonalDetails Check">
                <If.Condition>
                  <InArgument x:TypeArguments="x:Boolean">
                    <mca:CSharpValue x:TypeArguments="x:Boolean">Tax1040Object.PersonalDetails !=null</mca:CSharpValue>
                  </InArgument>
                </If.Condition>
                <If.Then>
                  <If DisplayName="If PrimaryTaxPayerCheck">
                    <If.Condition>
                      <InArgument x:TypeArguments="x:Boolean">
                        <mca:CSharpValue x:TypeArguments="x:Boolean">Tax1040Object.PersonalDetails.PrimaryTaxPayer !=null</mca:CSharpValue>
                      </InArgument>
                    </If.Condition>
                    <If.Then>
                      <Switch x:TypeArguments="jtco:FilingStatus">
                        <Switch.Expression>
                          <InArgument x:TypeArguments="jtco:FilingStatus">
                            <mca:CSharpValue x:TypeArguments="jtco:FilingStatus">Tax1040Object.PersonalDetails.PrimaryTaxPayer.FilingStatus</mca:CSharpValue>
                          </InArgument>
                        </Switch.Expression>
                        <Sequence x:Key="Single">
                          <Assign>
                            <Assign.To>
                              <OutArgument x:TypeArguments="x:Double">
                                <mca:CSharpReference x:TypeArguments="x:Double">Tax1040Object.F1040EZ.F1040EZWorkSheets.SSBWorkSheet.Line6Amount</mca:CSharpReference>
                              </OutArgument>
                            </Assign.To>
                            <Assign.Value>
                              <InArgument x:TypeArguments="x:Double">
                                <mca:CSharpValue x:TypeArguments="x:Double">SingleLimit</mca:CSharpValue>
                              </InArgument>
                            </Assign.Value>
                          </Assign>
                          <If DisplayName="If SSB FilingStatus Single Check">
                            <If.Condition>
                              <InArgument x:TypeArguments="x:Boolean">
                                <mca:CSharpValue x:TypeArguments="x:Boolean">Tax1040Object.F1040EZ.F1040EZWorkSheets.SSBWorkSheet.Line5Amount &lt;= SingleLimit</mca:CSharpValue>
                              </InArgument>
                            </If.Condition>
                            <If.Then>
                              <Assign>
                                <Assign.To>
                                  <OutArgument x:TypeArguments="x:Boolean">
                                    <mca:CSharpReference x:TypeArguments="x:Boolean">Tax1040Object.F1040EZ.F1040EZWorkSheets.SSBWorkSheet.IsLine7SSBTaxable</mca:CSharpReference>
                                  </OutArgument>
                                </Assign.To>
                                <Assign.Value>
                                  <InArgument x:TypeArguments="x:Boolean">False</InArgument>
                                </Assign.Value>
                              </Assign>
                            </If.Then>
                            <If.Else>
                              <Sequence>
                                <Assign>
                                  <Assign.To>
                                    <OutArgument x:TypeArguments="x:Boolean">
                                      <mca:CSharpReference x:TypeArguments="x:Boolean">Tax1040Object.F1040EZ.F1040EZWorkSheets.SSBWorkSheet.IsLine7SSBTaxable</mca:CSharpReference>
                                    </OutArgument>
                                  </Assign.To>
                                  <Assign.Value>
                                    <InArgument x:TypeArguments="x:Boolean">True</InArgument>
                                  </Assign.Value>
                                </Assign>
                                <Sequence DisplayName="Error Message">
                                  <Assign>
                                    <Assign.To>
                                      <OutArgument x:TypeArguments="jtco:ErrorMessage">
                                        <mca:CSharpReference x:TypeArguments="jtco:ErrorMessage">ErrorMessage</mca:CSharpReference>
                                      </OutArgument>
                                    </Assign.To>
                                    <Assign.Value>
                                      <InArgument x:TypeArguments="jtco:ErrorMessage">
                                        <mca:CSharpValue x:TypeArguments="jtco:ErrorMessage">ErrorMessages[Constants.SOCIAL_SECURITY_AND_RAILROAD_BENEFITS]</mca:CSharpValue>
                                      </InArgument>
                                    </Assign.Value>
                                  </Assign>
                                  <AddToCollection x:TypeArguments="jtco:ErrorMessage" DisplayName="AddToCollection&lt;ErrorMessage&gt;">
                                    <AddToCollection.Item>
                                      <InArgument x:TypeArguments="jtco:ErrorMessage">
                                        <mca:CSharpValue x:TypeArguments="jtco:ErrorMessage">ErrorMessage</mca:CSharpValue>
                                      </InArgument>
                                    </AddToCollection.Item>
                                    <InArgument x:TypeArguments="scg:ICollection(jtco:ErrorMessage)">
                                      <mca:CSharpValue x:TypeArguments="scg:ICollection(jtco:ErrorMessage)">ErrorMessageList</mca:CSharpValue>
                                    </InArgument>
                                  </AddToCollection>
                                </Sequence>
                              </Sequence>
                            </If.Else>
                          </If>
                        </Sequence>
                        <Sequence x:Key="MarriedFilingJointly">
                          <Assign>
                            <Assign.To>
                              <OutArgument x:TypeArguments="x:Double">
                                <mca:CSharpReference x:TypeArguments="x:Double">Tax1040Object.F1040EZ.F1040EZWorkSheets.SSBWorkSheet.Line6Amount</mca:CSharpReference>
                              </OutArgument>
                            </Assign.To>
                            <Assign.Value>
                              <InArgument x:TypeArguments="x:Double">
                                <mca:CSharpValue x:TypeArguments="x:Double">MFJLimit</mca:CSharpValue>
                              </InArgument>
                            </Assign.Value>
                          </Assign>
                          <If DisplayName="If SSB FilingStatus MFJ Check">
                            <If.Condition>
                              <InArgument x:TypeArguments="x:Boolean">
                                <mca:CSharpValue x:TypeArguments="x:Boolean">Tax1040Object.F1040EZ.F1040EZWorkSheets.SSBWorkSheet.Line5Amount &lt;= MFJLimit</mca:CSharpValue>
                              </InArgument>
                            </If.Condition>
                            <If.Then>
                              <Assign>
                                <Assign.To>
                                  <OutArgument x:TypeArguments="x:Boolean">
                                    <mca:CSharpReference x:TypeArguments="x:Boolean">Tax1040Object.F1040EZ.F1040EZWorkSheets.SSBWorkSheet.IsLine7SSBTaxable</mca:CSharpReference>
                                  </OutArgument>
                                </Assign.To>
                                <Assign.Value>
                                  <InArgument x:TypeArguments="x:Boolean">False</InArgument>
                                </Assign.Value>
                              </Assign>
                            </If.Then>
                            <If.Else>
                              <Sequence>
                                <Assign>
                                  <Assign.To>
                                    <OutArgument x:TypeArguments="x:Boolean">
                                      <mca:CSharpReference x:TypeArguments="x:Boolean">Tax1040Object.F1040EZ.F1040EZWorkSheets.SSBWorkSheet.IsLine7SSBTaxable</mca:CSharpReference>
                                    </OutArgument>
                                  </Assign.To>
                                  <Assign.Value>
                                    <InArgument x:TypeArguments="x:Boolean">True</InArgument>
                                  </Assign.Value>
                                </Assign>
                                <Sequence DisplayName="Error Message">
                                  <Assign>
                                    <Assign.To>
                                      <OutArgument x:TypeArguments="jtco:ErrorMessage">
                                        <mca:CSharpReference x:TypeArguments="jtco:ErrorMessage">ErrorMessage</mca:CSharpReference>
                                      </OutArgument>
                                    </Assign.To>
                                    <Assign.Value>
                                      <InArgument x:TypeArguments="jtco:ErrorMessage">
                                        <mca:CSharpValue x:TypeArguments="jtco:ErrorMessage">ErrorMessages[Constants.SOCIAL_SECURITY_AND_RAILROAD_BENEFITS]</mca:CSharpValue>
                                      </InArgument>
                                    </Assign.Value>
                                  </Assign>
                                  <AddToCollection x:TypeArguments="jtco:ErrorMessage" DisplayName="AddToCollection&lt;ErrorMessage&gt;">
                                    <AddToCollection.Item>
                                      <InArgument x:TypeArguments="jtco:ErrorMessage">
                                        <mca:CSharpValue x:TypeArguments="jtco:ErrorMessage">ErrorMessage</mca:CSharpValue>
                                      </InArgument>
                                    </AddToCollection.Item>
                                    <InArgument x:TypeArguments="scg:ICollection(jtco:ErrorMessage)">
                                      <mca:CSharpValue x:TypeArguments="scg:ICollection(jtco:ErrorMessage)">ErrorMessageList</mca:CSharpValue>
                                    </InArgument>
                                  </AddToCollection>
                                </Sequence>
                              </Sequence>
                            </If.Else>
                          </If>
                        </Sequence>
                        <x:Null x:Key="HeadofHousehold" />
                        <x:Null x:Key="MarriedFilingSeperately" />
                        <x:Null x:Key="Widower" />
                      </Switch>
                    </If.Then>
                  </If>
                </If.Then>
              </If>
              <Assign>
                <Assign.To>
                  <OutArgument x:TypeArguments="scg:List(jtco:ErrorMessage)">
                    <mca:CSharpReference x:TypeArguments="scg:List(jtco:ErrorMessage)">Tax1040Object.ErrorMessages</mca:CSharpReference>
                  </OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="scg:List(jtco:ErrorMessage)">
                    <mca:CSharpValue x:TypeArguments="scg:List(jtco:ErrorMessage)">ErrorMessageList</mca:CSharpValue>
                  </InArgument>
                </Assign.Value>
              </Assign>
            </Sequence>
          </Sequence>
        </If.Then>
      </If>
      <sads:DebugSymbol.Symbol>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</sads:DebugSymbol.Symbol>
    </Sequence>
  </local:Form1040EZSSBEligiblity.Implementation>
</local:Form1040EZSSBEligiblity>