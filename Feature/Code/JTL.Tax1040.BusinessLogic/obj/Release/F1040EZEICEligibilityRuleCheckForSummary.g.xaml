<?xml version="1.0" encoding="utf-8"?>
<jtbwac:F1040EZEICEligibilityRuleCheckForSummary xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:jtb="clr-namespace:JTL.Tax1040.BusinessObject;assembly=JTL.Tax1040.BusinessObject" xmlns:jtbwac="clr-namespace:JTL.Tax1040.BusinessLogic.WorkFlow.Activities.CalculationWithNoValidation;assembly=JTL.Tax1040.BusinessLogic" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:mca="clr-namespace:Microsoft.CSharp.Activities;assembly=System.Activities" xmlns:s="clr-namespace:System;assembly=mscorlib" xmlns:sads="http://schemas.microsoft.com/netfx/2010/xaml/activities/debugger" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib" xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=mscorlib" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <TextExpression.NamespacesForImplementation>
    <sco:Collection x:TypeArguments="x:String">
      <x:String>System</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Text</x:String>
      <x:String>JTL.Tax1040.BusinessObject</x:String>
    </sco:Collection>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <sco:Collection x:TypeArguments="AssemblyReference">
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>JTL.Tax1040.BusinessObject</AssemblyReference>
    </sco:Collection>
  </TextExpression.ReferencesForImplementation>
  <jtbwac:F1040EZEICEligibilityRuleCheckForSummary.Implementation>
    <Sequence DisplayName="EICEligibilityRules">
      <Sequence.Variables>
        <Variable x:TypeArguments="x:Double" Default="14339" Name="SingleAdjustedGrossIncome" />
        <Variable x:TypeArguments="x:Double" Default="19679" Name="MFJAdjustedGrossIncome" />
        <Variable x:TypeArguments="x:Boolean" Default="True" Name="IsEICEligible" />
      </Sequence.Variables>
      <If DisplayName="If Tax1040ObjectCheck">
        <If.Condition>
          <InArgument x:TypeArguments="x:Boolean">
            <mca:CSharpValue x:TypeArguments="x:Boolean">Tax1040Object !=null</mca:CSharpValue>
          </InArgument>
        </If.Condition>
        <If.Then>
          <Sequence DisplayName="EIC EligibilityCheck">
            <Sequence DisplayName="EarnedIncomeCredits">
              <If DisplayName="If EICCreditsCheck">
                <If.Condition>
                  <InArgument x:TypeArguments="x:Boolean">
                    <mca:CSharpValue x:TypeArguments="x:Boolean">Tax1040Object.Credits !=null</mca:CSharpValue>
                  </InArgument>
                </If.Condition>
                <If.Then>
                  <If DisplayName="If EICCheck">
                    <If.Condition>
                      <InArgument x:TypeArguments="x:Boolean">
                        <mca:CSharpValue x:TypeArguments="x:Boolean">Tax1040Object.Credits.EIC !=null</mca:CSharpValue>
                      </InArgument>
                    </If.Condition>
                    <If.Then>
                      <Sequence DisplayName="EIC">
                        <Sequence DisplayName="LivedInUSStatus">
                          <If DisplayName="LivedInUsStatusCheck">
                            <If.Condition>
                              <InArgument x:TypeArguments="x:Boolean">
                                <mca:CSharpValue x:TypeArguments="x:Boolean">(IsEICEligible &amp;&amp; Tax1040Object.Credits.EIC.IsInUSMorethanHalfYear.HasValue &amp;&amp; Tax1040Object.Credits.EIC.IsInUSMorethanHalfYear.Value)</mca:CSharpValue>
                              </InArgument>
                            </If.Condition>
                            <If.Else>
                              <Assign>
                                <Assign.To>
                                  <OutArgument x:TypeArguments="x:Boolean">
                                    <mca:CSharpReference x:TypeArguments="x:Boolean">IsEICEligible</mca:CSharpReference>
                                  </OutArgument>
                                </Assign.To>
                                <Assign.Value>
                                  <InArgument x:TypeArguments="x:Boolean">False</InArgument>
                                </Assign.Value>
                              </Assign>
                            </If.Else>
                          </If>
                        </Sequence>
                        <Sequence DisplayName="HasValidSSNStatus">
                          <If DisplayName="ValidSSNStatusCheck">
                            <If.Condition>
                              <InArgument x:TypeArguments="x:Boolean">
                                <mca:CSharpValue x:TypeArguments="x:Boolean">(IsEICEligible &amp;&amp; Tax1040Object.Credits.EIC.HasValidSSN.HasValue &amp;&amp; Tax1040Object.Credits.EIC.HasValidSSN.Value)</mca:CSharpValue>
                              </InArgument>
                            </If.Condition>
                            <If.Else>
                              <Assign>
                                <Assign.To>
                                  <OutArgument x:TypeArguments="x:Boolean">
                                    <mca:CSharpReference x:TypeArguments="x:Boolean">IsEICEligible</mca:CSharpReference>
                                  </OutArgument>
                                </Assign.To>
                                <Assign.Value>
                                  <InArgument x:TypeArguments="x:Boolean">False</InArgument>
                                </Assign.Value>
                              </Assign>
                            </If.Else>
                          </If>
                        </Sequence>
                        <Sequence DisplayName="QualifyingChildStatus ">
                          <If DisplayName="QualifyingChildStatusCheck">
                            <If.Condition>
                              <InArgument x:TypeArguments="x:Boolean">
                                <mca:CSharpValue x:TypeArguments="x:Boolean">Tax1040Object.Credits.EIC.HasClaimedAsQualifyingChild.HasValue &amp;&amp; Tax1040Object.Credits.EIC.HasClaimedAsQualifyingChild.Value</mca:CSharpValue>
                              </InArgument>
                            </If.Condition>
                            <If.Then>
                              <Assign>
                                <Assign.To>
                                  <OutArgument x:TypeArguments="x:Boolean">
                                    <mca:CSharpReference x:TypeArguments="x:Boolean">IsEICEligible</mca:CSharpReference>
                                  </OutArgument>
                                </Assign.To>
                                <Assign.Value>
                                  <InArgument x:TypeArguments="x:Boolean">False</InArgument>
                                </Assign.Value>
                              </Assign>
                            </If.Then>
                          </If>
                        </Sequence>
                        <Sequence DisplayName="IRSNoticeOnEICStatus">
                          <If DisplayName="IRSNoticeOnEICStatusCheck">
                            <If.Condition>
                              <InArgument x:TypeArguments="x:Boolean">
                                <mca:CSharpValue x:TypeArguments="x:Boolean">Tax1040Object.Credits.EIC.HasReceivedIRSNoticeOnEICNotEligible.HasValue &amp;&amp; Tax1040Object.Credits.EIC.HasReceivedIRSNoticeOnEICNotEligible.Value</mca:CSharpValue>
                              </InArgument>
                            </If.Condition>
                            <If.Then>
                              <Assign>
                                <Assign.To>
                                  <OutArgument x:TypeArguments="x:Boolean">
                                    <mca:CSharpReference x:TypeArguments="x:Boolean">IsEICEligible</mca:CSharpReference>
                                  </OutArgument>
                                </Assign.To>
                                <Assign.Value>
                                  <InArgument x:TypeArguments="x:Boolean">False</InArgument>
                                </Assign.Value>
                              </Assign>
                            </If.Then>
                          </If>
                        </Sequence>
                      </Sequence>
                    </If.Then>
                    <If.Else>
                      <Assign>
                        <Assign.To>
                          <OutArgument x:TypeArguments="x:Boolean">
                            <mca:CSharpReference x:TypeArguments="x:Boolean">IsEICEligible</mca:CSharpReference>
                          </OutArgument>
                        </Assign.To>
                        <Assign.Value>
                          <InArgument x:TypeArguments="x:Boolean">False</InArgument>
                        </Assign.Value>
                      </Assign>
                    </If.Else>
                  </If>
                </If.Then>
                <If.Else>
                  <Assign>
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:Boolean">
                        <mca:CSharpReference x:TypeArguments="x:Boolean">IsEICEligible</mca:CSharpReference>
                      </OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:Boolean">False</InArgument>
                    </Assign.Value>
                  </Assign>
                </If.Else>
              </If>
            </Sequence>
            <Assign>
              <Assign.To>
                <OutArgument x:TypeArguments="x:Boolean">
                  <mca:CSharpReference x:TypeArguments="x:Boolean">HasEarnedIncomeCredit</mca:CSharpReference>
                </OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:Boolean">
                  <mca:CSharpValue x:TypeArguments="x:Boolean">IsEICEligible</mca:CSharpValue>
                </InArgument>
              </Assign.Value>
            </Assign>
            <If>
              <If.Condition>
                <InArgument x:TypeArguments="x:Boolean">
                  <mca:CSharpValue x:TypeArguments="x:Boolean">Tax1040Object.Credits != null</mca:CSharpValue>
                </InArgument>
              </If.Condition>
              <If.Then>
                <Assign>
                  <Assign.To>
                    <OutArgument x:TypeArguments="s:Nullable(x:Boolean)">
                      <mca:CSharpReference x:TypeArguments="s:Nullable(x:Boolean)">Tax1040Object.Credits.HasEarnedIncomeCredits</mca:CSharpReference>
                    </OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="s:Nullable(x:Boolean)">
                      <mca:CSharpValue x:TypeArguments="s:Nullable(x:Boolean)">IsEICEligible</mca:CSharpValue>
                    </InArgument>
                  </Assign.Value>
                </Assign>
              </If.Then>
              <If.Else>
                <Sequence>
                  <Assign>
                    <Assign.To>
                      <OutArgument x:TypeArguments="jtb:Credits">
                        <mca:CSharpReference x:TypeArguments="jtb:Credits">Tax1040Object.Credits</mca:CSharpReference>
                      </OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="jtb:Credits">
                        <mca:CSharpValue x:TypeArguments="jtb:Credits">new Credits()</mca:CSharpValue>
                      </InArgument>
                    </Assign.Value>
                  </Assign>
                  <Assign>
                    <Assign.To>
                      <OutArgument x:TypeArguments="s:Nullable(x:Boolean)">
                        <mca:CSharpReference x:TypeArguments="s:Nullable(x:Boolean)">Tax1040Object.Credits.HasEarnedIncomeCredits</mca:CSharpReference>
                      </OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="s:Nullable(x:Boolean)">
                        <mca:CSharpValue x:TypeArguments="s:Nullable(x:Boolean)">IsEICEligible</mca:CSharpValue>
                      </InArgument>
                    </Assign.Value>
                  </Assign>
                </Sequence>
              </If.Else>
            </If>
          </Sequence>
        </If.Then>
        <If.Else>
          <Assign>
            <Assign.To>
              <OutArgument x:TypeArguments="x:Boolean">
                <mca:CSharpReference x:TypeArguments="x:Boolean">IsEICEligible</mca:CSharpReference>
              </OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="x:Boolean">False</InArgument>
            </Assign.Value>
          </Assign>
        </If.Else>
      </If>
      <sads:DebugSymbol.Symbol>9xDQ/ehXAj8WRUbTUanwXuvNqgFFOlxUYXgxMDQwRVpcVGF4MTA0MExhdGVzdFxKZWV2YW4xMDQwXEZlYXR1cmVcQ29kZVxKVEwuVGF4MTA0MC5CdXNpbmVzc0xvZ2ljXFdvcmtGbG93XEFjdGl2aXRpZXNcQ2FsY3VsYXRpb25XaXRoTm9WYWxpZGF0aW9uXEYxMDQwRVpFSUNFbGlnaWJpbGl0eVJ1bGVDaGVja0ZvclN1bW1hcnkueGFtbD0oA4gCDgIBASo0KjsCAQQrNCs7AgEDLDUsOwIBAi4FhgIKAgEFMQsxXgIBBjUJ9wEUAgEU+gEJhAISAgEMNgu5ARYCAVG6AQvFARQCAUTGAQv2ARACARWBAjWBAjoCARP9AQ/9AWMCAQ03DbgBEgIBUsIBEcIBXQIBS70BEb0BbQIBRckBEckBbQIBFs0BD9gBGAIBN9sBD/QBGgIBHDoTOm4CAVM+EakBFgIBYawBEbYBGgIBWdUBFdUBbQIBPtABFdABlAECATjcARHnARoCASroARHzARoCAR1BF0F2AgFiRRWaASACAXCdARWnAR4CAWizAT2zAUICAWCvARevAWsCAVrkARfkAWUCATHfARffAXUCASvwARfwAW8CASTrARfrAZYBAgEeRhdaIgMBoQFbF28iAwGRAXAXhAEiAwGBAYUBF5kBIgIBcaQBQaQBRgIBb6ABG6ABbwIBaUcZWR4DAaIBXBluHgMBkgFxGYMBHgMBggGGARmYAR4CAXJKH0r0AQMBowFOHVcmAwGpAV8fX94BAwGTAWMdbCYDAZkBdB904wEDAYMBeB2BASYDAYkBiQEfiQH1AQIBc40BHZYBJgIBeVVJVU4DAbABUSNRdwMBqgFqSWpOAwGgAWYjZncDAZoBf0l/TgMBkAF7I3t3AwGKAZQBSZQBTgMBgAGQASOQAXcCAXo=</sads:DebugSymbol.Symbol>
    </Sequence>
  </jtbwac:F1040EZEICEligibilityRuleCheckForSummary.Implementation>
</jtbwac:F1040EZEICEligibilityRuleCheckForSummary>