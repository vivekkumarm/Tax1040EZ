/*
Deployment script for Tax1040EZReturn

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "Tax1040EZReturn"
:setvar DefaultFilePrefix "Tax1040EZReturn"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL10_50.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL10_50.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL 
            WITH ROLLBACK IMMEDIATE;
        
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET PAGE_VERIFY NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Creating [dbo].[order]...';


GO
CREATE TABLE [dbo].[order] (
    [order_id]         BIGINT          IDENTITY (1, 1) NOT NULL,
    [user_data_id]     BIGINT          NOT NULL,
    [shopping_cart_id] BIGINT          NOT NULL,
    [order_amount]     DECIMAL (22, 2) NOT NULL,
    [card_number]      VARCHAR (50)    NOT NULL,
    [cardtype_id]      INT             NOT NULL,
    [card_expires]     VARCHAR (10)    NOT NULL,
    [processed]        BIT             NOT NULL,
    [time]             DATETIME        NOT NULL,
    [o_authorization]  VARCHAR (50)    NOT NULL,
    [ip_address]       VARCHAR (50)    NOT NULL,
    [is_deleted]       BIT             NOT NULL,
    [create_timestamp] DATETIME        NOT NULL,
    [update_timestamp] DATETIME        NOT NULL,
    CONSTRAINT [pk_order] PRIMARY KEY CLUSTERED ([order_id] ASC)
);


GO
PRINT N'Creating [dbo].[order_billing_address]...';


GO
CREATE TABLE [dbo].[order_billing_address] (
    [order_billing_address_id] BIGINT         IDENTITY (1, 1) NOT NULL,
    [order_id]                 BIGINT         NOT NULL,
    [name]                     NVARCHAR (100) NULL,
    [email]                    NVARCHAR (100) NULL,
    [street_address]           NVARCHAR (35)  NULL,
    [apartment_number]         NVARCHAR (5)   NULL,
    [city]                     NVARCHAR (20)  NULL,
    [state_name]               NVARCHAR (50)  NULL,
    [country_name]             NVARCHAR (100) NULL,
    [phone]                    NVARCHAR (12)  NULL,
    [postcode]                 VARCHAR (20)   NULL,
    [is_deleted]               BIT            NOT NULL,
    [create_datetime]          DATETIME       NOT NULL,
    [update_datetime]          DATETIME       NOT NULL,
    CONSTRAINT [pk_orderbillingaddres] PRIMARY KEY CLUSTERED ([order_billing_address_id] ASC)
);


GO
PRINT N'Creating [dbo].[order_detail_mapper]...';


GO
CREATE TABLE [dbo].[order_detail_mapper] (
    [order_detail_mapper_id] BIGINT          IDENTITY (1, 1) NOT NULL,
    [shopping_cart_id]       BIGINT          NOT NULL,
    [sku_id]                 BIGINT          NOT NULL,
    [sku_price]              NUMERIC (15, 2) NOT NULL,
    [state_id]               BIGINT          NOT NULL,
    [is_deleted]             BIT             NOT NULL,
    [create_timestamp]       DATETIME        NOT NULL,
    [update_timestamp]       DATETIME        NOT NULL,
    CONSTRAINT [pk_order_detail_mapper] PRIMARY KEY CLUSTERED ([order_detail_mapper_id] ASC)
);


GO
PRINT N'Creating [dbo].[shopping_cart]...';


GO
CREATE TABLE [dbo].[shopping_cart] (
    [shopping_cart_id] BIGINT   IDENTITY (1, 1) NOT NULL,
    [user_data_id]     BIGINT   NOT NULL,
    [product_id]       BIGINT   NOT NULL,
    [is_deleted]       BIT      NOT NULL,
    [create_timestamp] DATETIME NOT NULL,
    [update_timestamp] DATETIME NOT NULL,
    CONSTRAINT [pk_shopping_cart] PRIMARY KEY CLUSTERED ([shopping_cart_id] ASC)
);


GO
PRINT N'Creating [dbo].[user_data]...';


GO
CREATE TABLE [dbo].[user_data] (
    [user_data_id]      BIGINT   IDENTITY (1, 1) NOT NULL,
    [user_id]           BIGINT   NOT NULL,
    [session_data]      TEXT     NULL,
    [tax_data]          TEXT     NOT NULL,
    [history_data]      TEXT     NULL,
    [session_terminate] BIT      NULL,
    [create_datetime]   DATETIME NOT NULL,
    [upate_datetime]    DATETIME NOT NULL,
    [is_deleted]        BIT      NOT NULL,
    CONSTRAINT [PK_user_data] PRIMARY KEY CLUSTERED ([user_data_id] ASC),
    UNIQUE NONCLUSTERED ([user_id] ASC)
) ON [PRIMARY];


GO
PRINT N'Creating [dbo].[user_feature]...';


GO
CREATE TABLE [dbo].[user_feature] (
    [user_feature_id]        BIGINT   IDENTITY (1, 1) NOT NULL,
    [user_data_id]           BIGINT   NOT NULL,
    [federal_feature_sku_id] BIGINT   NULL,
    [state_feature_sku_id]   BIGINT   NULL,
    [is_deleted]             BIT      NOT NULL,
    [create_timestamp]       DATETIME NOT NULL,
    [update_timestamp]       DATETIME NOT NULL
);


GO
PRINT N'Creating Default Constraint on [dbo].[order]....';


GO
ALTER TABLE [dbo].[order]
    ADD DEFAULT (1) FOR [processed];


GO
PRINT N'Creating Default Constraint on [dbo].[order]....';


GO
ALTER TABLE [dbo].[order]
    ADD DEFAULT (0) FOR [is_deleted];


GO
PRINT N'Creating Default Constraint on [dbo].[order]....';


GO
ALTER TABLE [dbo].[order]
    ADD DEFAULT GETDATE() FOR [create_timestamp];


GO
PRINT N'Creating Default Constraint on [dbo].[order]....';


GO
ALTER TABLE [dbo].[order]
    ADD DEFAULT GETDATE() FOR [update_timestamp];


GO
PRINT N'Creating Default Constraint on [dbo].[order_billing_address]....';


GO
ALTER TABLE [dbo].[order_billing_address]
    ADD DEFAULT (0) FOR [is_deleted];


GO
PRINT N'Creating Default Constraint on [dbo].[order_billing_address]....';


GO
ALTER TABLE [dbo].[order_billing_address]
    ADD DEFAULT GETDATE() FOR [create_datetime];


GO
PRINT N'Creating Default Constraint on [dbo].[order_billing_address]....';


GO
ALTER TABLE [dbo].[order_billing_address]
    ADD DEFAULT GETDATE() FOR [update_datetime];


GO
PRINT N'Creating Default Constraint on [dbo].[order_detail_mapper]....';


GO
ALTER TABLE [dbo].[order_detail_mapper]
    ADD DEFAULT (0) FOR [is_deleted];


GO
PRINT N'Creating Default Constraint on [dbo].[order_detail_mapper]....';


GO
ALTER TABLE [dbo].[order_detail_mapper]
    ADD DEFAULT GETDATE() FOR [create_timestamp];


GO
PRINT N'Creating Default Constraint on [dbo].[order_detail_mapper]....';


GO
ALTER TABLE [dbo].[order_detail_mapper]
    ADD DEFAULT GETDATE() FOR [update_timestamp];


GO
PRINT N'Creating Default Constraint on [dbo].[shopping_cart]....';


GO
ALTER TABLE [dbo].[shopping_cart]
    ADD DEFAULT (0) FOR [is_deleted];


GO
PRINT N'Creating Default Constraint on [dbo].[shopping_cart]....';


GO
ALTER TABLE [dbo].[shopping_cart]
    ADD DEFAULT GETDATE() FOR [create_timestamp];


GO
PRINT N'Creating Default Constraint on [dbo].[shopping_cart]....';


GO
ALTER TABLE [dbo].[shopping_cart]
    ADD DEFAULT GETDATE() FOR [update_timestamp];


GO
PRINT N'Creating DF_user_data_create_datetime...';


GO
ALTER TABLE [dbo].[user_data]
    ADD CONSTRAINT [DF_user_data_create_datetime] DEFAULT (getdate()) FOR [create_datetime];


GO
PRINT N'Creating DF_user_data_upate_datetime...';


GO
ALTER TABLE [dbo].[user_data]
    ADD CONSTRAINT [DF_user_data_upate_datetime] DEFAULT (getdate()) FOR [upate_datetime];


GO
PRINT N'Creating DF_user_data_is_deleted...';


GO
ALTER TABLE [dbo].[user_data]
    ADD CONSTRAINT [DF_user_data_is_deleted] DEFAULT ((0)) FOR [is_deleted];


GO
PRINT N'Creating Default Constraint on [dbo].[user_feature]....';


GO
ALTER TABLE [dbo].[user_feature]
    ADD DEFAULT (0) FOR [is_deleted];


GO
PRINT N'Creating Default Constraint on [dbo].[user_feature]....';


GO
ALTER TABLE [dbo].[user_feature]
    ADD DEFAULT GETDATE() FOR [create_timestamp];


GO
PRINT N'Creating Default Constraint on [dbo].[user_feature]....';


GO
ALTER TABLE [dbo].[user_feature]
    ADD DEFAULT GETDATE() FOR [update_timestamp];


GO
PRINT N'Creating fk_order_shopping_cart...';


GO
ALTER TABLE [dbo].[order] WITH NOCHECK
    ADD CONSTRAINT [fk_order_shopping_cart] FOREIGN KEY ([shopping_cart_id]) REFERENCES [dbo].[shopping_cart] ([shopping_cart_id]);


GO
PRINT N'Creating fk_order_user_data...';


GO
ALTER TABLE [dbo].[order] WITH NOCHECK
    ADD CONSTRAINT [fk_order_user_data] FOREIGN KEY ([user_data_id]) REFERENCES [dbo].[user_data] ([user_data_id]);


GO
PRINT N'Creating fk_order_billing_address_order...';


GO
ALTER TABLE [dbo].[order_billing_address] WITH NOCHECK
    ADD CONSTRAINT [fk_order_billing_address_order] FOREIGN KEY ([order_id]) REFERENCES [dbo].[order] ([order_id]);


GO
PRINT N'Creating FK_order_detail_mapper_shopping_cart...';


GO
ALTER TABLE [dbo].[order_detail_mapper] WITH NOCHECK
    ADD CONSTRAINT [FK_order_detail_mapper_shopping_cart] FOREIGN KEY ([shopping_cart_id]) REFERENCES [dbo].[shopping_cart] ([shopping_cart_id]);


GO
PRINT N'Creating FK_shopping_cart_user_data...';


GO
ALTER TABLE [dbo].[shopping_cart] WITH NOCHECK
    ADD CONSTRAINT [FK_shopping_cart_user_data] FOREIGN KEY ([user_data_id]) REFERENCES [dbo].[user_data] ([user_data_id]);


GO
PRINT N'Creating fk_federal_user_data_id...';


GO
ALTER TABLE [dbo].[user_feature] WITH NOCHECK
    ADD CONSTRAINT [fk_federal_user_data_id] FOREIGN KEY ([user_data_id]) REFERENCES [dbo].[user_data] ([user_data_id]);


GO
PRINT N'Creating [dbo].[usp_get_order_amount_by_shopping_cart_id]...';


GO
/*********************************************************************************************
Created by Ashok Kumar - 21st May, 2014 -  Get Order Amount  based on Shopping Cart ID.  
*********************************************************************************************/
/* Modification History */
/* 07Jul2014 Sathish return total sum of price for federal and state */
CREATE PROCEDURE [dbo].[usp_get_order_amount_by_shopping_cart_id]
@product_id BIGINT,
@user_data_id BIGINT
AS
BEGIN
	SET NOCOUNT ON;
		BEGIN
			--SELECT SUM(sku_price) order_amount FROM  [dbo].[order_detail_mapper] WITH(NOLOCK)
			--WHERE [shopping_cart_id] = @shopping_cart_id
			--	AND [is_deleted] = 0
			
			SELECT SUM(price) AS price FROM 
			(SELECT SUM(ff.[federal_price]) AS price 
			FROM [dbo].[user_feature]  AS uf WITH(NOLOCK)
				INNER JOIN [dbo].[federal_feature_sku] ff
					on uf.[federal_feature_sku_id] = ff.[feature_id]
				INNER JOIN [dbo].[feature] f
					on f.[feature_id] = ff.[federal_feature_sku_id]
					where ff.[product_id] =  @product_id
						AND uf.[user_data_id] = @user_data_id
			UNION			
			SELECT SUM(sf.[state_price]) AS price FROM [dbo].[user_feature] AS uf
				INNER JOIN [dbo].[state_feature_sku] sf
					on uf.[state_feature_sku_id] = sf.[state_feature_sku_id]
				INNER JOIN [dbo].[feature] f
					on f.[feature_id] = sf.[feature_id]
			WHERE sf.[product_id] =  @product_id
				AND uf.[user_data_id] = @user_data_id	)order_price 		
			
			
		END
	SET NOCOUNT OFF;	
END
GO
PRINT N'Creating [dbo].[usp_get_user_data_id_by_user_id]...';


GO
/*******************************************************************************
Created by Balasubramanian - 2 April 2014 - Procedure for get user_data_id column from [user_data] table by user_id column
/* Modification History*/ 
********************************************************************************/   
CREATE PROCEDURE [dbo].[usp_get_user_data_id_by_user_id]
@user_id BIGINT
AS
BEGIN
SET NOCOUNT ON;
IF EXISTS(SELECT 1 FROM [dbo].[user_data] WITH(NOLOCK) 
			WHERE [user_id]=@user_id 
			  AND [is_deleted] = 0)
BEGIN
	SELECT [user_data_id] FROM [dbo].[user_data] WITH(NOLOCK) 
			WHERE [user_id]=@user_id 
			  AND [is_deleted] = 0
END    
ELSE
BEGIN
	SELECT CAST(0 AS BIGINT) AS 'user_data_id'
END	
SET NOCOUNT OFF;
END
GO
PRINT N'Creating [dbo].[usp_get_user_feature_sku]...';


GO
/*********************************************************************************************
Created by Sathish - 4Jul2014 get user order 
*********************************************************************************************/
/* Modification History */
/* */
CREATE PROCEDURE dbo.usp_get_user_feature_sku
@product_id BIGINT,
@user_data_id BIGINT
AS
BEGIN
	SET NOCOUNT ON;
		BEGIN
			SELECT 0 AS [federal_id],
				   'Federal' AS [federal], 
				   SUM([federal_feature].[federal_price]) AS [federal_price] 
			FROM (SELECT f.[feature_name],f.[description],ff.[federal_price] FROM [dbo].[user_feature]  AS uf WITH(NOLOCK)
				INNER JOIN [dbo].[federal_feature_sku] ff
					on uf.[federal_feature_sku_id] = ff.[feature_id]
				INNER JOIN [dbo].[feature] f
					on f.[feature_id] = ff.[federal_feature_sku_id]
					where ff.[product_id] =  @product_id
						AND uf.user_data_id = @user_data_id ) federal_feature
					

		SELECT [state_feature].[state_id],
					s.[state_name],
					SUM([state_feature].[state_price]) as state_price 
			FROM (SELECT f.[feature_name],f.[description],sf.[state_id],sf.[state_price] FROM [dbo].[user_feature] AS uf
				INNER JOIN [dbo].[state_feature_sku] sf
					on uf.[state_feature_sku_id] = sf.[state_feature_sku_id]
				INNER JOIN [dbo].[feature] f
					on f.[feature_id] = sf.[feature_id]
			WHERE sf.[product_id] =  @product_id
				AND uf.user_data_id = @user_data_id ) [state_feature]
			INNER JOIN [state] AS s
				on s.[state_id] = [state_feature].[state_id]
			GROUP BY [state_feature].[state_id],s.[state_name]
			
		END
	SET NOCOUNT OFF;	
END
GO
PRINT N'Creating [dbo].[usp_is_order_exist_by_user_data_id]...';


GO
/*************************************************************************************************
Created by Sathish on 18Jul2014 procedure check weather order exist for the user
**************************************************************************************************/

CREATE PROCEDURE [dbo].[usp_is_order_exist_by_user_data_id]
@product_id BIGINT,
@user_data_id BIGINT
AS
BEGIN 
	SET NOCOUNT ON;

		IF EXISTS(SELECT 1 FROM [dbo].[shopping_cart] WITH(NOLOCK) 
			WHERE [user_data_id]=@user_data_id
			AND [product_id] = @product_id
			AND [is_deleted] = 1)
		BEGIN
			SELECT CAST(1 AS BIT) AS [is_order_exist] 
		END
		ELSE
		BEGIN
			SELECT CAST(0 AS BIT) AS [is_order_exist] 
		END
	SET NOCOUNT OFF;
END
GO
PRINT N'Creating [dbo].[usp_order_and_order_billing_address_persist]...';


GO
/*********************************************************************************************
Created by Ashok Kumar - 16th May, 2014 -  Persist Order and Order Billing Address records into DB.  
*********************************************************************************************/
/*Modification History*/
/* */

CREATE PROCEDURE usp_order_and_order_billing_address_persist
@user_data_id BIGINT,
@shopping_cart_id BIGINT,
@order_amount NUMERIC(22,2),
@card_number VARCHAR(50),
@cardtype_id INT,
@card_expires VARCHAR(10),
@processed BIT,
@time DATETIME,
@o_authorization VARCHAR(50),
@ip_address VARCHAR(50),
@name VARCHAR(50),
@email VARCHAR(50),
@street_address VARCHAR(50),
@apartment_number NVARCHAR(5),
@city VARCHAR(20),
@state_name VARCHAR(20),
@country_name VARCHAR(20) = null,
@phone VARCHAR(20),
@postcode VARCHAR(20)

AS

BEGIN

SET NOCOUNT ON;
BEGIN TRANSACTION
DECLARE @order_identity BIGINT
    
         INSERT INTO [dbo].[order]
         ( 
				[user_data_id],
				[shopping_cart_id],
				[order_amount],
				[card_number] ,
				[cardtype_id] ,
				[card_expires],
				[processed] ,
				[time] ,
				[o_authorization] ,
				[ip_address] ,
				[is_deleted] ,
				[create_timestamp],
				[update_timestamp]
          )
          
		  VALUES
          (
				@user_data_id,
				@shopping_cart_id ,
				@order_amount ,
				@card_number ,
				@cardtype_id ,
				@card_expires ,
				@processed ,
				@time ,
				@o_authorization ,
				@ip_address ,
				0,
				GETDATE(),
				GETDATE()
          )

	SET @order_identity=@@IDENTITY   
             
            INSERT INTO [dbo].[order_billing_address]
            (
                [order_id] ,
				[name] ,
				[email] ,
				[street_address] ,
				[apartment_number],
				[city] ,
				[state_name] ,
				[country_name] ,
				[phone] ,
				[postcode] ,
				[is_deleted] ,
				[create_datetime] ,
				[update_datetime] 
            )
            VALUES
            (           
				@order_identity,
				@name ,
				@email,
				@street_address,
				@apartment_number,
				@city ,
				@state_name,
				@country_name ,
				@phone ,
				@postcode,
				0,
				GETDATE(),
				GETDATE()
            )

			 UPDATE [dbo].[order_detail_mapper] SET [is_deleted] = 1
			 WHERE [shopping_cart_id] = @shopping_cart_id

			 UPDATE [dbo].[shopping_cart] SET [is_deleted] = 1
			 WHERE [shopping_cart_id] = @shopping_cart_id
                 
			 SELECT @order_identity

      IF @@ERROR = 0
        COMMIT TRANSACTION
      ELSE
        ROLLBACK TRANSACTION

SET NOCOUNT OFF;
END
GO
PRINT N'Creating [dbo].[usp_order_get_by_order_id]...';


GO
/*********************************************************************************************
Created by Ashok Kumar - 16th May, 2014 -  Get Order against order Id.  
*********************************************************************************************/
/*Modification History*/
/* */

CREATE PROCEDURE usp_order_get_by_order_id
@order_id BIGINT
AS 
BEGIN
SET NOCOUNT ON;

	SELECT	o.[order_id],
			o.[user_data_id],
            o.[shopping_cart_id],
            o.[order_amount],
            o.[card_number] ,
            o.[cardtype_id] ,
            o.[card_expires],
            o.[processed] ,
            o.[time] ,
            o.[o_authorization] ,
            o.[ip_address] ,
            ob.[name] ,
            ob.[email] ,
            ob.[street_address] ,
			ob.[apartment_number],
            ob.[city] ,
            ob.[state_name] ,
            ob.[country_name] ,
            ob.[phone] ,
            ob.[postcode]
    FROM [dbo].[order] o WITH(NOLOCK)
    INNER JOIN [dbo].[order_billing_address] ob 
				ON o.[order_id]=ob.[order_id]
    WHERE o.[order_id]=@order_id

	 SELECT
		odm.[sku_id],
		ps.[sku_name],
		ps.[sku_description],
		odm.[sku_price],
		odm.[state_id]
	FROM
		[dbo].[order_detail_mapper] odm 
		INNER JOIN [dbo].[shopping_cart] sc on odm.[shopping_cart_id]=sc.[shopping_cart_id]
		INNER JOIN [dbo].[order] o on o.[shopping_cart_id]=sc.[shopping_cart_id]
		INNER JOIN [dbo].[product_sku] ps on ps.[sku_id]=odm.[sku_id] 
	WHERE o.[order_id]=@order_id

SET NOCOUNT OFF;
END
GO
PRINT N'Creating [dbo].[usp_persist_user_feature]...';


GO

/*********************************************************************************************
Created by Sathish - 15July2014 -  Persist User feature  
*********************************************************************************************/
/* Modification History */
CREATE PROCEDURE [dbo].[usp_persist_user_feature]
@product_id BIGINT,
@user_data_id BIGINT
AS
BEGIN
	SET NOCOUNT ON;
		BEGIN
			IF NOT EXISTS( SELECT [user_data_id] FROM [dbo].[user_feature]
							WHERE [user_data_id] = @user_data_id)
			BEGIN
					INSERT INTO [dbo].[user_feature]([user_data_id],[federal_feature_sku_id])
							(SELECT @user_data_id,
								  [federal_feature_sku_id] 
							FROM [dbo].[federal_feature_sku] WITH(NOLOCK)
							WHERE [product_id] = @product_id)		
					
					INSERT INTO [dbo].[user_feature]([user_data_id],[state_feature_sku_id])
								(SELECT  @user_data_id,
										[state_feature_sku_id] 
								FROM [dbo].[state_feature_sku] WITH(NOLOCK)
								WHERE [product_id] = @product_id)
			END
		
		END
	SET NOCOUNT OFF;	
END
GO
PRINT N'Creating [dbo].[usp_session_data_persist]...';


GO
/*******************************************************************************
Created by Saravanan N - 15th April, 2014 - Persist SessionData into DB.
********************************************************************************/

CREATE PROCEDURE [dbo].[usp_session_data_persist]
	@user_id BIGINT,
	@user_data_id BIGINT,
	@session_data VARCHAR(300)
AS
BEGIN
	SET NOCOUNT ON;
	BEGIN TRANSACTION

		UPDATE [dbo].[user_data]
		SET 
           [session_data]=@session_data, [upate_datetime]=GETDATE()
		WHERE 
			([user_id]=@user_id AND [user_data_id]=@user_data_id AND [is_deleted] = 0)

	IF @@ERROR = 0
		COMMIT TRANSACTION
	ELSE
		ROLLBACK TRANSACTION
	SET NOCOUNT OFF;
END
GO
PRINT N'Creating [dbo].[usp_shopping_cart_and_order_detail_mapper_persist]...';


GO

/*********************************************************************************************
Created by Ashok Kumar – 3rd June, 2014 -  Get Product Sku based on Product ID and State IDS.  
*********************************************************************************************/
/* Modification History */
/* 07Jul2014 Sathish commented order detail mapper persit*/
CREATE PROCEDURE [dbo].[usp_shopping_cart_and_order_detail_mapper_persist]
(
	@user_data_id BIGINT,
	@product_id BIGINT
)
AS
BEGIN
SET NOCOUNT ON;
          
          DECLARE @Shopping_Identity BIGINT

           INSERT INTO [dbo].[shopping_cart]
            (
            [user_data_id],
            [product_id],  
            [is_deleted] ,
            [create_timestamp],
            [update_timestamp]
            )
            VALUES
            (  
            @user_data_id,
            @product_id,
            0,
            GETDATE(),
            GETDATE()
            )
           SELECT @Shopping_Identity=@@IDENTITY
           
           --CREATE TABLE #temp(sku_id BIGINT ,sku_price NUMERIC(15, 2),state_id BIGINT,sku_description [VARCHAR](100),[sku_name] [VARCHAR](50))
           
           --INSERT INTO #temp(sku_id,sku_name,sku_description,sku_price,state_id)
           
           --EXECUTE [dbo].[usp_get_all_productsku_by_product_id_and_state_ids] @product_id,@state_ids
           
           --INSERT INTO [dbo].[order_detail_mapper]
           -- (
           --  [shopping_cart_id],
           --  [sku_id],
           --  [sku_price],
           --  [state_id],
           --  [is_deleted],
           --  [create_timestamp],
           --  [update_timestamp]
           -- )
           -- SELECT @Shopping_Identity,[sku_id],[sku_price],[state_id],0,GETDATE(),GETDATE()
           -- FROM #temp 
            
           -- DROP TABLE #temp
            
           SELECT @Shopping_Identity AS shopping_cart_id

SET NOCOUNT OFF;
END
GO
PRINT N'Creating [dbo].[usp_user_data_get_by_user_data_id]...';


GO
/****************************************************************************************
Author          : Ashok Kumar - 
Created Date    : 17th March, 2014
Description     : Retrieving User data by use_data_id from DB.


     Date                 Name                         Summary
    -----                ------                       ---------
18th March, 2014        Ashok Kumar        Added @user_id as input parameter
*/

CREATE PROCEDURE [dbo].[usp_user_data_get_by_user_data_id]
@user_data_id BIGINT,
@user_id BIGINT
AS 
BEGIN
SET NOCOUNT ON;

    SELECT 
		[user_id],
		[session_data],
		[tax_data],
		[history_data],
		[session_terminate],
		[create_datetime],
		[upate_datetime],
		[is_deleted]
    FROM  [dbo].[user_data] WITH(NOLOCK)
    WHERE [user_data_id]=@user_data_id and [user_id]=@user_id and [is_deleted]=0
   
SET NOCOUNT OFF;
END
GO
PRINT N'Creating [dbo].[usp_user_data_persist]...';


GO
/*******************************************************************************
Author          : Ashok Kumar - 
Created Date    : 17th March, 2014
Description     : Persisting User data records into DB.

     Date                 Name                         Summary
    -----                ------                       ---------
18th March, 2014        Ashok Kumar        Removed @session_terminate as input parameter
26th March, 2014        Ashok Kumar        Added where condtion to Update section
*/
CREATE PROCEDURE [dbo].[usp_user_data_persist]
@user_data_id BIGINT,
@user_id BIGINT,
@session_data TEXT = NULL,
@tax_data TEXT,
@history_data TEXT = NULL
AS
BEGIN
SET NOCOUNT ON;
 
   IF @user_data_id=0
    
     BEGIN
     
        INSERT INTO [dbo].[user_data]
        (
			[user_id],
			[session_data],
			[tax_data],
			[history_data]
        )
        VALUES
        (
        @user_id,
        @session_data,
        @tax_data,
        @history_data
        )
        
       SELECT @@IDENTITY AS 'user_data_id'
    
     END
   ELSE
     BEGIN
      
       UPDATE [dbo].[user_data]
       SET [user_id]=@user_id,
           [session_data]=@session_data,
           [tax_data]=@tax_data,
           [history_data]=@history_data,
           [upate_datetime]=GETDATE()
       WHERE [user_data_id]=@user_data_id

      SELECT @user_data_id AS 'user_data_id'
     
     END

SET NOCOUNT OFF;
END
GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
/*6June2014 Ashok Kumar Added Post deployment script*/

/*6June2014 Ashok Kumar Added Synonym to Returns database for accessing a stored procedure from Master Database.*/
CREATE SYNONYM [dbo].[usp_get_all_productsku_by_product_id_and_state_ids] FOR TAX1040_Master_DB.[dbo].[usp_get_all_productsku_by_product_id_and_state_ids]
CREATE SYNONYM [dbo].[usp_get_all_productsku_by_product_id] FOR TAX1040_Master_DB.[dbo].[usp_get_all_productsku_by_product_id] 
CREATE SYNONYM [dbo].[product_sku] FOR TAX1040_Master_DB.[dbo].[product_sku]

/*3Jul2014 Sathish Added Synonym to Returns database for accessing a stored procedure from Master Database.*/
CREATE SYNONYM [dbo].[federal_feature_sku] FOR TAX1040_Master_DB.[dbo].[federal_feature_sku]
CREATE SYNONYM [dbo].[state_feature_sku] FOR TAX1040_Master_DB.[dbo].[state_feature_sku]
CREATE SYNONYM [dbo].[feature] FOR TAX1040_Master_DB.[dbo].[feature]
CREATE SYNONYM [dbo].[state] FOR TAX1040_Master_DB.[dbo].[state]
GO

GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [dbo].[order] WITH CHECK CHECK CONSTRAINT [fk_order_shopping_cart];

ALTER TABLE [dbo].[order] WITH CHECK CHECK CONSTRAINT [fk_order_user_data];

ALTER TABLE [dbo].[order_billing_address] WITH CHECK CHECK CONSTRAINT [fk_order_billing_address_order];

ALTER TABLE [dbo].[order_detail_mapper] WITH CHECK CHECK CONSTRAINT [FK_order_detail_mapper_shopping_cart];

ALTER TABLE [dbo].[shopping_cart] WITH CHECK CHECK CONSTRAINT [FK_shopping_cart_user_data];

ALTER TABLE [dbo].[user_feature] WITH CHECK CHECK CONSTRAINT [fk_federal_user_data_id];


GO
PRINT N'Update complete.'
GO
